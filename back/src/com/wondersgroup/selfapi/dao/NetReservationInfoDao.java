package com.wondersgroup.selfapi.dao;

import java.sql.*;
import java.util.*;
import wfc.facility.tool.autocode.*;
import wfc.service.database.*;

import org.springframework.stereotype.Repository;

import com.wondersgroup.selfapi.bean.NetReservationInfo;

/**
 * 预约信息表
 * @author generated by wfc.facility.tool.autocode.InternalDaoGenerator
 */
@Repository
public class NetReservationInfoDao {

    private Connection con = null;

    public NetReservationInfoDao() {
    }

    public NetReservationInfoDao(Connection con) {
        this.con = con;
    }

    public void add(NetReservationInfo info) {
        String sql = "insert into NET_RESERVATION_INFO(ST_RESERVATION_ID, ST_RESERVATION_NO, ST_BUSINESS_NO, ST_ITEM_ID, ST_ITEM_NO, ST_ITEM_NAME, ST_GROUP_CODE, DT_OPERATION, DT_RESERVATION_START, DT_RESERVATION_END, ST_USER_ID, ST_USER_NAME, ST_MOBILE, NM_IDENTITY_TYPE, ST_IDENTITY_NO, NM_REMOVED, ST_DETAIL_ID, NM_DATA_SOURCE, NM_ORGAN_NODE_ID, ST_ORGAN_NAME, ST_ORGAN_CODE, ST_HALL_INFO, ST_SHOW, ST_UNIT, ST_UNIFIED, ST_EXT1, ST_EXT2) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        Object[] obj = {
            info.getStReservationId(),
            info.getStReservationNo(),
            info.getStBusinessNo(),
            info.getStItemId(),
            info.getStItemNo(),
            info.getStItemName(),
            info.getStGroupCode(),
            info.getDtOperation(),
            info.getDtReservationStart(),
            info.getDtReservationEnd(),
            info.getStUserId(),
            info.getStUserName(),
            info.getStMobile(),
            info.getNmIdentityType(),
            info.getStIdentityNo(),
            info.getNmRemoved(),
            info.getStDetailId(),
            info.getNmDataSource(),
            info.getNmOrganNodeId(),
            info.getStOrganName(),
            info.getStOrganCode(),
            info.getStHallInfo(),
            info.getStShow(),
            info.getStUnit(),
            info.getStUnified(),
            info.getStExt1(),
            info.getStExt2()        	
        };
        if (con == null) {
            SQL.execute(sql, obj);
        } else {
            SQL.execute(con, sql, obj);
        }
    }

    public void update(NetReservationInfo info) {
        String sql = "update NET_RESERVATION_INFO set ST_RESERVATION_NO = ?, ST_BUSINESS_NO = ?, ST_ITEM_ID = ?, ST_ITEM_NO = ?, ST_ITEM_NAME = ?, ST_GROUP_CODE = ?, DT_OPERATION = ?, DT_RESERVATION_START = ?, DT_RESERVATION_END = ?, ST_USER_ID = ?, ST_USER_NAME = ?, ST_MOBILE = ?, NM_IDENTITY_TYPE = ?, ST_IDENTITY_NO = ?, NM_REMOVED = ?, ST_DETAIL_ID = ?, NM_DATA_SOURCE = ?, NM_ORGAN_NODE_ID = ?, ST_ORGAN_NAME = ?, ST_ORGAN_CODE = ?, ST_HALL_INFO = ?, ST_SHOW = ?, ST_UNIT = ?, ST_UNIFIED = ?, ST_EXT1 = ?, ST_EXT2 = ? where ST_RESERVATION_ID = ?";
        Object[] obj = {
            info.getStReservationNo(),
            info.getStBusinessNo(),
            info.getStItemId(),
            info.getStItemNo(),
            info.getStItemName(),
            info.getStGroupCode(),
            info.getDtOperation(),
            info.getDtReservationStart(),
            info.getDtReservationEnd(),
            info.getStUserId(),
            info.getStUserName(),
            info.getStMobile(),
            info.getNmIdentityType(),
            info.getStIdentityNo(),
            info.getNmRemoved(),
            info.getStDetailId(),
            info.getNmDataSource(),
            info.getNmOrganNodeId(),
            info.getStOrganName(),
            info.getStOrganCode(),
            info.getStHallInfo(),
            info.getStShow(),
            info.getStUnit(),
            info.getStUnified(),
            info.getStExt1(),
            info.getStExt2(),
            info.getStReservationId()        	
        };
        if (con == null) {
            SQL.execute(sql, obj);
        } else {
            SQL.execute(con, sql, obj);
        }
    }

    public int update(Map<String, Object> map, Conditions conds) {
        String sql = "update NET_RESERVATION_INFO set ";
        List<Object> list = new ArrayList<Object>();
        int i = 0;
        for (String field : map.keySet()) {
            if (i++ > 0) {
                sql += ", ";
            }
            sql += field + " = ?";
            list.add(map.get(field));
        }
        String subsql = conds != null ? conds.toString() : "";
        if ("".equals(subsql)) {
            if (con == null) {
                return SQL.execute(sql).TOTAL_RECORD_COUNT;
            } else {
                return SQL.execute(con, sql).TOTAL_RECORD_COUNT;
            }
        } else {
            sql += " where " + subsql;
            list.addAll(conds.getObjectList());
            if (con == null) {
                return SQL.execute(sql, list.toArray()).TOTAL_RECORD_COUNT;
            } else {
                return SQL.execute(con, sql, list.toArray()).TOTAL_RECORD_COUNT;
            }
        }
    }
    
    public int delete(Conditions conds) {
        String sql = "delete from NET_RESERVATION_INFO";
        String subsql = conds != null ? conds.toString() : "";
        if ("".equals(subsql)) {
            if (con == null) {
                return SQL.execute(sql).TOTAL_RECORD_COUNT;
            } else {
                return SQL.execute(con, sql).TOTAL_RECORD_COUNT;
            }
        } else {
            sql += " where " + subsql;
            if (con == null) {
                return SQL.execute(sql, conds.getObjectArray()).TOTAL_RECORD_COUNT;
            } else {
                return SQL.execute(con, sql, conds.getObjectArray()).TOTAL_RECORD_COUNT;
            }
        }
    }

	public void delete(String[] stReservationId) {
        Conditions conds = Conditions.newOrConditions();
        for (int i = 0; i < stReservationId.length; i++) {
            Conditions subconds = Conditions.newAndConditions();
            subconds.add(new Condition("ST_RESERVATION_ID", Condition.OT_EQUAL, stReservationId[i]));
            conds.add(subconds);
        }
        delete(conds);
    }

	public void delete(String stReservationId) {
        Conditions conds = Conditions.newAndConditions();
        conds.add(new Condition("ST_RESERVATION_ID", Condition.OT_EQUAL, stReservationId));
        delete(conds);
    }

    public PaginationArrayList<NetReservationInfo> query(Conditions conds, String suffix, int pageSize, int currentPage) {
        RecordSet rs;
        if (con == null) {
            rs = SQL.query("NET_RESERVATION_INFO", "*", conds, suffix, pageSize, currentPage);
        } else {
            rs = SQL.query(con, "NET_RESERVATION_INFO", "*", conds, suffix, pageSize, currentPage);
        }
        PaginationArrayList<NetReservationInfo> pal = new PaginationArrayList<NetReservationInfo>(rs.TOTAL_RECORD_COUNT, rs.COMMON_PAGE_SIZE, rs.CURRENT_PAGE);
        while (rs.next()) {
            NetReservationInfo info = new NetReservationInfo();
            setProperties(info, rs);
            pal.add(info);
        }
        return pal;
    }

    public List<NetReservationInfo> query(Conditions conds, String suffix) {
        RecordSet rs;
        if (con == null) {
            rs = SQL.query("NET_RESERVATION_INFO", "*", conds, suffix);
        } else {
            rs = SQL.query(con, "NET_RESERVATION_INFO", "*", conds, suffix);
        }
        ArrayList<NetReservationInfo> al = new ArrayList<NetReservationInfo>();
        while (rs.next()) {
            NetReservationInfo info = new NetReservationInfo();
            setProperties(info, rs);
            al.add(info);
        }
        return al;
    }
    
    public static void setProperties(NetReservationInfo info, RecordSet rs){
        info.setStReservationId(rs.getOriginalString("ST_RESERVATION_ID"));
        info.setStReservationNo(rs.getOriginalString("ST_RESERVATION_NO"));
        info.setStBusinessNo(rs.getOriginalString("ST_BUSINESS_NO"));
        info.setStItemId(rs.getOriginalString("ST_ITEM_ID"));
        info.setStItemNo(rs.getOriginalString("ST_ITEM_NO"));
        info.setStItemName(rs.getOriginalString("ST_ITEM_NAME"));
        info.setStGroupCode(rs.getOriginalString("ST_GROUP_CODE"));
        info.setDtOperation(rs.getTimestamp("DT_OPERATION"));
        info.setDtReservationStart(rs.getTimestamp("DT_RESERVATION_START"));
        info.setDtReservationEnd(rs.getTimestamp("DT_RESERVATION_END"));
        info.setStUserId(rs.getOriginalString("ST_USER_ID"));
        info.setStUserName(rs.getOriginalString("ST_USER_NAME"));
        info.setStMobile(rs.getOriginalString("ST_MOBILE"));
        info.setNmIdentityType(rs.getBigDecimal("NM_IDENTITY_TYPE"));
        info.setStIdentityNo(rs.getOriginalString("ST_IDENTITY_NO"));
        info.setNmRemoved(rs.getBigDecimal("NM_REMOVED"));
        info.setStDetailId(rs.getOriginalString("ST_DETAIL_ID"));
        info.setNmDataSource(rs.getBigDecimal("NM_DATA_SOURCE"));
        info.setNmOrganNodeId(rs.getBigDecimal("NM_ORGAN_NODE_ID"));
        info.setStOrganName(rs.getOriginalString("ST_ORGAN_NAME"));
        info.setStOrganCode(rs.getOriginalString("ST_ORGAN_CODE"));
        info.setStHallInfo(rs.getOriginalString("ST_HALL_INFO"));
        info.setStShow(rs.getOriginalString("ST_SHOW"));
        info.setStUnit(rs.getOriginalString("ST_UNIT"));
        info.setStUnified(rs.getOriginalString("ST_UNIFIED"));
        info.setStExt1(rs.getOriginalString("ST_EXT1"));
        info.setStExt2(rs.getOriginalString("ST_EXT2"));
    }

	public NetReservationInfo get(String stReservationId) {
        Conditions conds = Conditions.newAndConditions();
        conds.add(new Condition("ST_RESERVATION_ID", Condition.OT_EQUAL, stReservationId));
        List<NetReservationInfo> list = query(conds, null);
        return list.size() > 0 ? list.get(0) : null;
    }
	
	public List<NetReservationInfo> statisticsQuery(Conditions conds, String suffix,String dateGreater,String dateLess) {
        RecordSet rs;
        if(suffix==null||"".equals(suffix)){
    		suffix="";
    	}
        String cs = conds.toString();
        String sql = "";
        String sql1 = "";
        String sql2 = "";
        sql1 = "SELECT "+
					"* "+
				"FROM "+
					"NET_RESERVATION_INFO "+
				"WHERE "+
					"NM_REMOVED <> 2 "+
				"AND "+
					"NM_REMOVED <> 4 ";
        if(!(dateGreater.equals("")&&dateLess.equals(""))){
			sql1 = sql1+"AND DT_RESERVATION_START > '"+dateGreater+"' AND DT_RESERVATION_START < '"+dateLess+"' ";
        }
        sql2 = " "+suffix;
        if("".equals(conds.toString())){
    		sql = sql1+sql2;
            rs = SQL.execute(sql);
    	}else{
    		sql = sql1+" AND "+cs+sql2;
    		rs = SQL.execute(sql,conds.getObjectArray());
    	}
        ArrayList<NetReservationInfo> al = new ArrayList<NetReservationInfo>();
        while (rs.next()) {
            NetReservationInfo info = new NetReservationInfo();
            setProperties(info, rs);
            al.add(info);
        }
        return al;
    }
}
