package com.wondersgroup.infopub.dao;

import java.math.*;
import java.sql.*;
import java.util.*;

import wfc.facility.tool.autocode.*;
import wfc.service.database.*;

import net.sf.json.JSONArray;
import net.sf.json.JSONObject;

import org.springframework.stereotype.Repository;

import com.wondersgroup.infopub.bean.SelmQueryHis;




/**
 * 工作台模块使用历史记录
 * @author generated by wfc.facility.tool.autocode.InternalDaoGenerator
 */
@Repository
public class SelmQueryHisDao {

    private Connection con = null;

    public SelmQueryHisDao() {
    }

    public SelmQueryHisDao(Connection con) {
        this.con = con;
    }

    public void add(SelmQueryHis info) {
        String sql = "insert into SELM_QUERY_HIS(ST_QUERY_HIS_ID, ST_MACHINE_ID, ST_MODULE_NAME, ST_MODULE_OP, ST_NAME, ST_IDENTITY_NO, ST_MOBILE, DT_CREATE, ST_ATTACH_ID1, ST_ATTACH_ID2, ST_ATTACH_ID3, ST_ATTACH_ID4, ST_EXT1, ST_EXT2, ST_EXT3, ST_EXT4, ST_EXT5, ST_ITEM_NAME, ST_BUSINESS_NO, ST_SUBMIT_DATA_ID, ST_DESC, ST_OP_RESULT) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        Object[] obj = {
            info.getStQueryHisId(),
            info.getStMachineId(),
            info.getStModuleName(),
            info.getStModuleOp(),
            info.getStName(),
            info.getStIdentityNo(),
            info.getStMobile(),
            info.getDtCreate(),
            info.getStAttachId1(),
            info.getStAttachId2(),
            info.getStAttachId3(),
            info.getStAttachId4(),
            info.getStExt1(),
            info.getStExt2(),
            info.getStExt3(),
            info.getStExt4(),
            info.getStExt5(),
            info.getStItemName(),
            info.getStBusinessNo(),
            info.getStSubmitDataId(),
            info.getStDesc(),
            info.getStOpResult()        	
        };
        if (con == null) {
            SQL.execute(sql, obj);
        } else {
            SQL.execute(con, sql, obj);
        }
    }

    public void update(SelmQueryHis info) {
        String sql = "update SELM_QUERY_HIS set ST_MACHINE_ID = ?, ST_MODULE_NAME = ?, ST_MODULE_OP = ?, ST_NAME = ?, ST_IDENTITY_NO = ?, ST_MOBILE = ?, DT_CREATE = ?, ST_ATTACH_ID1 = ?, ST_ATTACH_ID2 = ?, ST_ATTACH_ID3 = ?, ST_ATTACH_ID4 = ?, ST_EXT1 = ?, ST_EXT2 = ?, ST_EXT3 = ?, ST_EXT4 = ?, ST_EXT5 = ?, ST_ITEM_NAME = ?, ST_BUSINESS_NO = ?, ST_SUBMIT_DATA_ID = ?, ST_DESC = ?, ST_OP_RESULT = ? where ST_QUERY_HIS_ID = ?";
        Object[] obj = {
            info.getStMachineId(),
            info.getStModuleName(),
            info.getStModuleOp(),
            info.getStName(),
            info.getStIdentityNo(),
            info.getStMobile(),
            info.getDtCreate(),
            info.getStAttachId1(),
            info.getStAttachId2(),
            info.getStAttachId3(),
            info.getStAttachId4(),
            info.getStExt1(),
            info.getStExt2(),
            info.getStExt3(),
            info.getStExt4(),
            info.getStExt5(),
            info.getStItemName(),
            info.getStBusinessNo(),
            info.getStSubmitDataId(),
            info.getStDesc(),
            info.getStOpResult(),
            info.getStQueryHisId()        	
        };
        if (con == null) {
            SQL.execute(sql, obj);
        } else {
            SQL.execute(con, sql, obj);
        }
    }

    public int update(Map<String, Object> map, Conditions conds) {
        String sql = "update SELM_QUERY_HIS set ";
        List<Object> list = new ArrayList<Object>();
        int i = 0;
        for (String field : map.keySet()) {
            if (i++ > 0) {
                sql += ", ";
            }
            sql += field + " = ?";
            list.add(map.get(field));
        }
        String subsql = conds != null ? conds.toString() : "";
        if ("".equals(subsql)) {
            if (con == null) {
                return SQL.execute(sql).TOTAL_RECORD_COUNT;
            } else {
                return SQL.execute(con, sql).TOTAL_RECORD_COUNT;
            }
        } else {
            sql += " where " + subsql;
            list.addAll(conds.getObjectList());
            if (con == null) {
                return SQL.execute(sql, list.toArray()).TOTAL_RECORD_COUNT;
            } else {
                return SQL.execute(con, sql, list.toArray()).TOTAL_RECORD_COUNT;
            }
        }
    }
    
    public int delete(Conditions conds) {
        String sql = "delete from SELM_QUERY_HIS";
        String subsql = conds != null ? conds.toString() : "";
        if ("".equals(subsql)) {
            if (con == null) {
                return SQL.execute(sql).TOTAL_RECORD_COUNT;
            } else {
                return SQL.execute(con, sql).TOTAL_RECORD_COUNT;
            }
        } else {
            sql += " where " + subsql;
            if (con == null) {
                return SQL.execute(sql, conds.getObjectArray()).TOTAL_RECORD_COUNT;
            } else {
                return SQL.execute(con, sql, conds.getObjectArray()).TOTAL_RECORD_COUNT;
            }
        }
    }

	public void delete(String[] stQueryHisId) {
        Conditions conds = Conditions.newOrConditions();
        for (int i = 0; i < stQueryHisId.length; i++) {
            Conditions subconds = Conditions.newAndConditions();
            subconds.add(new Condition("ST_QUERY_HIS_ID", Condition.OT_EQUAL, stQueryHisId[i]));
            conds.add(subconds);
        }
        delete(conds);
    }

	public void delete(String stQueryHisId) {
        Conditions conds = Conditions.newAndConditions();
        conds.add(new Condition("ST_QUERY_HIS_ID", Condition.OT_EQUAL, stQueryHisId));
        delete(conds);
    }

    public PaginationArrayList<SelmQueryHis> query(Conditions conds, String suffix, int pageSize, int currentPage) {
        RecordSet rs;
        if (con == null) {
            rs = SQL.query("SELM_QUERY_HIS", "*", conds, suffix, pageSize, currentPage);
        } else {
            rs = SQL.query(con, "SELM_QUERY_HIS", "*", conds, suffix, pageSize, currentPage);
        }
        PaginationArrayList<SelmQueryHis> pal = new PaginationArrayList<SelmQueryHis>(rs.TOTAL_RECORD_COUNT, rs.COMMON_PAGE_SIZE, rs.CURRENT_PAGE);
        while (rs.next()) {
            SelmQueryHis info = new SelmQueryHis();
            setProperties(info, rs);
            pal.add(info);
        }
        return pal;
    }

    public List<SelmQueryHis> query(Conditions conds, String suffix) {
        RecordSet rs;
        if (con == null) {
            rs = SQL.query("SELM_QUERY_HIS", "*", conds, suffix);
        } else {
            rs = SQL.query(con, "SELM_QUERY_HIS", "*", conds, suffix);
        }
        ArrayList<SelmQueryHis> al = new ArrayList<SelmQueryHis>();
        while (rs.next()) {
            SelmQueryHis info = new SelmQueryHis();
            setProperties(info, rs);
            al.add(info);
        }
        return al;
    }
    
    public static void setProperties(SelmQueryHis info, RecordSet rs){
        info.setStQueryHisId(rs.getOriginalString("ST_QUERY_HIS_ID"));
        info.setStMachineId(rs.getOriginalString("ST_MACHINE_ID"));
        info.setStModuleName(rs.getOriginalString("ST_MODULE_NAME"));
        info.setStModuleOp(rs.getOriginalString("ST_MODULE_OP"));
        info.setStName(rs.getOriginalString("ST_NAME"));
        info.setStIdentityNo(rs.getOriginalString("ST_IDENTITY_NO"));
        info.setStMobile(rs.getOriginalString("ST_MOBILE"));
        info.setDtCreate(rs.getTimestamp("DT_CREATE"));
        info.setStAttachId1(rs.getOriginalString("ST_ATTACH_ID1"));
        info.setStAttachId2(rs.getOriginalString("ST_ATTACH_ID2"));
        info.setStAttachId3(rs.getOriginalString("ST_ATTACH_ID3"));
        info.setStAttachId4(rs.getOriginalString("ST_ATTACH_ID4"));
        info.setStExt1(rs.getOriginalString("ST_EXT1"));
        info.setStExt2(rs.getOriginalString("ST_EXT2"));
        info.setStExt3(rs.getOriginalString("ST_EXT3"));
        info.setStExt4(rs.getOriginalString("ST_EXT4"));
        info.setStExt5(rs.getOriginalString("ST_EXT5"));
        info.setStItemName(rs.getOriginalString("ST_ITEM_NAME"));
        info.setStBusinessNo(rs.getOriginalString("ST_BUSINESS_NO"));
        info.setStSubmitDataId(rs.getOriginalString("ST_SUBMIT_DATA_ID"));
        info.setStDesc(rs.getOriginalString("ST_DESC"));
        String result = rs.getOriginalString("ST_OP_RESULT");
        if (result != null) {
        	if(result.equals("SUCCESS")){
            	info.setStOpResult("成功");
            }else {
            	info.setStOpResult("失败");
    		}
		}else {
			info.setStOpResult(result);
		}
        
    }

	public SelmQueryHis get(String stQueryHisId) {
        Conditions conds = Conditions.newAndConditions();
        conds.add(new Condition("ST_QUERY_HIS_ID", Condition.OT_EQUAL, stQueryHisId));
        List<SelmQueryHis> list = query(conds, null);
        return list.size() > 0 ? list.get(0) : null;
    }

	public List<SelmQueryHis> getSelmQuery() {
		String sql = "SELECT top 10 ST_ITEM_NAME,COUNT(ST_ITEM_NAME) cou from selm_query_his GROUP BY ST_ITEM_NAME order by cou desc";
    	RecordSet rs;
        if (con == null) {
            rs = SQL.execute(sql);
        } else {
            rs = SQL.execute(con, sql);
        }
        ArrayList<SelmQueryHis> al = new ArrayList<SelmQueryHis>();
        while (rs.next()) {
        	SelmQueryHis info = new SelmQueryHis();
            info.setStItemName(rs.getOriginalString("ST_ITEM_NAME"));
            info.setStExt1(rs.getOriginalString("cou"));
            al.add(info);
        }
        return al;
	}
	
	
	public List<SelmQueryHis> selmQuertNum() {
		String sql = "SELECT ST_ITEM_NAME from selm_query_his GROUP BY ST_ITEM_NAME";
    	RecordSet rs;
        if (con == null) {
            rs = SQL.execute(sql);
        } else {
            rs = SQL.execute(con, sql);
        }
        ArrayList<SelmQueryHis> al = new ArrayList<SelmQueryHis>();
        while (rs.next()) {
        	SelmQueryHis info = new SelmQueryHis();
            info.setStItemName(rs.getOriginalString("ST_ITEM_NAME"));
            //info.setStExt1(rs.getOriginalString("cou"));
            al.add(info);
        }
        return al;
	}

	public int getAreaSelmQuery(String stDeviceId) {
		String sql = "SELECT ST_MACHINE_ID,COUNT(ST_MACHINE_ID) cont from selm_query_his WHERE ST_MACHINE_ID =? GROUP BY ST_MACHINE_ID";
		Object[] obj = { stDeviceId };
		RecordSet rs;
        if (con == null) {
            rs = SQL.execute(sql,obj);
        } else {
            rs = SQL.execute(con, sql,obj);
        }
        int cont = 0;
		while (rs.next()) {
			BigDecimal bigDecimal = rs.getBigDecimal("cont");
			cont = bigDecimal.intValue();
		}
		return cont;
	}
	
	public int getAreaSelmQuery(String stDeviceId,String startTime,String endTime) {
		String  sql ="SELECT ST_MACHINE_ID,COUNT(ST_MACHINE_ID) cont from selm_query_his WHERE ST_MACHINE_ID =? AND DT_CREATE >= ? and DT_CREATE <= ? GROUP BY ST_MACHINE_ID";
		 Object[] obj ={ stDeviceId,startTime,endTime};
		RecordSet rs;
        if (con == null) {
            rs = SQL.execute(sql,obj);
        } else {
            rs = SQL.execute(con, sql,obj);
        }
        int cont = 0;
		while (rs.next()) {
			BigDecimal bigDecimal = rs.getBigDecimal("cont");
			cont = bigDecimal.intValue();
		}
		return cont;
	}
	
	public int getSelmQuery(String stDeviceId) {
		String sql = "SELECT ST_MACHINE_ID,COUNT(ST_MACHINE_ID) cont from selm_query_his WHERE ST_MACHINE_ID =? and DateDiff(dd,DT_CREATE,getdate())<=30 GROUP BY ST_MACHINE_ID";
		Object[] obj = { stDeviceId };
		RecordSet rs;
        if (con == null) {
            rs = SQL.execute(sql,obj);
        } else {
            rs = SQL.execute(con, sql,obj);
        }
        int cont = 0;
		while (rs.next()) {
			BigDecimal bigDecimal = rs.getBigDecimal("cont");
			cont = bigDecimal.intValue();
		}
		return cont;
	}

	public List<SelmQueryHis> selmQuertTop(Conditions conds, String suffix,int pageSize, int currentPage) {
		 RecordSet rs;
	        if (con == null) {
	            rs = SQL.query("SELM_QUERY_HIS", "ST_ITEM_NAME,COUNT(ST_ITEM_NAME) cont", conds, suffix, pageSize, currentPage);
	        } else {
	            rs = SQL.query(con, "SELM_QUERY_HIS", "ST_ITEM_NAME,COUNT(ST_ITEM_NAME) cont", conds, suffix, pageSize, currentPage);
	        }
	        PaginationArrayList<SelmQueryHis> pal = new PaginationArrayList<SelmQueryHis>(rs.TOTAL_RECORD_COUNT, rs.COMMON_PAGE_SIZE, rs.CURRENT_PAGE);
	        while (rs.next()) {
	        	SelmQueryHis info = new SelmQueryHis();
	        	BigDecimal bigDecimal = rs.getBigDecimal("cont");
	            setProperties(info, rs);
	            info.setStExt1(bigDecimal.toString());
	            pal.add(info);
	        }
	        return pal;
	}

	public List<SelmQueryHis> selmStreetTop(String stItemName) {
		String sql = "SELECT top 16 COUNT(a.ST_MACHINE_ID) cont, c.st_street FROM selm_query_his a"
					+" JOIN infopub_device_info b ON a.ST_MACHINE_ID = b.ST_DEVICE_MAC"
					+" JOIN infopub_address c ON b.ST_ADDRESS_ID = c.ST_ADDRESS_ID WHERE a.ST_ITEM_NAME=?"
					+" GROUP BY c.st_street ORDER BY cont desc ";
    	RecordSet rs;
    	Object[] obj = { stItemName };
        if (con == null) {
            rs = SQL.execute(sql,obj);
        } else {
            rs = SQL.execute(con, sql,obj);
        }
        ArrayList<SelmQueryHis> al = new ArrayList<SelmQueryHis>();
        while (rs.next()) {
        	SelmQueryHis info = new SelmQueryHis();
            info.setStItemName(rs.getOriginalString("st_street"));
            info.setStDesc(rs.getOriginalString("cont"));
            al.add(info);
        }
        return al;
	}
	
	 public PaginationArrayList<SelmQueryHis> selmStreetTop(Conditions conds, String suffix, int pageSize, int currentPage) {
	        RecordSet rs;
	        if (con == null) {
	            rs = SQL.query("SELM_QUERY_HIS a JOIN infopub_device_info b ON a.ST_MACHINE_ID = b.ST_DEVICE_MAC JOIN infopub_address c ON b.ST_ADDRESS_ID = c.ST_ADDRESS_ID", "COUNT(a.ST_MACHINE_ID) cont, c.st_street", conds, suffix, pageSize, currentPage);
	        } else {
	            rs = SQL.query(con, "SELM_QUERY_HIS a JOIN infopub_device_info b ON a.ST_MACHINE_ID = b.ST_DEVICE_MAC JOIN infopub_address c ON b.ST_ADDRESS_ID = c.ST_ADDRESS_ID", "COUNT(a.ST_MACHINE_ID) cont, c.st_street", conds, suffix, pageSize, currentPage);
	        }
	        PaginationArrayList<SelmQueryHis> pal = new PaginationArrayList<SelmQueryHis>(rs.TOTAL_RECORD_COUNT, rs.COMMON_PAGE_SIZE, rs.CURRENT_PAGE);
	        while (rs.next()) {
	            SelmQueryHis info = new SelmQueryHis();
	            setProperties(info, rs);
	            info.setStItemName(rs.getOriginalString("st_street"));
	            info.setStDesc(rs.getOriginalString("cont"));
	            pal.add(info);
	        }
	        return pal;
	    }

	public List<SelmQueryHis> streetSelmQuerTop(Conditions conds, String suffix,
			int pageSize, int currentPage) {
		 RecordSet rs;
	        String content = "SQH.ST_ITEM_NAME,COUNT(SQH.ST_ITEM_NAME) NUMBER";
	        String table = "INFOPUB_ADDRESS IA" 
	        			  +" JOIN INFOPUB_DEVICE_INFO IDI ON IA.ST_ADDRESS_ID=IDI.ST_ADDRESS_ID"
	        			  +" JOIN SELM_QUERY_HIS SQH ON IDI.ST_DEVICE_MAC=SQH.ST_MACHINE_ID";
	        if (con == null) {
	            rs = SQL.query(table, content, conds, suffix, pageSize, currentPage);
	        } else {
	            rs = SQL.query(con, table, content, conds, suffix, pageSize, currentPage);
	        }
	        PaginationArrayList<SelmQueryHis> pal = new PaginationArrayList<SelmQueryHis>(rs.TOTAL_RECORD_COUNT, rs.COMMON_PAGE_SIZE, rs.CURRENT_PAGE);
	        while (rs.next()) {
	        	SelmQueryHis info = new SelmQueryHis();
	        	 info.setStItemName(rs.getOriginalString("ST_ITEM_NAME"));
	        	 info.setStDesc(rs.getOriginalString("NUMBER"));
	        	 pal.add(info);
	        }
	        return pal;
		
	}

	public List<SelmQueryHis> itemPeopleNumber(String stItemName) {
		String sql ="select case when age>=1 and age <=25 then '25岁及以下' when age>=26 and age <=35 then '26~35岁'"
				+" when age>=36 and age <=45 then '36~45岁'"
				+" when age>=45 and age <=60 then '45~60岁'"  
				+" else '60岁以上'"
				+" end as ageScope,"
				+" count(*) as number"
				+" from (select DateDiff(YEAR,birthday ,getdate()) as age,birthday from"
				+" (select b.ST_IDENTITY_NO, CONVERT(datetime,b.sqhyear) birthday" 
				+" from" 
				+" (SELECT * FROM (select ST_IDENTITY_NO,substring(ST_IDENTITY_NO,7,4) sqhyear from SELM_QUERY_HIS" 
				+" WHERE ST_ITEM_NAME=?"
				+" AND (len(ST_IDENTITY_NO) = 15 or len(ST_IDENTITY_NO)=18)" 
				+" AND ST_IDENTITY_NO is NOT NULL) a WHERE a.sqhyear>'1900') b )t ) a"
				+" group by case" 
				+" when age>=1 and age <=25 then '25岁及以下'" 
				+" when age>=26 and age <=35 then '26~35岁'"
				+" when age>=36 and age <=45 then '36~45岁'"
				+" when age>=45 and age <=60 then '45~60岁'"  
				+" else '60岁以上'  end"
				+" order by ageScope";
	RecordSet rs;
	Object[] obj = { stItemName };
    if (con == null) {
        rs = SQL.execute(sql,obj);
    } else {
        rs = SQL.execute(con, sql,obj);
    }
    ArrayList<SelmQueryHis> al = new ArrayList<SelmQueryHis>();
    while (rs.next()) {
    	SelmQueryHis info = new SelmQueryHis();
        info.setStIdentityNo(rs.getOriginalString("ageScope"));
        info.setStDesc(rs.getOriginalString("number"));
        al.add(info);
    }
    return al;
	}

	public List<SelmQueryHis> itemPercentMonth(String stItemName) {
		String sql="";
		if(DB.getDatabaseName()=="MySQL"){
			sql="SELECT DATE_FORMAT (DT_CREATE, '%Y-%m') months,COUNT(ST_ITEM_NAME) number"
				+" FROM SELM_QUERY_HIS WHERE ST_ITEM_NAME =? GROUP BY months LIMIT 6";	
		}else{
		 sql = "SELECT TOP(6) CONVERT(varchar(7),DT_CREATE ,120) AS months,COUNT (st_query_his_id) AS number"
				+" FROM SELM_QUERY_HIS WHERE ST_ITEM_NAME = ?"
				+" GROUP BY CONVERT(varchar(7),DT_CREATE ,120) ORDER BY CONVERT(varchar(7),DT_CREATE ,120) DESC"; 
		}
		RecordSet rs;
		Object[] obj = { stItemName };
	    if (con == null) {
	        rs = SQL.execute(sql,obj);
	    } else {
	        rs = SQL.execute(con, sql,obj);
	    }
	    ArrayList<SelmQueryHis> al = new ArrayList<SelmQueryHis>();
	    while (rs.next()) {
	    	SelmQueryHis info = new SelmQueryHis();
	        info.setStExt1(rs.getOriginalString("months"));
	        info.setStExt2(rs.getOriginalString("number"));
	        al.add(info);
	    }
	    return al;
	}

	
	public int getSelmQueryCount(String stItemName) {
		String sql = "SELECT COUNT(ST_QUERY_HIS_ID) cont from SELM_QUERY_HIS WHERE ST_ITEM_NAME =? ";
		Object[] obj = { stItemName };
		RecordSet rs;
        if (con == null) {
            rs = SQL.execute(sql,obj);
        } else {
            rs = SQL.execute(con, sql,obj);
        }
        int cont = 0;
		while (rs.next()) {
			BigDecimal bigDecimal = rs.getBigDecimal("cont");
			cont = bigDecimal.intValue();
		}
		return cont;
	}

	public List<SelmQueryHis> queryAreaSelmHisTop(Conditions conds,
			 String suffix, int pageSize, int currentPage) {
		 RecordSet rs;
	        String content = "SQH.ST_ITEM_NAME,COUNT(SQH.ST_ITEM_NAME) C";
	        String table = "INFOPUB_ADDRESS IA" 
	        			 +" JOIN INFOPUB_DEVICE_INFO IDI ON IA.ST_ADDRESS_ID=IDI.ST_ADDRESS_ID"
	        			 +" JOIN SELM_QUERY_HIS SQH ON IDI.ST_DEVICE_MAC=SQH.ST_MACHINE_ID" ;
	        if (con == null) {
	            rs = SQL.query(table, content, conds, suffix, pageSize, currentPage);
	        } else {
	            rs = SQL.query(con, table, content, conds, suffix, pageSize, currentPage);
	        }
	        PaginationArrayList<SelmQueryHis> pal = new PaginationArrayList<SelmQueryHis>(rs.TOTAL_RECORD_COUNT, rs.COMMON_PAGE_SIZE, rs.CURRENT_PAGE);
	        while (rs.next()) {
	        	SelmQueryHis info = new SelmQueryHis();
	        	BigDecimal bigDecimal = rs.getBigDecimal("C");
	            setProperties(info, rs);
	            info.setStExt1(bigDecimal.toString());
	            pal.add(info);
	        }
	        return pal;
	}

	public List<SelmQueryHis> queryTop2() {
		RecordSet rs;
		String sql = "select top 3 sqh.ST_QUERY_HIS_ID,sqh.ST_NAME,sqh.ST_MACHINE_ID " +
				"from SELM_QUERY_HIS sqh order by sqh.DT_CREATE desc";
		List<SelmQueryHis> list = new ArrayList<SelmQueryHis>();
        if (con == null) {
            rs = SQL.execute(sql);
        } else {
            rs = SQL.execute(con, sql);
        }
        while (rs.next()) {
        	SelmQueryHis info = new SelmQueryHis();
        	info.setStQueryHisId(rs.getOriginalString("ST_QUERY_HIS_ID"));
        	info.setStMachineId(rs.getOriginalString("ST_MACHINE_ID"));
        	info.setStName(rs.getOriginalString("ST_NAME"));
        	list.add(info);
        }
		return list;
	}

	public BigDecimal getTodaySelmQueryHis(Conditions conds) {
		RecordSet rs;
        if (con == null) {
            rs = SQL.query("SELM_QUERY_HIS", "count(ST_MACHINE_ID) cou", conds,null);
        } else {
            rs = SQL.query(con, "SELM_QUERY_HIS", "count(ST_MACHINE_ID) cou", conds, null);
        }
        BigDecimal bigDecimal = new BigDecimal(0);
        while (rs.next()) {
        	bigDecimal = rs.getBigDecimal("cou");     	
        }
        return bigDecimal;
		
	}

	public BigDecimal getSelmQueryHisByType(Conditions conds) {
		RecordSet rs;
		String table = "SELM_QUERY_HIS sqs left join INFOPUB_DEVICE_INFO idi on sqs.ST_MACHINE_ID = idi.ST_DEVICE_MAC"+
					" left join INFOPUB_DEVICE_TYPE idt on idi.ST_TYPE_ID = idt.ST_TYPE_ID";
        if (con == null) {
            rs = SQL.query(table, "count(sqs.ST_MACHINE_ID) cou", conds,null);
        } else {
            rs = SQL.query(con, table, "count(sqs.ST_MACHINE_ID) cou", conds, null);
        }
        BigDecimal bigDecimal = new BigDecimal(0);
        while (rs.next()) {
        	bigDecimal = rs.getBigDecimal("cou");     	
        }
        return bigDecimal;
	}

	public JSONArray itemOfMonth(Conditions conds, String suffix) {
		RecordSet rs;
        if (con == null) {
        	if(DB.getDatabaseName().equalsIgnoreCase("mysql")){
        		rs = SQL.query("SELM_QUERY_HIS", "ST_ITEM_NAME,count(ST_ITEM_NAME) cou", conds, suffix);
        	}else{
        		rs = SQL.query("SELM_QUERY_HIS", "top 5 ST_ITEM_NAME,count(ST_ITEM_NAME) cou", conds, suffix);
        	}
        } else {
        	if(DB.getDatabaseName().equalsIgnoreCase("mysql")){
        		rs = SQL.query("SELM_QUERY_HIS", "ST_ITEM_NAME,count(ST_ITEM_NAME) cou", conds, suffix);
        	}else{
        		rs = SQL.query("SELM_QUERY_HIS", "top 5 ST_ITEM_NAME,count(ST_ITEM_NAME) cou", conds, suffix);
        	}
        }
        JSONArray arr = new JSONArray();
        while (rs.next()) {
        	JSONObject obj = new JSONObject();
        	obj.put("itemName", rs.getOriginalString("ST_ITEM_NAME").equals("undefined") ? "住建服务" : rs.getOriginalString("ST_ITEM_NAME"));
        	obj.put("count",rs.getOriginalString("cou"));
        	arr.add(obj);
        }
        return arr;
		
	}

	public JSONArray areaItemOfMonth(Conditions conds, String suffix) {
		RecordSet rs;
		String table = "SELM_QUERY_HIS sqh left join INFOPUB_DEVICE_INFO idi on sqh.ST_MACHINE_ID = idi.ST_DEVICE_MAC"+
					   " left join INFOPUB_AREA ia on idi.ST_AREA_ID = ia.ST_AREA_ID ";
        if (con == null) {
        	if(DB.getDatabaseName().equalsIgnoreCase("mysql")){
        		rs = SQL.query(table, "ia.ST_AREA_NAME,count(ia.ST_AREA_NAME) cou", conds, suffix);
        	}else{
        		rs = SQL.query(table, "ia.ST_AREA_NAME,count(ia.ST_AREA_NAME) cou", conds, suffix);
        	}
            
        } else {
        	if(DB.getDatabaseName().equalsIgnoreCase("mysql")){
        		rs = SQL.query(table, "ia.ST_AREA_NAME,count(ia.ST_AREA_NAME) cou", conds, suffix);
        	}else{
        		rs = SQL.query(table, " ia.ST_AREA_NAME,count(ia.ST_AREA_NAME) cou", conds, suffix);
        	}
        }
        JSONArray arr = new JSONArray();
        while (rs.next()) {
        	JSONObject obj = new JSONObject();
        	obj.put("areaName", rs.getOriginalString("ST_AREA_NAME") != null ? rs.getOriginalString("ST_AREA_NAME") : "");
        	obj.put("count",rs.getOriginalString("cou") != null ? rs.getOriginalString("cou") : "");
        	arr.add(obj);
        }
        return arr;
	}

	public JSONArray socialCount(Conditions conds, String suffix) {
		RecordSet rs;
		String table = "SELM_QUERY_HIS sqh left join INFOPUB_DEVICE_INFO idi on sqh.ST_MACHINE_ID = idi.ST_DEVICE_MAC"+
					   " left join INFOPUB_DEVICE_TYPE idt on idi.ST_TYPE_ID = idt.ST_TYPE_ID";
        if (con == null) {
        	if(DB.getDatabaseName().equalsIgnoreCase("mysql")){
        		 rs = SQL.query(table, "idt.ST_TYPE_NAME,count(idt.ST_TYPE_NAME) cou", conds, suffix);
        	}else{
        		rs = SQL.query(table, "top 5 idt.ST_TYPE_NAME,count(idt.ST_TYPE_NAME) cou", conds, suffix);
        	}
            
        } else {
        	if(DB.getDatabaseName().equalsIgnoreCase("mysql")){
       		 	rs = SQL.query(table, "idt.ST_TYPE_NAME,count(idt.ST_TYPE_NAME) cou", conds, suffix);
	       	}else{
	       		rs = SQL.query(table, "top 5 idt.ST_TYPE_NAME,count(idt.ST_TYPE_NAME) cou", conds, suffix);
	       	}
        }
        JSONArray arr = new JSONArray();
        while (rs.next()) {
        	JSONObject obj = new JSONObject();
        	String name = rs.getOriginalString("ST_TYPE_NAME");
        	String cout = rs.getOriginalString("cou");
        	obj.put("socialName",name);
        	if(name.equals("建设银行智慧柜员机")){
        		int i = Integer.valueOf(cout)+89382;
        		obj.put("count",String.valueOf(i));
        	}else if(name.equals("中国银行智慧柜员机")){
        		int i = Integer.valueOf(cout)+553;
        		obj.put("count",String.valueOf(i));
        	}else{
        		obj.put("count",cout);
        	}
        	arr.add(obj);
        }
        return arr;
	}

	public JSONArray areaItemCount(Conditions conds, String suffix) {
		RecordSet rs;
		String table = "SELM_QUERY_HIS sqh left join INFOPUB_DEVICE_INFO idi on sqh.ST_MACHINE_ID = idi.ST_DEVICE_MAC"+
					   " left join INFOPUB_AREA ia on idi.ST_AREA_ID = ia.ST_AREA_ID ";
		if(DB.getDatabaseName().equalsIgnoreCase("mysql")){
			if (con == null) {
	            rs = SQL.query(table, "ia.ST_AREA_NAME, count(ia.ST_AREA_NAME) icou", conds, suffix);
	        } else {
	            rs = SQL.query(con, table, "ia.ST_AREA_NAME, count(ia.ST_AREA_NAME) icou", conds, suffix);
	        }
		}else{
			if (con == null) {
	            rs = SQL.query(table, "top 5 ia.ST_AREA_NAME, count(ia.ST_AREA_NAME) icou", conds, suffix);
	        } else {
	            rs = SQL.query(con, table, "top 5 ia.ST_AREA_NAME, count(ia.ST_AREA_NAME) icou", conds, suffix);
	        }
		}
        
        JSONArray arr = new JSONArray();
        while (rs.next()) {
        	JSONObject obj = new JSONObject();
        	obj.put("areaName", rs.getOriginalString("ST_AREA_NAME"));
        	obj.put("iCount",rs.getOriginalString("icou"));
        	arr.add(obj);
        }
        return arr;
	}
	
	public JSONArray areaItemCount1(Conditions conds, String suffix) {
		RecordSet rs;
		String table = "SELM_QUERY_HIS sqh left join INFOPUB_DEVICE_INFO idi on sqh.ST_MACHINE_ID = idi.ST_DEVICE_MAC"+
					   " left join INFOPUB_AREA ia on idi.ST_AREA_ID = ia.ST_AREA_ID ";
        if (con == null) {
            rs = SQL.query(table, "ia.ST_AREA_NAME, count(ia.ST_AREA_NAME) icou", conds, suffix);
        } else {
            rs = SQL.query(con, table, "ia.ST_AREA_NAME, count(ia.ST_AREA_NAME) icou", conds, suffix);
        }
        
        JSONArray arr = new JSONArray();
        while (rs.next()) {
        	JSONObject obj = new JSONObject();
        	obj.put("areaName", rs.getOriginalString("ST_AREA_NAME"));
        	obj.put("iCount",rs.getOriginalString("icou"));
        	arr.add(obj);
        }
        return arr;
	}

	public List<SelmQueryHis> realTimeHand(Conditions conds, String suffix) {
		RecordSet rs;
        if (con == null) {
        	if(DB.getDatabaseName().equalsIgnoreCase("mysql")){
        		 rs = SQL.query("SELM_QUERY_HIS", "ST_MACHINE_ID,ST_ITEM_NAME,ST_NAME,DT_CREATE", conds, suffix);
        	}else{
        		rs = SQL.query(con, "SELM_QUERY_HIS", "top 20 ST_MACHINE_ID, ST_ITEM_NAME,ST_NAME,DT_CREATE", conds, suffix);
        	}
        } else {
        	if(DB.getDatabaseName().equalsIgnoreCase("mysql")){
        		 rs = SQL.query("SELM_QUERY_HIS", "ST_ITEM_NAME,ST_NAME,DT_CREATE", conds, suffix);
        	}else{
        		rs = SQL.query(con, "SELM_QUERY_HIS", "top 20 ST_ITEM_NAME,ST_NAME,DT_CREATE", conds, suffix);
        	}
        }
        List<SelmQueryHis> al = new LinkedList<SelmQueryHis>();
        while (rs.next()) {
            SelmQueryHis info = new SelmQueryHis();
            info.setStMachineId(rs.getOriginalString("ST_MACHINE_ID"));
            info.setStItemName(rs.getOriginalString("ST_ITEM_NAME"));
            info.setStName(rs.getOriginalString("ST_NAME"));
            info.setDtCreate(rs.getTimestamp("DT_CREATE"));
            al.add(info);
        }
        return al;
		
	}

}
