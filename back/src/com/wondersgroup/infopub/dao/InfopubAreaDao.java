package com.wondersgroup.infopub.dao;

import java.math.BigDecimal;
import java.sql.Connection;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import org.springframework.stereotype.Repository;

import com.wondersgroup.infopub.bean.InfopubArea;

import wfc.facility.tool.autocode.PaginationArrayList;
import wfc.service.database.Condition;
import wfc.service.database.Conditions;
import wfc.service.database.RecordSet;
import wfc.service.database.SQL;

/**
 * 组织机构表
 * @author generated by wfc.facility.tool.autocode.InternalDaoGenerator
 */
@Repository
public class InfopubAreaDao {

    private Connection con = null;

    public InfopubAreaDao() {
    }

    public InfopubAreaDao(Connection con) {
        this.con = con;
    }

    public void add(InfopubArea info) {
        String sql = "insert into INFOPUB_AREA(ST_AREA_ID, ST_AREA_NAME, ST_AREA_CODE, NM_ORDER, DT_CREATE, DT_UPDATE, ST_PARENT_AREA_ID , ST_DESC) values (?, ?, ?, ?, ?, ?, ?, ?)";
        Object[] obj = {
            info.getStAreaId(),
            info.getStAreaName(),
            info.getStAreaCode(),
            info.getNmOrder(),
            info.getDtCreate(),
            info.getDtUpdate(),
            info.getStParentAreaId(),
            info.getStDesc(),     	
        };
        if (con == null) {
            SQL.execute(sql, obj);
        } else {
            SQL.execute(con, sql, obj);
        }
    }

    public void update(InfopubArea info) {
        String sql = "update INFOPUB_AREA set ST_PARENT_AREA_ID = ?, ST_AREA_CODE = ?, ST_AREA_NAME = ?, NM_ORDER = ?, DT_CREATE = ?, DT_UPDATE = ?, ST_DESC = ? where ST_AREA_ID = ?";
        Object[] obj = {
            info.getStParentAreaId(),
            info.getStAreaCode(),
            info.getStAreaName(),
            info.getNmOrder(),
            info.getDtCreate(),
            info.getDtUpdate(),
            info.getStDesc(),
            info.getStAreaId()       	
        };
        if (con == null) {
            SQL.execute(sql, obj);
        } else {
            SQL.execute(con, sql, obj);
        }
    }

    public int update(Map<String, Object> map, Conditions conds) {
        String sql = "update INFOPUB_AREA set ";
        List<Object> list = new ArrayList<Object>();
        int i = 0;
        for (String field : map.keySet()) {
            if (i++ > 0) {
                sql += ", ";
            }
            sql += field + " = ?";
            list.add(map.get(field));
        }
        String subsql = conds != null ? conds.toString() : "";
        if ("".equals(subsql)) {
            if (con == null) {
                return SQL.execute(sql).TOTAL_RECORD_COUNT;
            } else {
                return SQL.execute(con, sql).TOTAL_RECORD_COUNT;
            }
        } else {
            sql += " where " + subsql;
            list.addAll(conds.getObjectList());
            if (con == null) {
                return SQL.execute(sql, list.toArray()).TOTAL_RECORD_COUNT;
            } else {
                return SQL.execute(con, sql, list.toArray()).TOTAL_RECORD_COUNT;
            }
        }
    }
    
    public int delete(Conditions conds) {
        String sql = "delete from INFOPUB_AREA";
        String subsql = conds != null ? conds.toString() : "";
        if ("".equals(subsql)) {
            if (con == null) {
                return SQL.execute(sql).TOTAL_RECORD_COUNT;
            } else {
                return SQL.execute(con, sql).TOTAL_RECORD_COUNT;
            }
        } else {
            sql += " where " + subsql;
            if (con == null) {
                return SQL.execute(sql, conds.getObjectArray()).TOTAL_RECORD_COUNT;
            } else {
                return SQL.execute(con, sql, conds.getObjectArray()).TOTAL_RECORD_COUNT;
            }
        }
    }

	public void delete(String[] stAreaId) {
        Conditions conds = Conditions.newOrConditions();
        for (int i = 0; i < stAreaId.length; i++) {
            Conditions subconds = Conditions.newAndConditions();
            subconds.add(new Condition("ST_AREA_ID", Condition.OT_EQUAL, stAreaId[i]));
            conds.add(subconds);
        }
        delete(conds);
    }

	public void delete(String stAreaId) {
        Conditions conds = Conditions.newAndConditions();
        conds.add(new Condition("ST_AREA_ID", Condition.OT_EQUAL, stAreaId));
        delete(conds);
    }

    public PaginationArrayList<InfopubArea> query(Conditions conds, String suffix, int pageSize, int currentPage) {
        RecordSet rs;
        if (con == null) {
            rs = SQL.query("INFOPUB_AREA", "*", conds, suffix, pageSize, currentPage);
        } else {
            rs = SQL.query(con, "INFOPUB_AREA", "*", conds, suffix, pageSize, currentPage);
        }
        PaginationArrayList<InfopubArea> pal = new PaginationArrayList<InfopubArea>(rs.TOTAL_RECORD_COUNT, rs.COMMON_PAGE_SIZE, rs.CURRENT_PAGE);
        while (rs.next()) {
        	InfopubArea info = new InfopubArea();
            setProperties(info, rs);
            pal.add(info);
        }
        return pal;
    }

    public List<InfopubArea> query(Conditions conds, String suffix) {
        RecordSet rs;
        if (con == null) {
            rs = SQL.query("INFOPUB_AREA", "*", conds, suffix);
        } else {
            rs = SQL.query(con, "INFOPUB_AREA", "*", conds, suffix);
        }
        ArrayList<InfopubArea> al = new ArrayList<InfopubArea>();
        while (rs.next()) {
        	InfopubArea info = new InfopubArea();
            setProperties(info, rs);
            al.add(info);
        }
        return al;
    }
    
    public static void setProperties(InfopubArea info, RecordSet rs){
        info.setStAreaId(rs.getOriginalString("ST_AREA_ID"));
        info.setStParentAreaId(rs.getOriginalString("ST_PARENT_AREA_ID"));
        info.setStAreaCode(rs.getOriginalString("ST_AREA_CODE"));
        info.setStAreaName(rs.getOriginalString("ST_AREA_NAME"));
        info.setNmOrder(rs.getBigDecimal("NM_ORDER"));
        info.setDtCreate(rs.getTimestamp("DT_CREATE"));
        info.setDtUpdate(rs.getTimestamp("DT_UPDATE"));
        info.setStDesc(rs.getOriginalString("ST_DESC"));
    }

	public InfopubArea get(String stAreaId) {
        Conditions conds = Conditions.newAndConditions();
        conds.add(new Condition("ST_AREA_ID", Condition.OT_EQUAL, stAreaId));
        List<InfopubArea> list = query(conds, null);
        return list.size() > 0 ? list.get(0) : null;
    }

	
	public InfopubArea checkAreaCode(Conditions conds) {
		List<InfopubArea> list = query(conds, null);
		return list.size() > 0 ? list.get(0) : null;
	}

	public InfopubArea getName(String stName) {
        Conditions conds = Conditions.newAndConditions();
        conds.add(new Condition("ST_AREA_NAME", Condition.OT_EQUAL, stName));
        List<InfopubArea> list = query(conds, null);
        return list.size() > 0 ? list.get(0) : null;
    }

	public List<InfopubArea> queryDisNumber(Conditions conds, String suffix) {
		 RecordSet rs;
	        String content = "COUNT(SQH.ST_MACHINE_ID) NUMBER, IA.ST_DISTRICT";
	        String table = "SELM_QUERY_HIS SQH"
	        			 +" JOIN INFOPUB_DEVICE_INFO IDI ON SQH.ST_MACHINE_ID = IDI.ST_DEVICE_MAC"
	        			 +" JOIN INFOPUB_ADDRESS IA ON IDI.ST_ADDRESS_ID = IA.ST_ADDRESS_ID";
	        if (con == null) {
	            rs = SQL.query(table, content, conds, suffix);
	        } else {
	            rs = SQL.query(con, table, content, conds, suffix);
	        }
	        ArrayList<InfopubArea> al = new ArrayList<InfopubArea>();
	        while (rs.next()) {
	        	InfopubArea info = new InfopubArea();
	        	 info.setStAreaName(rs.getOriginalString("ST_DISTRICT"));
	        	 info.setNmOrder(new BigDecimal
	        			 (rs.getOriginalString("NUMBER")));
	        	 al.add(info);
	        }
	        return al;
	}
}
