package com.wondersgroup.infopub.dao;

import java.math.*;
import java.sql.*;
import java.util.*;

import wfc.facility.tool.autocode.*;
import wfc.service.database.*;

import org.springframework.stereotype.Repository;

import com.wondersgroup.infopub.bean.AnalyticsVisitedDetail;



/**
 * 网站统计详细
 * @author generated by wfc.facility.tool.autocode.InternalDaoGenerator
 */
@Repository
public class AnalyticsVisitedDetailDao {

    private Connection con = null;

    public AnalyticsVisitedDetailDao() {
    }

    public AnalyticsVisitedDetailDao(Connection con) {
        this.con = con;
    }

    public void add(AnalyticsVisitedDetail info) {
        String sql = "insert into ANALYTICS_VISITED_DETAIL(ST_DETAIL_ID, ST_APP, ST_IP, ST_DOMAIN, ST_URL, ST_TITLE, ST_SCREEN_W, ST_SCREEN_H, ST_REFERRER, ST_OS, ST_CLIENT, ST_LANGUAGE, ST_UA, ST_COOKIE, ST_NET_FLAG, ST_NET_SUB_FLAG, DT_VISITED, ST_EXT1, ST_EXT2) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        Object[] obj = {
            info.getStDetailId(),
            info.getStApp(),
            info.getStIp(),
            info.getStDomain(),
            info.getStUrl(),
            info.getStTitle(),
            info.getStScreenW(),
            info.getStScreenH(),
            info.getStReferrer(),
            info.getStOs(),
            info.getStClient(),
            info.getStLanguage(),
            info.getStUa(),
            info.getStCookie(),
            info.getStNetFlag(),
            info.getStNetSubFlag(),
            info.getDtVisited(),
            info.getStExt1(),
            info.getStExt2()        	
        };
        if (con == null) {
            SQL.execute(sql, obj);
        } else {
            SQL.execute(con, sql, obj);
        }
    }

    public void update(AnalyticsVisitedDetail info) {
        String sql = "update ANALYTICS_VISITED_DETAIL set ST_APP = ?, ST_IP = ?, ST_DOMAIN = ?, ST_URL = ?, ST_TITLE = ?, ST_SCREEN_W = ?, ST_SCREEN_H = ?, ST_REFERRER = ?, ST_OS = ?, ST_CLIENT = ?, ST_LANGUAGE = ?, ST_UA = ?, ST_COOKIE = ?, ST_NET_FLAG = ?, ST_NET_SUB_FLAG = ?, DT_VISITED = ?, ST_EXT1 = ?, ST_EXT2 = ? where ST_DETAIL_ID = ?";
        Object[] obj = {
            info.getStApp(),
            info.getStIp(),
            info.getStDomain(),
            info.getStUrl(),
            info.getStTitle(),
            info.getStScreenW(),
            info.getStScreenH(),
            info.getStReferrer(),
            info.getStOs(),
            info.getStClient(),
            info.getStLanguage(),
            info.getStUa(),
            info.getStCookie(),
            info.getStNetFlag(),
            info.getStNetSubFlag(),
            info.getDtVisited(),
            info.getStExt1(),
            info.getStExt2(),
            info.getStDetailId()        	
        };
        if (con == null) {
            SQL.execute(sql, obj);
        } else {
            SQL.execute(con, sql, obj);
        }
    }

    public int update(Map<String, Object> map, Conditions conds) {
        String sql = "update ANALYTICS_VISITED_DETAIL set ";
        List<Object> list = new ArrayList<Object>();
        int i = 0;
        for (String field : map.keySet()) {
            if (i++ > 0) {
                sql += ", ";
            }
            sql += field + " = ?";
            list.add(map.get(field));
        }
        String subsql = conds != null ? conds.toString() : "";
        if ("".equals(subsql)) {
            if (con == null) {
                return SQL.execute(sql).TOTAL_RECORD_COUNT;
            } else {
                return SQL.execute(con, sql).TOTAL_RECORD_COUNT;
            }
        } else {
            sql += " where " + subsql;
            list.addAll(conds.getObjectList());
            if (con == null) {
                return SQL.execute(sql, list.toArray()).TOTAL_RECORD_COUNT;
            } else {
                return SQL.execute(con, sql, list.toArray()).TOTAL_RECORD_COUNT;
            }
        }
    }
    
    public int delete(Conditions conds) {
        String sql = "delete from ANALYTICS_VISITED_DETAIL";
        String subsql = conds != null ? conds.toString() : "";
        if ("".equals(subsql)) {
            if (con == null) {
                return SQL.execute(sql).TOTAL_RECORD_COUNT;
            } else {
                return SQL.execute(con, sql).TOTAL_RECORD_COUNT;
            }
        } else {
            sql += " where " + subsql;
            if (con == null) {
                return SQL.execute(sql, conds.getObjectArray()).TOTAL_RECORD_COUNT;
            } else {
                return SQL.execute(con, sql, conds.getObjectArray()).TOTAL_RECORD_COUNT;
            }
        }
    }

	public void delete(String[] stDetailId) {
        Conditions conds = Conditions.newOrConditions();
        for (int i = 0; i < stDetailId.length; i++) {
            Conditions subconds = Conditions.newAndConditions();
            subconds.add(new Condition("ST_DETAIL_ID", Condition.OT_EQUAL, stDetailId[i]));
            conds.add(subconds);
        }
        delete(conds);
    }

	public void delete(String stDetailId) {
        Conditions conds = Conditions.newAndConditions();
        conds.add(new Condition("ST_DETAIL_ID", Condition.OT_EQUAL, stDetailId));
        delete(conds);
    }

    public PaginationArrayList<AnalyticsVisitedDetail> query(Conditions conds, String suffix, int pageSize, int currentPage) {
        RecordSet rs;
        if (con == null) {
            rs = SQL.query("ANALYTICS_VISITED_DETAIL", "*", conds, suffix, pageSize, currentPage);
        } else {
            rs = SQL.query(con, "ANALYTICS_VISITED_DETAIL", "*", conds, suffix, pageSize, currentPage);
        }
        PaginationArrayList<AnalyticsVisitedDetail> pal = new PaginationArrayList<AnalyticsVisitedDetail>(rs.TOTAL_RECORD_COUNT, rs.COMMON_PAGE_SIZE, rs.CURRENT_PAGE);
        while (rs.next()) {
            AnalyticsVisitedDetail info = new AnalyticsVisitedDetail();
            setProperties(info, rs);
            pal.add(info);
        }
        return pal;
    }

    public List<AnalyticsVisitedDetail> query(Conditions conds, String suffix) {
        RecordSet rs;
        if (con == null) {
            rs = SQL.query("ANALYTICS_VISITED_DETAIL", "*", conds, suffix);
        } else {
            rs = SQL.query(con, "ANALYTICS_VISITED_DETAIL", "*", conds, suffix);
        }
        ArrayList<AnalyticsVisitedDetail> al = new ArrayList<AnalyticsVisitedDetail>();
        while (rs.next()) {
            AnalyticsVisitedDetail info = new AnalyticsVisitedDetail();
            setProperties(info, rs);
            al.add(info);
        }
        return al;
    }
    
    public List<AnalyticsVisitedDetail> queryStNetFlag(Conditions conds, String suffix) {
    	RecordSet rs;
    	if (con == null) {
    		rs = SQL.query("ANALYTICS_VISITED_DETAIL", "ST_NET_FLAG", conds, suffix);
    	} else {
    		rs = SQL.query(con, "ANALYTICS_VISITED_DETAIL", "ST_NET_FLAG", conds, suffix);
    	}
    	ArrayList<AnalyticsVisitedDetail> al = new ArrayList<AnalyticsVisitedDetail>();
    	while (rs.next()) {
    		AnalyticsVisitedDetail info = new AnalyticsVisitedDetail();
    		setProperties(info, rs);
    		al.add(info);
    	}
    	return al;
    }
  
    
    public static void setProperties(AnalyticsVisitedDetail info, RecordSet rs){
        info.setStDetailId(rs.getOriginalString("ST_DETAIL_ID"));
        info.setStApp(rs.getOriginalString("ST_APP"));
        info.setStIp(rs.getOriginalString("ST_IP"));
        info.setStDomain(rs.getOriginalString("ST_DOMAIN"));
        info.setStUrl(rs.getOriginalString("ST_URL"));
        info.setStTitle(rs.getOriginalString("ST_TITLE"));
        info.setStScreenW(rs.getOriginalString("ST_SCREEN_W"));
        info.setStScreenH(rs.getOriginalString("ST_SCREEN_H"));
        info.setStReferrer(rs.getOriginalString("ST_REFERRER"));
        info.setStOs(rs.getOriginalString("ST_OS"));
        info.setStClient(rs.getOriginalString("ST_CLIENT"));
        info.setStLanguage(rs.getOriginalString("ST_LANGUAGE"));
        info.setStUa(rs.getOriginalString("ST_UA"));
        info.setStCookie(rs.getOriginalString("ST_COOKIE"));
        info.setStNetFlag(rs.getOriginalString("ST_NET_FLAG"));
        info.setStNetSubFlag(rs.getOriginalString("ST_NET_SUB_FLAG"));
        info.setDtVisited(rs.getOriginalString("DT_VISITED"));
        info.setStExt1(rs.getOriginalString("ST_EXT1"));
        info.setStExt2(rs.getOriginalString("ST_EXT2"));
    }

	public AnalyticsVisitedDetail get(String stDetailId) {
        Conditions conds = Conditions.newAndConditions();
        conds.add(new Condition("ST_DETAIL_ID", Condition.OT_EQUAL, stDetailId));
        List<AnalyticsVisitedDetail> list = query(conds, null);
        return list.size() > 0 ? list.get(0) : null;
    }
	
	public int getAnalyticsCount(String stItemName) {
		String sql = "SELECT COUNT(ST_DETAIL_ID) cont from ANALYTICS_VISITED_DETAIL WHERE ST_NET_FLAG =? ";
		Object[] obj = { stItemName };
		RecordSet rs;
        if (con == null) {
            rs = SQL.execute(sql,obj);
        } else {
            rs = SQL.execute(con, sql,obj);
        }
        int cont = 0;
		while (rs.next()) {
			BigDecimal bigDecimal = rs.getBigDecimal("cont");
			cont = bigDecimal.intValue();
		}
		return cont;
	}
}
