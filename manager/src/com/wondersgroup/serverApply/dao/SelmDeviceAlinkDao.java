package com.wondersgroup.serverApply.dao;

import java.math.*;
import java.sql.*;
import java.util.*;
import wfc.facility.tool.autocode.*;
import wfc.service.database.*;

import org.springframework.stereotype.Repository;

import com.wondersgroup.serverApply.bean.SelmDeviceAlink;

/**
 * 接入申请关联设备
 * @author generated by wfc.facility.tool.autocode.InternalDaoGenerator
 */
@Repository
public class SelmDeviceAlinkDao {

    private Connection con = null;

    public SelmDeviceAlinkDao() {
    }

    public SelmDeviceAlinkDao(Connection con) {
        this.con = con;
    }

    public void add(SelmDeviceAlink info) {
        String sql = "insert into SELM_DEVICE_ALINK(ST_DEVICE_APPLY_ID, ST_MACHINE_ID, ST_DEVICE_NAME, ST_DEVICE_CODE, ST_DEVICE_IP, ST_DEVICE_MAC, ST_DEVICE_ADDRESS, ST_AREA_ID, ST_USER_ID, ST_ADDRESS_ID, ST_ORGAN_ID, ST_CERT_KEY, ST_TYPE_ID, NM_IS_HOST, NM_YBZC, NM_GPY, NM_JZZQZ, NM_JZZZK, ST_NETWORK, NM_DUTY, NM_STATUS, ST_REASON, ST_AUDIT_USER_ID, ST_AUDIT_USER_NAME, DT_AUDIT, DT_CREATE, ST_DESC, ST_EXT1, ST_EXT2, NM_24HOURS, BL_CONTENT) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        Object[] obj = {
            info.getStDeviceApplyId(),
            info.getStMachineId(),
            info.getStDeviceName(),
            info.getStDeviceCode(),
            info.getStDeviceIp(),
            info.getStDeviceMac(),
            info.getStDeviceAddress(),
            info.getStAreaId(),
            info.getStUserId(),
            info.getStAddressId(),
            info.getStOrganId(),
            info.getStCertKey(),
            info.getStTypeId(),
            info.getNmIsHost(),
            info.getNmYbzc(),
            info.getNmGpy(),
            info.getNmJzzqz(),
            info.getNmJzzzk(),
            info.getStNetwork(),
            info.getNmDuty(),
            info.getNmStatus(),
            info.getStReason(),
            info.getStAuditUserId(),
            info.getStAuditUserName(),
            info.getDtAudit(),
            info.getDtCreate(),
            info.getStDesc(),
            info.getStExt1(),
            info.getStExt2(),
            info.getNm24Hours(),
            info.getBlContent()
        };
        if (con == null) {
            SQL.execute(sql, obj);
        } else {
            SQL.execute(con, sql, obj);
        }
    }

    public void update(SelmDeviceAlink info) {
        String sql = "update SELM_DEVICE_ALINK set ST_DEVICE_NAME = ?, ST_DEVICE_CODE = ?, ST_DEVICE_IP = ?, ST_DEVICE_MAC = ?, ST_DEVICE_ADDRESS = ?, ST_AREA_ID = ?, ST_USER_ID = ?, ST_ADDRESS_ID = ?, ST_ORGAN_ID = ?, ST_CERT_KEY = ?, ST_TYPE_ID = ?, NM_IS_HOST = ?, NM_YBZC = ?, NM_GPY = ?, NM_JZZQZ = ?, NM_JZZZK = ?, ST_NETWORK = ?, NM_DUTY = ?, NM_STATUS = ?, ST_REASON = ?, ST_AUDIT_USER_ID = ?, ST_AUDIT_USER_NAME = ?, DT_AUDIT = ?, DT_CREATE = ?, ST_DESC = ?, ST_EXT1 = ?, ST_EXT2 = ?, NM_24HOURS = ?, BL_CONTENT = ? where ST_DEVICE_APPLY_ID = ? and ST_MACHINE_ID = ?";
        Object[] obj = {
            info.getStDeviceName(),
            info.getStDeviceCode(),
            info.getStDeviceIp(),
            info.getStDeviceMac(),
            info.getStDeviceAddress(),
            info.getStAreaId(),
            info.getStUserId(),
            info.getStAddressId(),
            info.getStOrganId(),
            info.getStCertKey(),
            info.getStTypeId(),
            info.getNmIsHost(),
            info.getNmYbzc(),
            info.getNmGpy(),
            info.getNmJzzqz(),
            info.getNmJzzzk(),
            info.getStNetwork(),
            info.getNmDuty(),
            info.getNmStatus(),
            info.getStReason(),
            info.getStAuditUserId(),
            info.getStAuditUserName(),
            info.getDtAudit(),
            info.getDtCreate(),
            info.getStDesc(),
            info.getStExt1(),
            info.getStExt2(),
            info.getNm24Hours(),
            info.getBlContent(),
            info.getStDeviceApplyId(),
            info.getStMachineId(),
            
        };
        if (con == null) {
            SQL.execute(sql, obj);
        } else {
            SQL.execute(con, sql, obj);
        }
    }

    public int update(Map<String, Object> map, Conditions conds) {
        String sql = "update SELM_DEVICE_ALINK set ";
        List<Object> list = new ArrayList<Object>();
        int i = 0;
        for (String field : map.keySet()) {
            if (i++ > 0) {
                sql += ", ";
            }
            sql += field + " = ?";
            list.add(map.get(field));
        }
        String subsql = conds != null ? conds.toString() : "";
        if ("".equals(subsql)) {
            if (con == null) {
                return SQL.execute(sql).TOTAL_RECORD_COUNT;
            } else {
                return SQL.execute(con, sql).TOTAL_RECORD_COUNT;
            }
        } else {
            sql += " where " + subsql;
            list.addAll(conds.getObjectList());
            if (con == null) {
                return SQL.execute(sql, list.toArray()).TOTAL_RECORD_COUNT;
            } else {
                return SQL.execute(con, sql, list.toArray()).TOTAL_RECORD_COUNT;
            }
        }
    }
    
    public int delete(Conditions conds) {
        String sql = "delete from SELM_DEVICE_ALINK";
        String subsql = conds != null ? conds.toString() : "";
        if ("".equals(subsql)) {
            if (con == null) {
                return SQL.execute(sql).TOTAL_RECORD_COUNT;
            } else {
                return SQL.execute(con, sql).TOTAL_RECORD_COUNT;
            }
        } else {
            sql += " where " + subsql;
            if (con == null) {
                return SQL.execute(sql, conds.getObjectArray()).TOTAL_RECORD_COUNT;
            } else {
                return SQL.execute(con, sql, conds.getObjectArray()).TOTAL_RECORD_COUNT;
            }
        }
    }

	public void delete(String[] stDeviceApplyId, String[] stMachineId) {
        Conditions conds = Conditions.newOrConditions();
        for (int i = 0; i < stDeviceApplyId.length; i++) {
            Conditions subconds = Conditions.newAndConditions();
            subconds.add(new Condition("ST_DEVICE_APPLY_ID", Condition.OT_EQUAL, stDeviceApplyId[i]));
            subconds.add(new Condition("ST_MACHINE_ID", Condition.OT_EQUAL, stMachineId[i]));
            conds.add(subconds);
        }
        delete(conds);
    }

	public void delete(String stDeviceApplyId, String stMachineId) {
        Conditions conds = Conditions.newAndConditions();
        conds.add(new Condition("ST_DEVICE_APPLY_ID", Condition.OT_EQUAL, stDeviceApplyId));
        conds.add(new Condition("ST_MACHINE_ID", Condition.OT_EQUAL, stMachineId));
        delete(conds);
    }

    public PaginationArrayList<SelmDeviceAlink> query(Conditions conds, String suffix, int pageSize, int currentPage) {
        RecordSet rs;
        if (con == null) {
            rs = SQL.query("SELM_DEVICE_ALINK", "*", conds, suffix, pageSize, currentPage);
        } else {
            rs = SQL.query(con, "SELM_DEVICE_ALINK", "*", conds, suffix, pageSize, currentPage);
        }
        PaginationArrayList<SelmDeviceAlink> pal = new PaginationArrayList<SelmDeviceAlink>(rs.TOTAL_RECORD_COUNT, rs.COMMON_PAGE_SIZE, rs.CURRENT_PAGE);
        while (rs.next()) {
            SelmDeviceAlink info = new SelmDeviceAlink();
            setProperties(info, rs);
            pal.add(info);
        }
        return pal;
    }
    
    public PaginationArrayList<SelmDeviceAlink> queryDeviceInfo(Conditions conds, String suffix, int pageSize, int currentPage) {
        RecordSet rs;
        String content = "ST_DEVICE_APPLY_ID, ST_MACHINE_ID, ST_DEVICE_NAME, ST_DEVICE_CODE, ST_DEVICE_IP, " +
        		"ST_DEVICE_MAC, ST_DEVICE_ADDRESS, ST_AREA_ID, ST_USER_ID, ST_ADDRESS_ID, ST_ORGAN_ID, ST_CERT_KEY, " +
        		"ST_TYPE_ID, NM_IS_HOST, NM_YBZC, NM_GPY, NM_JZZQZ, NM_JZZZK, ST_NETWORK, NM_DUTY, NM_STATUS, " +
        		"ST_REASON, ST_AUDIT_USER_ID, ST_AUDIT_USER_NAME, DT_AUDIT, DT_CREATE, ST_DESC, ST_EXT1, " +
        		"ST_EXT2, NM_24HOURS";		
        if (con == null) {
            rs = SQL.query("SELM_DEVICE_ALINK", content, conds, suffix, pageSize, currentPage);
        } else {
            rs = SQL.query(con, "SELM_DEVICE_ALINK", content, conds, suffix, pageSize, currentPage);
        }
        PaginationArrayList<SelmDeviceAlink> pal = new PaginationArrayList<SelmDeviceAlink>(rs.TOTAL_RECORD_COUNT, rs.COMMON_PAGE_SIZE, rs.CURRENT_PAGE);
        while (rs.next()) {
            SelmDeviceAlink info = new SelmDeviceAlink();
            setProperties(info, rs);
            pal.add(info);
        }
        return pal;
    }

    public List<SelmDeviceAlink> query(Conditions conds, String suffix) {
        RecordSet rs;
        if (con == null) {
            rs = SQL.query("SELM_DEVICE_ALINK", "*", conds, suffix);
        } else {
            rs = SQL.query(con, "SELM_DEVICE_ALINK", "*", conds, suffix);
        }
        ArrayList<SelmDeviceAlink> al = new ArrayList<SelmDeviceAlink>();
        while (rs.next()) {
            SelmDeviceAlink info = new SelmDeviceAlink();
            setProperties(info, rs);
            al.add(info);
        }
        return al;
    }
    
    public static void setProperties(SelmDeviceAlink info, RecordSet rs){
    	String applyId = rs.getOriginalString("ST_DEVICE_APPLY_ID");
    	String machineId = rs.getOriginalString("ST_MACHINE_ID");
        info.setStDeviceApplyId(applyId);
        info.setStMachineId(machineId);
        info.setStDeviceName(rs.getOriginalString("ST_DEVICE_NAME"));
        info.setStDeviceCode(rs.getOriginalString("ST_DEVICE_CODE"));
        info.setStDeviceIp(rs.getOriginalString("ST_DEVICE_IP"));
        info.setStDeviceMac(rs.getOriginalString("ST_DEVICE_MAC"));
        info.setStDeviceAddress(rs.getOriginalString("ST_DEVICE_ADDRESS"));
        info.setStAreaId(rs.getOriginalString("ST_AREA_ID"));
        info.setStUserId(rs.getOriginalString("ST_USER_ID"));
        info.setStAddressId(rs.getOriginalString("ST_ADDRESS_ID"));
        info.setStOrganId(rs.getOriginalString("ST_ORGAN_ID"));
        info.setStCertKey(rs.getOriginalString("ST_CERT_KEY"));
        info.setStTypeId(rs.getOriginalString("ST_TYPE_ID"));
        info.setNmIsHost(rs.getBigDecimal("NM_IS_HOST"));
        info.setNmYbzc(rs.getBigDecimal("NM_YBZC"));
        info.setNmGpy(rs.getBigDecimal("NM_GPY"));
        info.setNmJzzqz(rs.getBigDecimal("NM_JZZQZ"));
        info.setNmJzzzk(rs.getBigDecimal("NM_JZZZK"));
        info.setStNetwork(rs.getOriginalString("ST_NETWORK"));
        info.setNmDuty(rs.getBigDecimal("NM_DUTY"));
        info.setNmStatus(rs.getBigDecimal("NM_STATUS"));
        info.setStReason(rs.getOriginalString("ST_REASON"));
        info.setStAuditUserId(rs.getOriginalString("ST_AUDIT_USER_ID"));
        info.setStAuditUserName(rs.getOriginalString("ST_AUDIT_USER_NAME"));
        info.setDtAudit(rs.getTimestamp("DT_AUDIT"));
        info.setDtCreate(rs.getTimestamp("DT_CREATE"));
        info.setStDesc(rs.getOriginalString("ST_DESC"));
        info.setStExt1(rs.getOriginalString("ST_EXT1"));
        info.setStExt2(rs.getOriginalString("ST_EXT2"));
        info.setNm24Hours(rs.getBigDecimal("NM_24HOURS"));
        byte[] btye = getBlobByAMId(applyId,machineId);
        info.setBlContent(btye);
    }

	public SelmDeviceAlink get(String stDeviceApplyId, String stMachineId) {
        Conditions conds = Conditions.newAndConditions();
        conds.add(new Condition("ST_DEVICE_APPLY_ID", Condition.OT_EQUAL, stDeviceApplyId));
        conds.add(new Condition("ST_MACHINE_ID", Condition.OT_EQUAL, stMachineId));
        List<SelmDeviceAlink> list = query(conds, null);
        return list.size() > 0 ? list.get(0) : null;
    }
	
	public SelmDeviceAlink getAlinkByMAId(String stApplyId,String stMachineId) {
        Conditions conds = Conditions.newAndConditions();
        conds.add(new Condition("ST_DEVICE_APPLY_ID", Condition.OT_EQUAL, stApplyId));
        conds.add(new Condition("ST_MACHINE_ID", Condition.OT_EQUAL, stMachineId));
        List<SelmDeviceAlink> list = query(conds, null);
        return list.size() > 0 ? list.get(0) : null;
    }
	
	public SelmDeviceAlink getAlinkByMachineId(String stMachineId) {
        Conditions conds = Conditions.newAndConditions();
        conds.add(new Condition("ST_MACHINE_ID", Condition.OT_EQUAL, stMachineId));
        List<SelmDeviceAlink> list = query(conds, null);
        return list.size() > 0 ? list.get(0) : null;
    }

	public List<SelmDeviceAlink> getAlinkListByMachineId(String stMachineId) {
		 Conditions conds = Conditions.newAndConditions();
	     conds.add(new Condition("ST_MACHINE_ID", Condition.OT_EQUAL, stMachineId));
	     return query(conds, null);
	}
	
	public static byte[] getBlobByAMId(String stApplyId,String stMachineId) {
		Conditions conds = Conditions.newAndConditions();
		conds.add(new Condition("ST_DEVICE_APPLY_ID", Condition.OT_EQUAL, stApplyId));
		conds.add(new Condition("ST_MACHINE_ID", Condition.OT_EQUAL, stMachineId));
		byte[] blContent = BlobHelper.getBlob("SELM_DEVICE_ALINK", "BL_CONTENT",conds.toString(), conds.getObjectArray());
		return blContent;
	}

}
