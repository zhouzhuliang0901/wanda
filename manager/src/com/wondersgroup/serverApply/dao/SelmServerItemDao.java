package com.wondersgroup.serverApply.dao;

import java.math.*;
import java.sql.*;
import java.util.*;

import wfc.facility.tool.autocode.*;
import wfc.service.database.*;

import org.springframework.stereotype.Repository;

import com.wondersgroup.app.bean.SelmDeviceItem;
import com.wondersgroup.serverApply.bean.SelmServerItem;
import com.wondersgroup.sms.organ.bean.SmsOrgan;

/**
 * 服务关联事项
 * @author generated by wfc.facility.tool.autocode.InternalDaoGenerator
 */
@Repository
public class SelmServerItemDao {

    private Connection con = null;

    public SelmServerItemDao() {
    }

    public SelmServerItemDao(Connection con) {
        this.con = con;
    }

    public void add(SelmServerItem info) {
        String sql = "insert into SELM_SERVER_ITEM(ST_LINKS_ID, ST_APPLY_ID, ST_DEVICE_ID, ST_ITEM_TYPE_ID, ST_ITEM_ID, ST_ITEM_NO, ST_ITEM_NAME, ST_ORGAN_ID, NM_PASS, NM_STATUS, ST_REASON, NM_TYPE, ST_AUDIT_USER_ID, ST_AUDIT_USER_NAME, DT_AUDIT) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        Object[] obj = {
            info.getStLinksId(),
            info.getStApplyId(),
            info.getStDeviceId(),
            info.getStItemTypeId(),
            info.getStItemId(),
            info.getStItemNo(),
            info.getStItemName(),
            info.getStOrganId(),
            info.getNmPass(),
            info.getNmStatus(),
            info.getStReason(),
            info.getNmType(),
            info.getStAuditUserId(),
            info.getStAuditUserName(),
            info.getDtAudit()        	
        };
        if (con == null) {
            SQL.execute(sql, obj);
        } else {
            SQL.execute(con, sql, obj);
        }
    }

    public void update(SelmServerItem info) {
        String sql = "update SELM_SERVER_ITEM set ST_APPLY_ID = ?, ST_DEVICE_ID = ?, ST_ITEM_TYPE_ID = ?, ST_ITEM_ID = ?, ST_ITEM_NO = ?, ST_ITEM_NAME = ?, ST_ORGAN_ID = ?, NM_PASS = ?, NM_STATUS = ?, ST_REASON = ?, NM_TYPE = ?, ST_AUDIT_USER_ID = ?, ST_AUDIT_USER_NAME = ?, DT_AUDIT = ? where ST_LINKS_ID = ?";
        Object[] obj = {
            info.getStApplyId(),
            info.getStDeviceId(),
            info.getStItemTypeId(),
            info.getStItemId(),
            info.getStItemNo(),
            info.getStItemName(),
            info.getStOrganId(),
            info.getNmPass(),
            info.getNmStatus(),
            info.getStReason(),
            info.getNmType(),
            info.getStAuditUserId(),
            info.getStAuditUserName(),
            info.getDtAudit(),
            info.getStLinksId()        	
        };
        if (con == null) {
            SQL.execute(sql, obj);
        } else {
            SQL.execute(con, sql, obj);
        }
    }

    public int update(Map<String, Object> map, Conditions conds) {
        String sql = "update SELM_SERVER_ITEM set ";
        List<Object> list = new ArrayList<Object>();
        int i = 0;
        for (String field : map.keySet()) {
            if (i++ > 0) {
                sql += ", ";
            }
            sql += field + " = ?";
            list.add(map.get(field));
        }
        String subsql = conds != null ? conds.toString() : "";
        if ("".equals(subsql)) {
            if (con == null) {
                return SQL.execute(sql).TOTAL_RECORD_COUNT;
            } else {
                return SQL.execute(con, sql).TOTAL_RECORD_COUNT;
            }
        } else {
            sql += " where " + subsql;
            list.addAll(conds.getObjectList());
            if (con == null) {
                return SQL.execute(sql, list.toArray()).TOTAL_RECORD_COUNT;
            } else {
                return SQL.execute(con, sql, list.toArray()).TOTAL_RECORD_COUNT;
            }
        }
    }
    
    public int delete(Conditions conds) {
        String sql = "delete from SELM_SERVER_ITEM";
        String subsql = conds != null ? conds.toString() : "";
        if ("".equals(subsql)) {
            if (con == null) {
                return SQL.execute(sql).TOTAL_RECORD_COUNT;
            } else {
                return SQL.execute(con, sql).TOTAL_RECORD_COUNT;
            }
        } else {
            sql += " where " + subsql;
            if (con == null) {
                return SQL.execute(sql, conds.getObjectArray()).TOTAL_RECORD_COUNT;
            } else {
                return SQL.execute(con, sql, conds.getObjectArray()).TOTAL_RECORD_COUNT;
            }
        }
    }

	public void delete(String[] stLinksId) {
        Conditions conds = Conditions.newOrConditions();
        for (int i = 0; i < stLinksId.length; i++) {
            Conditions subconds = Conditions.newAndConditions();
            subconds.add(new Condition("ST_LINKS_ID", Condition.OT_EQUAL, stLinksId[i]));
            conds.add(subconds);
        }
        delete(conds);
    }

	public void delete(String stLinksId) {
        Conditions conds = Conditions.newAndConditions();
        conds.add(new Condition("ST_LINKS_ID", Condition.OT_EQUAL, stLinksId));
        delete(conds);
    }
	
	public void delete(String stItemId, String stDeviceId, String stApplyId) {
        Conditions conds = Conditions.newAndConditions();
        conds.add(new Condition("ST_APPLY_ID", Condition.OT_EQUAL, stApplyId));
        conds.add(new Condition("ST_DEVICE_ID", Condition.OT_EQUAL, stDeviceId));
        conds.add(new Condition("ST_ITEM_ID", Condition.OT_EQUAL, stItemId));
        delete(conds);
    }
	
	public void delete(String stDeviceId, String stApplyId) {
        Conditions conds = Conditions.newAndConditions();
        conds.add(new Condition("ST_APPLY_ID", Condition.OT_EQUAL, stApplyId));
        conds.add(new Condition("ST_DEVICE_ID", Condition.OT_EQUAL, stDeviceId));
        delete(conds);
    }

    public PaginationArrayList<SelmServerItem> query(Conditions conds, String suffix, int pageSize, int currentPage) {
        RecordSet rs;
        if (con == null) {
            rs = SQL.query("SELM_SERVER_ITEM", "*", conds, suffix, pageSize, currentPage);
        } else {
            rs = SQL.query(con, "SELM_SERVER_ITEM", "*", conds, suffix, pageSize, currentPage);
        }
        PaginationArrayList<SelmServerItem> pal = new PaginationArrayList<SelmServerItem>(rs.TOTAL_RECORD_COUNT, rs.COMMON_PAGE_SIZE, rs.CURRENT_PAGE);
        while (rs.next()) {
            SelmServerItem info = new SelmServerItem();
            setProperties(info, rs);
            pal.add(info);
        }
        return pal;
    }

    public List<SelmServerItem> query(Conditions conds, String suffix) {
        RecordSet rs;
        if (con == null) {
            rs = SQL.query("SELM_SERVER_ITEM", "*", conds, suffix);
        } else {
            rs = SQL.query(con, "SELM_SERVER_ITEM", "*", conds, suffix);
        }
        ArrayList<SelmServerItem> al = new ArrayList<SelmServerItem>();
        while (rs.next()) {
            SelmServerItem info = new SelmServerItem();
            setProperties(info, rs);
            al.add(info);
        }
        return al;
    }
    
    public static void setProperties(SelmServerItem info, RecordSet rs){
        info.setStLinksId(rs.getOriginalString("ST_LINKS_ID"));
        info.setStApplyId(rs.getOriginalString("ST_APPLY_ID"));
        info.setStDeviceId(rs.getOriginalString("ST_DEVICE_ID"));
        info.setStItemTypeId(rs.getOriginalString("ST_ITEM_TYPE_ID"));
        info.setStItemId(rs.getOriginalString("ST_ITEM_ID"));
        info.setStItemNo(rs.getOriginalString("ST_ITEM_NO"));
        info.setStItemName(rs.getOriginalString("ST_ITEM_NAME"));
        info.setStOrganId(rs.getOriginalString("ST_ORGAN_ID"));
        info.setNmPass(rs.getBigDecimal("NM_PASS"));
        info.setNmStatus(rs.getBigDecimal("NM_STATUS"));
        info.setStReason(rs.getOriginalString("ST_REASON"));
        info.setNmType(rs.getBigDecimal("NM_TYPE"));
        info.setStAuditUserId(rs.getOriginalString("ST_AUDIT_USER_ID"));
        info.setStAuditUserName(rs.getOriginalString("ST_AUDIT_USER_NAME"));
        info.setDtAudit(rs.getTimestamp("DT_AUDIT"));
    }

	public SelmServerItem get(String stApplyId) {
        Conditions conds = Conditions.newAndConditions();
        conds.add(new Condition("ST_APPLY_ID", Condition.OT_EQUAL, stApplyId));
        List<SelmServerItem> list = query(conds, null);
        return list.size() > 0 ? list.get(0) : null;
    }
	
	public SelmServerItem getLinksId(String stLinksId) {
        Conditions conds = Conditions.newAndConditions();
        conds.add(new Condition("ST_LINKS_ID", Condition.OT_EQUAL, stLinksId));
        List<SelmServerItem> list = query(conds, null);
        return list.size() > 0 ? list.get(0) : null;
    }

	public SelmServerItem get(String stItemId, String stApplyId) {
		 Conditions conds = Conditions.newAndConditions();
	        conds.add(new Condition("ST_ITEM_ID", Condition.OT_EQUAL, stItemId));
	        conds.add(new Condition("ST_APPLY_ID", Condition.OT_EQUAL, stApplyId));
	        List<SelmServerItem> list = query(conds, null);
	        return list.size() > 0 ? list.get(0) : null;
	}
	public SelmServerItem get(String stItemId, String stApplyId, String stDeviceId) {
		 Conditions conds = Conditions.newAndConditions();
	        conds.add(new Condition("ST_ITEM_ID", Condition.OT_EQUAL, stItemId));
	        conds.add(new Condition("ST_APPLY_ID", Condition.OT_EQUAL, stApplyId));
	        conds.add(new Condition("ST_DEVICE_ID", Condition.OT_EQUAL, stDeviceId));
	        List<SelmServerItem> list = query(conds, null);
	        return list.size() > 0 ? list.get(0) : null;
	}

	public List<String> getItemByDevice(String deviceId, BigDecimal status) {
		String sql = "SELECT ST_ITEM_ID from SELM_SERVER_ITEM WHERE ST_DEVICE_ID=? AND NM_STATUS=?";
		Object[] obj = { deviceId,status };
		RecordSet rs;
		if (con == null) {
			rs = SQL.execute(sql, obj);
		} else {
			rs = SQL.execute(con, sql, obj);
		}
        ArrayList<String> al = new ArrayList<String>();
        while (rs.next()) {
            al.add(rs.getOriginalString("ST_ITEM_ID"));
        }
        return al;
	}
	

}
