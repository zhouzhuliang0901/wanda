package com.wondersgroup.serverApply.dao;

import java.math.*;
import java.sql.*;
import java.util.*;
import wfc.facility.tool.autocode.*;
import wfc.service.database.*;
import org.springframework.stereotype.Repository;

import com.wondersgroup.serverApply.bean.SelmServerApply;

/**
 * 服务开通申请
 * @author generated by wfc.facility.tool.autocode.InternalDaoGenerator
 */
@Repository
public class SelmServerApplyDao {

    private Connection con = null;

    public SelmServerApplyDao() {
    }

    public SelmServerApplyDao(Connection con) {
        this.con = con;
    }

    public void add(SelmServerApply info) {
        String sql = "insert into SELM_SERVER_APPLY(ST_APPLY_ID, ST_APPLY_ORGAN_ID, ST_APPLY_ORGAN_NAME, NM_STATUS, ST_SERVER_USER_NAME, ST_SERVER_USER_PHONE, ST_SERVER_USER_MOBILE, ST_SERVER_USER_EMAIL, ST_SERVER_CONTENT, DT_UP_CREATE, DT_CREATE, ST_SERVER_DESTRICT, ST_POINT_NAME, ST_PUT_ADDRESS, ST_BUILD_COMPANY, ST_PUT_NUMBER, NM_NETWORK, ST_WATCH_OVER, ST_ATTACH_ID, ST_RESULT, NM_UPDATE, ST_EXT1, ST_EXT2) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        Object[] obj = {
            info.getStApplyId(),
            info.getStApplyOrganId(),
            info.getStApplyOrganName(),
            info.getNmStatus(),
            info.getStServerUserName(),
            info.getStServerUserPhone(),
            info.getStServerUserMobile(),
            info.getStServerUserEmail(),
            info.getStServerContent(),
            info.getDtUpCreate(),
            info.getDtCreate(),
            info.getStServerDestrict(),
            info.getStPointName(),
            info.getStPutAddress(),
            info.getStBuildCompany(),
            info.getStPutNumber(),
            info.getNmNetwork(),
            info.getStWatchOver(),
            info.getStAttachId(),
            info.getStResult(),
            info.getNmUpdate(),
            info.getStExt1(),
            info.getStExt2()        	
        };
        if (con == null) {
            SQL.execute(sql, obj);
        } else {
            SQL.execute(con, sql, obj);
        }
    }

    public void update(SelmServerApply info) {
        String sql = "update SELM_SERVER_APPLY set ST_APPLY_ORGAN_ID = ?, ST_APPLY_ORGAN_NAME = ?, NM_STATUS = ?, ST_SERVER_USER_NAME = ?, ST_SERVER_USER_PHONE = ?, ST_SERVER_USER_MOBILE = ?, ST_SERVER_USER_EMAIL = ?, ST_SERVER_CONTENT = ?, DT_UP_CREATE = ?, DT_CREATE = ?, ST_SERVER_DESTRICT = ?, ST_POINT_NAME = ?, ST_PUT_ADDRESS = ?, ST_BUILD_COMPANY = ?, ST_PUT_NUMBER = ?, NM_NETWORK = ?, ST_WATCH_OVER = ?, ST_ATTACH_ID = ?, ST_RESULT = ?, NM_UPDATE = ?, ST_EXT1 = ?, ST_EXT2 = ? where ST_APPLY_ID = ?";
        Object[] obj = {
            info.getStApplyOrganId(),
            info.getStApplyOrganName(),
            info.getNmStatus(),
            info.getStServerUserName(),
            info.getStServerUserPhone(),
            info.getStServerUserMobile(),
            info.getStServerUserEmail(),
            info.getStServerContent(),
            info.getDtUpCreate(),
            info.getDtCreate(),
            info.getStServerDestrict(),
            info.getStPointName(),
            info.getStPutAddress(),
            info.getStBuildCompany(),
            info.getStPutNumber(),
            info.getNmNetwork(),
            info.getStWatchOver(),
            info.getStAttachId(),
            info.getStResult(),
            info.getNmUpdate(),
            info.getStExt1(),
            info.getStExt2(),
            info.getStApplyId()        	
        };
        if (con == null) {
            SQL.execute(sql, obj);
        } else {
            SQL.execute(con, sql, obj);
        }
    }

    public int update(Map<String, Object> map, Conditions conds) {
        String sql = "update SELM_SERVER_APPLY set ";
        List<Object> list = new ArrayList<Object>();
        int i = 0;
        for (String field : map.keySet()) {
            if (i++ > 0) {
                sql += ", ";
            }
            sql += field + " = ?";
            list.add(map.get(field));
        }
        String subsql = conds != null ? conds.toString() : "";
        if ("".equals(subsql)) {
            if (con == null) {
                return SQL.execute(sql).TOTAL_RECORD_COUNT;
            } else {
                return SQL.execute(con, sql).TOTAL_RECORD_COUNT;
            }
        } else {
            sql += " where " + subsql;
            list.addAll(conds.getObjectList());
            if (con == null) {
                return SQL.execute(sql, list.toArray()).TOTAL_RECORD_COUNT;
            } else {
                return SQL.execute(con, sql, list.toArray()).TOTAL_RECORD_COUNT;
            }
        }
    }
    
    public int delete(Conditions conds) {
        String sql = "delete from SELM_SERVER_APPLY";
        String subsql = conds != null ? conds.toString() : "";
        if ("".equals(subsql)) {
            if (con == null) {
                return SQL.execute(sql).TOTAL_RECORD_COUNT;
            } else {
                return SQL.execute(con, sql).TOTAL_RECORD_COUNT;
            }
        } else {
            sql += " where " + subsql;
            if (con == null) {
                return SQL.execute(sql, conds.getObjectArray()).TOTAL_RECORD_COUNT;
            } else {
                return SQL.execute(con, sql, conds.getObjectArray()).TOTAL_RECORD_COUNT;
            }
        }
    }

	public void delete(String[] stApplyId) {
        Conditions conds = Conditions.newOrConditions();
        for (int i = 0; i < stApplyId.length; i++) {
            Conditions subconds = Conditions.newAndConditions();
            subconds.add(new Condition("ST_APPLY_ID", Condition.OT_EQUAL, stApplyId[i]));
            conds.add(subconds);
        }
        delete(conds);
    }

	public void delete(String stApplyId) {
        Conditions conds = Conditions.newAndConditions();
        conds.add(new Condition("ST_APPLY_ID", Condition.OT_EQUAL, stApplyId));
        delete(conds);
    }

    public PaginationArrayList<SelmServerApply> query(Conditions conds, String suffix, int pageSize, int currentPage) {
        RecordSet rs;
        if (con == null) {
            rs = SQL.query("SELM_SERVER_APPLY", "*", conds, suffix, pageSize, currentPage);
        } else {
            rs = SQL.query(con, "SELM_SERVER_APPLY", "*", conds, suffix, pageSize, currentPage);
        }
        PaginationArrayList<SelmServerApply> pal = new PaginationArrayList<SelmServerApply>(rs.TOTAL_RECORD_COUNT, rs.COMMON_PAGE_SIZE, rs.CURRENT_PAGE);
        while (rs.next()) {
            SelmServerApply info = new SelmServerApply();
            setProperties(info, rs);
            pal.add(info);
        }
        return pal;
    }

    public List<SelmServerApply> query(Conditions conds, String suffix) {
        RecordSet rs;
        if (con == null) {
            rs = SQL.query("SELM_SERVER_APPLY", "*", conds, suffix);
        } else {
            rs = SQL.query(con, "SELM_SERVER_APPLY", "*", conds, suffix);
        }
        ArrayList<SelmServerApply> al = new ArrayList<SelmServerApply>();
        while (rs.next()) {
            SelmServerApply info = new SelmServerApply();
            setProperties(info, rs);
            al.add(info);
        }
        return al;
    }
    
    public static void setProperties(SelmServerApply info, RecordSet rs){
        info.setStApplyId(rs.getOriginalString("ST_APPLY_ID"));
        info.setStApplyOrganId(rs.getOriginalString("ST_APPLY_ORGAN_ID"));
        info.setStApplyOrganName(rs.getOriginalString("ST_APPLY_ORGAN_NAME"));
        info.setNmStatus(rs.getBigDecimal("NM_STATUS"));
        info.setStServerUserName(rs.getOriginalString("ST_SERVER_USER_NAME"));
        info.setStServerUserPhone(rs.getOriginalString("ST_SERVER_USER_PHONE"));
        info.setStServerUserMobile(rs.getOriginalString("ST_SERVER_USER_MOBILE"));
        info.setStServerUserEmail(rs.getOriginalString("ST_SERVER_USER_EMAIL"));
        info.setStServerContent(rs.getOriginalString("ST_SERVER_CONTENT"));
        info.setDtUpCreate(rs.getTimestamp("DT_UP_CREATE"));
        info.setDtCreate(rs.getTimestamp("DT_CREATE"));
        info.setStServerDestrict(rs.getOriginalString("ST_SERVER_DESTRICT"));
        info.setStPointName(rs.getOriginalString("ST_POINT_NAME"));
        info.setStPutAddress(rs.getOriginalString("ST_PUT_ADDRESS"));
        info.setStBuildCompany(rs.getOriginalString("ST_BUILD_COMPANY"));
        info.setStPutNumber(rs.getOriginalString("ST_PUT_NUMBER"));
        info.setNmNetwork(rs.getBigDecimal("NM_NETWORK"));
        info.setStWatchOver(rs.getBigDecimal("ST_WATCH_OVER"));
        info.setStAttachId(rs.getOriginalString("ST_ATTACH_ID"));
        info.setStResult(rs.getOriginalString("ST_RESULT"));
        info.setNmUpdate(rs.getBigDecimal("NM_UPDATE"));
        info.setStExt1(rs.getOriginalString("ST_EXT1"));
        info.setStExt2(rs.getOriginalString("ST_EXT2"));
    }

	public SelmServerApply get(String stApplyId) {
        Conditions conds = Conditions.newAndConditions();
        conds.add(new Condition("ST_APPLY_ID", Condition.OT_EQUAL, stApplyId));
        List<SelmServerApply> list = query(conds, null);
        return list.size() > 0 ? list.get(0) : null;
    }

}
