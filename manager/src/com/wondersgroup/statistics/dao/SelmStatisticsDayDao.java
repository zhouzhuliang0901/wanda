package com.wondersgroup.statistics.dao;

import java.math.*;
import java.sql.*;
import java.util.*;
import wfc.facility.tool.autocode.*;
import wfc.service.database.*;
import org.springframework.stereotype.Repository;

import com.wondersgroup.statistics.bean.SelmStatisticsDay;

/**
 * 业务统计（按天）
 * @author generated by wfc.facility.tool.autocode.InternalDaoGenerator
 */
@Repository
public class SelmStatisticsDayDao {

    private Connection con = null;

    public SelmStatisticsDayDao() {
    }

    public SelmStatisticsDayDao(Connection con) {
        this.con = con;
    }

    public void add(SelmStatisticsDay info) {
        String sql = "insert into SELM_STATISTICS_DAY(ST_STATISTICS_ID, ST_DATE, NM_COUNT, NM_QUERY, NM_SUCCESS, NM_FAILD, DT_TIME, ST_EXT1, ST_EXT2) values (?, ?, ?, ?, ?, ?, ?, ?, ?)";
        Object[] obj = {
            info.getStStatisticsId(),
            info.getStDate(),
            info.getNmCount(),
            info.getNmQuery(),
            info.getNmSuccess(),
            info.getNmFaild(),
            info.getDtTime(),
            info.getStExt1(),
            info.getStExt2()        	
        };
        if (con == null) {
            SQL.execute(sql, obj);
        } else {
            SQL.execute(con, sql, obj);
        }
    }

    public void update(SelmStatisticsDay info) {
        String sql = "update SELM_STATISTICS_DAY set NM_COUNT = ?, NM_QUERY = ?, NM_SUCCESS = ?, NM_FAILD = ?, DT_TIME = ?, ST_EXT1 = ?, ST_EXT2 = ? where ST_STATISTICS_ID = ? and ST_DATE = ?";
        Object[] obj = {
            info.getNmCount(),
            info.getNmQuery(),
            info.getNmSuccess(),
            info.getNmFaild(),
            info.getDtTime(),
            info.getStExt1(),
            info.getStExt2(),
            info.getStStatisticsId(),
            info.getStDate()        	
        };
        if (con == null) {
            SQL.execute(sql, obj);
        } else {
            SQL.execute(con, sql, obj);
        }
    }

    public int update(Map<String, Object> map, Conditions conds) {
        String sql = "update SELM_STATISTICS_DAY set ";
        List<Object> list = new ArrayList<Object>();
        int i = 0;
        for (String field : map.keySet()) {
            if (i++ > 0) {
                sql += ", ";
            }
            sql += field + " = ?";
            list.add(map.get(field));
        }
        String subsql = conds != null ? conds.toString() : "";
        if ("".equals(subsql)) {
            if (con == null) {
                return SQL.execute(sql).TOTAL_RECORD_COUNT;
            } else {
                return SQL.execute(con, sql).TOTAL_RECORD_COUNT;
            }
        } else {
            sql += " where " + subsql;
            list.addAll(conds.getObjectList());
            if (con == null) {
                return SQL.execute(sql, list.toArray()).TOTAL_RECORD_COUNT;
            } else {
                return SQL.execute(con, sql, list.toArray()).TOTAL_RECORD_COUNT;
            }
        }
    }
    
    public int delete(Conditions conds) {
        String sql = "delete from SELM_STATISTICS_DAY";
        String subsql = conds != null ? conds.toString() : "";
        if ("".equals(subsql)) {
            if (con == null) {
                return SQL.execute(sql).TOTAL_RECORD_COUNT;
            } else {
                return SQL.execute(con, sql).TOTAL_RECORD_COUNT;
            }
        } else {
            sql += " where " + subsql;
            if (con == null) {
                return SQL.execute(sql, conds.getObjectArray()).TOTAL_RECORD_COUNT;
            } else {
                return SQL.execute(con, sql, conds.getObjectArray()).TOTAL_RECORD_COUNT;
            }
        }
    }

	public void delete(String[] stStatisticsId, String[] stDate) {
        Conditions conds = Conditions.newOrConditions();
        for (int i = 0; i < stStatisticsId.length; i++) {
            Conditions subconds = Conditions.newAndConditions();
            subconds.add(new Condition("ST_STATISTICS_ID", Condition.OT_EQUAL, stStatisticsId[i]));
            subconds.add(new Condition("ST_DATE", Condition.OT_EQUAL, stDate[i]));
            conds.add(subconds);
        }
        delete(conds);
    }

	public void delete(String stStatisticsId, String stDate) {
        Conditions conds = Conditions.newAndConditions();
        conds.add(new Condition("ST_STATISTICS_ID", Condition.OT_EQUAL, stStatisticsId));
        conds.add(new Condition("ST_DATE", Condition.OT_EQUAL, stDate));
        delete(conds);
    }
	public void delete(String stStatisticsId) {
		Conditions conds = Conditions.newAndConditions();
		conds.add(new Condition("ST_STATISTICS_ID", Condition.OT_EQUAL, stStatisticsId));
		delete(conds);
	}

    public PaginationArrayList<SelmStatisticsDay> query(Conditions conds, String suffix, int pageSize, int currentPage) {
        RecordSet rs;
        if (con == null) {
            rs = SQL.query("SELM_STATISTICS_DAY", "*", conds, suffix, pageSize, currentPage);
        } else {
            rs = SQL.query(con, "SELM_STATISTICS_DAY", "*", conds, suffix, pageSize, currentPage);
        }
        PaginationArrayList<SelmStatisticsDay> pal = new PaginationArrayList<SelmStatisticsDay>(rs.TOTAL_RECORD_COUNT, rs.COMMON_PAGE_SIZE, rs.CURRENT_PAGE);
        while (rs.next()) {
            SelmStatisticsDay info = new SelmStatisticsDay();
            setProperties(info, rs);
            pal.add(info);
        }
        return pal;
    }
  /*  public PaginationArrayList<SelmStatisticsDay> query(String startDate, String endDate, int pageSize, int currentPage) {
    	
    	String sql = "SELECT * FROM selm_statistics_day WHERE ST_DATE BETWEEN ? and cast('2020-2-22' as datetime) ORDER BY ST_STATISTICS_ID DESC";
    	RecordSet rs;
    	if (con == null) {
    		rs = SQL.execute(sql, pageSize, currentPage);
    	} else {
    		rs = SQL.execute(con, sql, pageSize, currentPage);
    	}
    	PaginationArrayList<SelmStatisticsDay> pal = new PaginationArrayList<SelmStatisticsDay>(rs.TOTAL_RECORD_COUNT, rs.COMMON_PAGE_SIZE, rs.CURRENT_PAGE);
    	while (rs.next()) {
    		SelmStatisticsDay info = new SelmStatisticsDay();
    		setProperties(info, rs);
    		pal.add(info);
    	}
    	return pal;
    }
*/
    public List<SelmStatisticsDay> query(Conditions conds, String suffix) {
        RecordSet rs;
        if (con == null) {
            rs = SQL.query("SELM_STATISTICS_DAY", "*", conds, suffix);
        } else {
            rs = SQL.query(con, "SELM_STATISTICS_DAY", "*", conds, suffix);
        }
        ArrayList<SelmStatisticsDay> al = new ArrayList<SelmStatisticsDay>();
        while (rs.next()) {
            SelmStatisticsDay info = new SelmStatisticsDay();
            setProperties(info, rs);
            al.add(info);
        }
        return al;
    }
    
    public static void setProperties(SelmStatisticsDay info, RecordSet rs){
        info.setStStatisticsId(rs.getOriginalString("ST_STATISTICS_ID"));
        info.setStDate(rs.getOriginalString("ST_DATE"));
        info.setNmCount(rs.getBigDecimal("NM_COUNT"));
        info.setNmQuery(rs.getBigDecimal("NM_QUERY"));
        info.setNmSuccess(rs.getBigDecimal("NM_SUCCESS"));
        info.setNmFaild(rs.getBigDecimal("NM_FAILD"));
        info.setDtTime(rs.getTimestamp("DT_TIME"));
        info.setStExt1(rs.getOriginalString("ST_EXT1"));
        info.setStExt2(rs.getOriginalString("ST_EXT2"));
    }

	public SelmStatisticsDay get(String stStatisticsId, String stDate) {
        Conditions conds = Conditions.newAndConditions();
        conds.add(new Condition("ST_STATISTICS_ID", Condition.OT_EQUAL, stStatisticsId));
        conds.add(new Condition("ST_DATE", Condition.OT_EQUAL, stDate));
        List<SelmStatisticsDay> list = query(conds, null);
        return list.size() > 0 ? list.get(0) : null;
    }

}
