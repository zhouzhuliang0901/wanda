package com.wondersgroup.statistics.dao;

import java.math.*;
import java.sql.*;
import java.util.*;
import wfc.facility.tool.autocode.*;
import wfc.service.database.*;
import org.springframework.stereotype.Repository;

import com.wondersgroup.statistics.bean.SelmClientStatDay;

/**
 * 终端业务统计（按天）
 * 
 * @author generated by wfc.facility.tool.autocode.InternalDaoGenerator
 */
@Repository
public class SelmClientStatDayDao {

	private Connection con = null;

	public SelmClientStatDayDao() {
	}

	public SelmClientStatDayDao(Connection con) {
		this.con = con;
	}

	public void add(SelmClientStatDay info) {
		String sql = "insert into SELM_CLIENT_STAT_DAY(ST_STATISTICS_ID, ST_DATE, ST_MACHINE_ID, NM_COUNT, NM_QUERY, NM_SUCCESS, NM_FAILD, DT_TIME, ST_EXT1, ST_EXT2) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
		Object[] obj = { info.getStStatisticsId(), info.getStDate(),
				info.getStMachineId(), info.getNmCount(), info.getNmQuery(),
				info.getNmSuccess(), info.getNmFaild(), info.getDtTime(),
				info.getStExt1(), info.getStExt2() };
		if (con == null) {
			SQL.execute(sql, obj);
		} else {
			SQL.execute(con, sql, obj);
		}
	}

	public void update(SelmClientStatDay info) {
		String sql = "update SELM_CLIENT_STAT_DAY set NM_COUNT = ?, NM_QUERY = ?, NM_SUCCESS = ?, NM_FAILD = ?, DT_TIME = ?, ST_EXT1 = ?, ST_EXT2 = ? where ST_STATISTICS_ID = ? and ST_DATE = ? and ST_MACHINE_ID = ?";
		Object[] obj = { info.getNmCount(), info.getNmQuery(),
				info.getNmSuccess(), info.getNmFaild(), info.getDtTime(),
				info.getStExt1(), info.getStExt2(), info.getStStatisticsId(),
				info.getStDate(), info.getStMachineId() };
		if (con == null) {
			SQL.execute(sql, obj);
		} else {
			SQL.execute(con, sql, obj);
		}
	}

	public int update(Map<String, Object> map, Conditions conds) {
		String sql = "update SELM_CLIENT_STAT_DAY set ";
		List<Object> list = new ArrayList<Object>();
		int i = 0;
		for (String field : map.keySet()) {
			if (i++ > 0) {
				sql += ", ";
			}
			sql += field + " = ?";
			list.add(map.get(field));
		}
		String subsql = conds != null ? conds.toString() : "";
		if ("".equals(subsql)) {
			if (con == null) {
				return SQL.execute(sql).TOTAL_RECORD_COUNT;
			} else {
				return SQL.execute(con, sql).TOTAL_RECORD_COUNT;
			}
		} else {
			sql += " where " + subsql;
			list.addAll(conds.getObjectList());
			if (con == null) {
				return SQL.execute(sql, list.toArray()).TOTAL_RECORD_COUNT;
			} else {
				return SQL.execute(con, sql, list.toArray()).TOTAL_RECORD_COUNT;
			}
		}
	}

	public int delete(Conditions conds) {
		String sql = "delete from SELM_CLIENT_STAT_DAY";
		String subsql = conds != null ? conds.toString() : "";
		if ("".equals(subsql)) {
			if (con == null) {
				return SQL.execute(sql).TOTAL_RECORD_COUNT;
			} else {
				return SQL.execute(con, sql).TOTAL_RECORD_COUNT;
			}
		} else {
			sql += " where " + subsql;
			if (con == null) {
				return SQL.execute(sql, conds.getObjectArray()).TOTAL_RECORD_COUNT;
			} else {
				return SQL.execute(con, sql, conds.getObjectArray()).TOTAL_RECORD_COUNT;
			}
		}
	}

	public void delete(String[] stStatisticsId, String[] stDate,
			String[] stMachineId) {
		Conditions conds = Conditions.newOrConditions();
		for (int i = 0; i < stStatisticsId.length; i++) {
			Conditions subconds = Conditions.newAndConditions();
			subconds.add(new Condition("ST_STATISTICS_ID", Condition.OT_EQUAL,
					stStatisticsId[i]));
			subconds.add(new Condition("ST_DATE", Condition.OT_EQUAL, stDate[i]));
			subconds.add(new Condition("ST_MACHINE_ID", Condition.OT_EQUAL,
					stMachineId[i]));
			conds.add(subconds);
		}
		delete(conds);
	}

	public void delete(String stStatisticsId, String stDate, String stMachineId) {
		Conditions conds = Conditions.newAndConditions();
		conds.add(new Condition("ST_STATISTICS_ID", Condition.OT_EQUAL,
				stStatisticsId));
		conds.add(new Condition("ST_DATE", Condition.OT_EQUAL, stDate));
		conds.add(new Condition("ST_MACHINE_ID", Condition.OT_EQUAL,
				stMachineId));
		delete(conds);
	}

	public PaginationArrayList<SelmClientStatDay> query(Conditions conds,
			String suffix, int pageSize, int currentPage) {
		RecordSet rs;
		if (con == null) {
			rs = SQL.query("SELM_CLIENT_STAT_DAY", "*", conds, suffix,
					pageSize, currentPage);
		} else {
			rs = SQL.query(con, "SELM_CLIENT_STAT_DAY", "*", conds, suffix,
					pageSize, currentPage);
		}
		PaginationArrayList<SelmClientStatDay> pal = new PaginationArrayList<SelmClientStatDay>(
				rs.TOTAL_RECORD_COUNT, rs.COMMON_PAGE_SIZE, rs.CURRENT_PAGE);
		while (rs.next()) {
			SelmClientStatDay info = new SelmClientStatDay();
			setProperties(info, rs);
			pal.add(info);
		}
		return pal;
	}
	
	public PaginationArrayList<SelmClientStatDay> queryByDay(Conditions conds,
			String suffix, int pageSize, int currentPage) {
		RecordSet rs;
		if (con == null) {
			rs = SQL.query("SELM_CLIENT_STAT_DAY", "ST_DATE,SUM(NM_COUNT) NM_COUNT", conds, suffix,
					pageSize, currentPage);
		} else {
			rs = SQL.query(con, "SELM_CLIENT_STAT_DAY", "ST_DATE,SUM(NM_COUNT) NM_COUNT", conds, suffix,
					pageSize, currentPage);
		}
		PaginationArrayList<SelmClientStatDay> pal = new PaginationArrayList<SelmClientStatDay>(
				rs.TOTAL_RECORD_COUNT, rs.COMMON_PAGE_SIZE, rs.CURRENT_PAGE);
		while (rs.next()) {
			SelmClientStatDay info = new SelmClientStatDay();
			setProperties(info, rs);
			pal.add(info);
		}
		return pal;
	}

	public List<SelmClientStatDay> query(Conditions conds, String suffix) {
		RecordSet rs;
		if (con == null) {
			rs = SQL.query("SELM_CLIENT_STAT_DAY", "*", conds, suffix);
		} else {
			rs = SQL.query(con, "SELM_CLIENT_STAT_DAY", "*", conds, suffix);
		}
		ArrayList<SelmClientStatDay> al = new ArrayList<SelmClientStatDay>();
		while (rs.next()) {
			SelmClientStatDay info = new SelmClientStatDay();
			setProperties(info, rs);
			al.add(info);
		}
		return al;
	}

	public static void setProperties(SelmClientStatDay info, RecordSet rs) {
		info.setStStatisticsId(rs.getOriginalString("ST_STATISTICS_ID"));
		info.setStDate(rs.getOriginalString("ST_DATE"));
		info.setStMachineId(rs.getOriginalString("ST_MACHINE_ID"));
		info.setNmCount(rs.getBigDecimal("NM_COUNT"));
		info.setNmQuery(rs.getBigDecimal("NM_QUERY"));
		info.setNmSuccess(rs.getBigDecimal("NM_SUCCESS"));
		info.setNmFaild(rs.getBigDecimal("NM_FAILD"));
		info.setDtTime(rs.getTimestamp("DT_TIME"));
		info.setStExt1(rs.getOriginalString("ST_EXT1"));
		info.setStExt2(rs.getOriginalString("ST_EXT2"));
	}

	public SelmClientStatDay get(String stStatisticsId, String stDate,
			String stMachineId) {
		Conditions conds = Conditions.newAndConditions();
		conds.add(new Condition("ST_STATISTICS_ID", Condition.OT_EQUAL,
				stStatisticsId));
		conds.add(new Condition("ST_DATE", Condition.OT_EQUAL, stDate));
		conds.add(new Condition("ST_MACHINE_ID", Condition.OT_EQUAL,
				stMachineId));
		List<SelmClientStatDay> list = query(conds, null);
		return list.size() > 0 ? list.get(0) : null;
	}

	public List<SelmClientStatDay> queryDay() {
		String sql = "SELECT ST_DATE day FROM selm_client_stat_day GROUP BY ST_DATE";
		// String sql =
		// "select convert(char(10),DT_VISITED,102) as [day],count(convert(char(10),DT_VISITED,102)) cnt from analytics_visited_detail where ST_COOKIE = ? group by convert(char(10),DT_VISITED,102) order by [day]";
		// Object[] obj = {selmStatistics.getStNetFlag()};
		Object[] obj = {};
		RecordSet rs;
		if (con == null) {
			rs = SQL.execute(sql, obj);
		} else {
			rs = SQL.execute(con, sql, obj);
		}
		ArrayList<SelmClientStatDay> al = new ArrayList<SelmClientStatDay>();
		while (rs.next()) {
			SelmClientStatDay info = new SelmClientStatDay();

			info.setStDate(rs.getOriginalString("day"));
			// info.setNmCount(bigDecimal);

			al.add(info);
		}
		return al;
	}

}
