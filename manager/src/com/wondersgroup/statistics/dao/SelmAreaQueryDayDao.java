package com.wondersgroup.statistics.dao;

import java.math.*;
import java.sql.*;
import java.util.*;
import wfc.facility.tool.autocode.*;
import wfc.service.database.*;
import org.springframework.stereotype.Repository;

import com.wondersgroup.statistics.bean.SelmAreaQueryDay;

/**
 * 区域日办件统计表
 * @author generated by wfc.facility.tool.autocode.InternalDaoGenerator
 */
@Repository
public class SelmAreaQueryDayDao {

    private Connection con = null;

    public SelmAreaQueryDayDao() {
    }

    public SelmAreaQueryDayDao(Connection con) {
        this.con = con;
    }

    public void add(SelmAreaQueryDay info) {
        String sql = "insert into SELM_AREA_QUERY_DAY(ST_AREA_ID, ST_DAY, ST_AREA_NAME, NM_GOV_NUMBER, NM_SOCIAL_NUMBER, NM_DAY) values (?, ?, ?, ?, ?, ?)";
        Object[] obj = {
            info.getStAreaId(),
            info.getStDay(),
            info.getStAreaName(),
            info.getNmGovNumber(),
            info.getNmSocialNumber(),
            info.getNmDay()        	
        };
        if (con == null) {
            SQL.execute(sql, obj);
        } else {
            SQL.execute(con, sql, obj);
        }
    }

    public void update(SelmAreaQueryDay info) {
        String sql = "update SELM_AREA_QUERY_DAY set ST_AREA_NAME = ?, NM_GOV_NUMBER = ?, NM_SOCIAL_NUMBER = ?, NM_DAY = ? where ST_AREA_ID = ? and ST_DAY = ?";
        Object[] obj = {
            info.getStAreaName(),
            info.getNmGovNumber(),
            info.getNmSocialNumber(),
            info.getNmDay(),
            info.getStAreaId(),
            info.getStDay()        	
        };
        if (con == null) {
            SQL.execute(sql, obj);
        } else {
            SQL.execute(con, sql, obj);
        }
    }

    public int update(Map<String, Object> map, Conditions conds) {
        String sql = "update SELM_AREA_QUERY_DAY set ";
        List<Object> list = new ArrayList<Object>();
        int i = 0;
        for (String field : map.keySet()) {
            if (i++ > 0) {
                sql += ", ";
            }
            sql += field + " = ?";
            list.add(map.get(field));
        }
        String subsql = conds != null ? conds.toString() : "";
        if ("".equals(subsql)) {
            if (con == null) {
                return SQL.execute(sql).TOTAL_RECORD_COUNT;
            } else {
                return SQL.execute(con, sql).TOTAL_RECORD_COUNT;
            }
        } else {
            sql += " where " + subsql;
            list.addAll(conds.getObjectList());
            if (con == null) {
                return SQL.execute(sql, list.toArray()).TOTAL_RECORD_COUNT;
            } else {
                return SQL.execute(con, sql, list.toArray()).TOTAL_RECORD_COUNT;
            }
        }
    }
    
    public int delete(Conditions conds) {
        String sql = "delete from SELM_AREA_QUERY_DAY";
        String subsql = conds != null ? conds.toString() : "";
        if ("".equals(subsql)) {
            if (con == null) {
                return SQL.execute(sql).TOTAL_RECORD_COUNT;
            } else {
                return SQL.execute(con, sql).TOTAL_RECORD_COUNT;
            }
        } else {
            sql += " where " + subsql;
            if (con == null) {
                return SQL.execute(sql, conds.getObjectArray()).TOTAL_RECORD_COUNT;
            } else {
                return SQL.execute(con, sql, conds.getObjectArray()).TOTAL_RECORD_COUNT;
            }
        }
    }

	public void delete(String[] stAreaId, String[] stDay) {
        Conditions conds = Conditions.newOrConditions();
        for (int i = 0; i < stAreaId.length; i++) {
            Conditions subconds = Conditions.newAndConditions();
            subconds.add(new Condition("ST_AREA_ID", Condition.OT_EQUAL, stAreaId[i]));
            subconds.add(new Condition("ST_DAY", Condition.OT_EQUAL, stDay[i]));
            conds.add(subconds);
        }
        delete(conds);
    }

	public void delete(String stAreaId, String stDay) {
        Conditions conds = Conditions.newAndConditions();
        conds.add(new Condition("ST_AREA_ID", Condition.OT_EQUAL, stAreaId));
        conds.add(new Condition("ST_DAY", Condition.OT_EQUAL, stDay));
        delete(conds);
    }

    public PaginationArrayList<SelmAreaQueryDay> query(Conditions conds, String suffix, int pageSize, int currentPage) {
        RecordSet rs;
        if (con == null) {
            rs = SQL.query("SELM_AREA_QUERY_DAY", "*", conds, suffix, pageSize, currentPage);
        } else {
            rs = SQL.query(con, "SELM_AREA_QUERY_DAY", "*", conds, suffix, pageSize, currentPage);
        }
        PaginationArrayList<SelmAreaQueryDay> pal = new PaginationArrayList<SelmAreaQueryDay>(rs.TOTAL_RECORD_COUNT, rs.COMMON_PAGE_SIZE, rs.CURRENT_PAGE);
        while (rs.next()) {
            SelmAreaQueryDay info = new SelmAreaQueryDay();
            setProperties(info, rs);
            pal.add(info);
        }
        return pal;
    }

    public List<SelmAreaQueryDay> query(Conditions conds, String suffix) {
        RecordSet rs;
        if (con == null) {
            rs = SQL.query("SELM_AREA_QUERY_DAY", "*", conds, suffix);
        } else {
            rs = SQL.query(con, "SELM_AREA_QUERY_DAY", "*", conds, suffix);
        }
        ArrayList<SelmAreaQueryDay> al = new ArrayList<SelmAreaQueryDay>();
        while (rs.next()) {
            SelmAreaQueryDay info = new SelmAreaQueryDay();
            setProperties(info, rs);
            al.add(info);
        }
        return al;
    }
    
    public List<SelmAreaQueryDay> queryName(Conditions conds, String suffix, int pageSize, int currentPage) {
        RecordSet rs;
        if (con == null) {
            rs = SQL.query("SELM_AREA_QUERY_DAY", "ST_AREA_NAME", conds, suffix, pageSize, currentPage);
        } else {
            rs = SQL.query(con, "SELM_AREA_QUERY_DAY", "ST_AREA_NAME", conds, suffix, pageSize, currentPage);
        }
        PaginationArrayList<SelmAreaQueryDay> pal = new PaginationArrayList<SelmAreaQueryDay>(rs.TOTAL_RECORD_COUNT, rs.COMMON_PAGE_SIZE, rs.CURRENT_PAGE);
        while (rs.next()) {
            SelmAreaQueryDay info = new SelmAreaQueryDay();
            setProperties(info, rs);
            pal.add(info);
        }
        return pal;
    }
    
    public List<SelmAreaQueryDay> queryName(Conditions conds, String suffix) {
        RecordSet rs;
        if (con == null) {
            rs = SQL.query("SELM_AREA_QUERY_DAY", "ST_AREA_NAME", conds, suffix);
        } else {
            rs = SQL.query(con, "SELM_AREA_QUERY_DAY", "ST_AREA_NAME", conds, suffix);
        }
        ArrayList<SelmAreaQueryDay> al = new ArrayList<SelmAreaQueryDay>();
        while (rs.next()) {
            SelmAreaQueryDay info = new SelmAreaQueryDay();
            setProperties(info, rs);
            al.add(info);
        }
        return al;
    }
    
    public static void setProperties(SelmAreaQueryDay info, RecordSet rs){
        info.setStAreaId(rs.getOriginalString("ST_AREA_ID"));
        info.setStDay(rs.getOriginalString("ST_DAY"));
        info.setStAreaName(rs.getOriginalString("ST_AREA_NAME"));
        info.setNmGovNumber(rs.getBigDecimal("NM_GOV_NUMBER"));
        info.setNmSocialNumber(rs.getBigDecimal("NM_SOCIAL_NUMBER"));
        info.setNmDay(rs.getBigDecimal("NM_DAY"));
    }

	public SelmAreaQueryDay get(String stAreaId, String stDay) {
        Conditions conds = Conditions.newAndConditions();
        conds.add(new Condition("ST_AREA_ID", Condition.OT_EQUAL, stAreaId));
        conds.add(new Condition("ST_DAY", Condition.OT_EQUAL, stDay));
        List<SelmAreaQueryDay> list = query(conds, null);
        return list.size() > 0 ? list.get(0) : null;
    }
	public SelmAreaQueryDay getDay(String stAreaName, String stDay) {
        Conditions conds = Conditions.newAndConditions();
        conds.add(new Condition("ST_AREA_NAME", Condition.OT_EQUAL, stAreaName));
        conds.add(new Condition("ST_DAY", Condition.OT_EQUAL, stDay));
        List<SelmAreaQueryDay> list = query(conds, null);
        return list.size() > 0 ? list.get(0) : null;
    }

}
