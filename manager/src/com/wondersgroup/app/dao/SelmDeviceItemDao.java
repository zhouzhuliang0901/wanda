package com.wondersgroup.app.dao;

import java.math.*;
import java.sql.*;
import java.util.*;

import wfc.facility.tool.autocode.*;
import wfc.service.database.*;

import org.springframework.stereotype.Repository;

import com.wondersgroup.app.bean.Oauth2ClientItem;
import com.wondersgroup.app.bean.SelmDeviceItem;

/**
 * 设备关联事项
 * @author generated by wfc.facility.tool.autocode.InternalDaoGenerator
 */
@Repository
public class SelmDeviceItemDao {

    private Connection con = null;

    public SelmDeviceItemDao() {
    }

    public SelmDeviceItemDao(Connection con) {
        this.con = con;
    }

    public int add(SelmDeviceItem info) {
        String sql = "insert into SELM_DEVICE_ITEM(ST_ITEM_ID, ST_DEVICE_ID, NM_STATUS, NM_ORDER, DT_CREATE, DT_UPDATE) values (?, ?, ?, ?, ?, ?)";
        Object[] obj = {
            info.getStItemId(),
            info.getStDeviceId(),
            info.getNmStatus(),
            info.getNmOrder(),
            info.getDtCreate(),
            info.getDtUpdate()        	
        };
        if (con == null) {
            return SQL.execute(sql, obj).TOTAL_RECORD_COUNT;
        } else {
            return SQL.execute(con, sql, obj).TOTAL_RECORD_COUNT;
        }
    }

    public void update(SelmDeviceItem info) {
        String sql = "update SELM_DEVICE_ITEM set NM_STATUS = ?, NM_ORDER = ?, DT_CREATE = ?, DT_UPDATE = ? where ST_ITEM_ID = ? and ST_DEVICE_ID = ?";
        Object[] obj = {
            info.getNmStatus(),
            info.getNmOrder(),
            info.getDtCreate(),
            info.getDtUpdate(),
            info.getStItemId(),
            info.getStDeviceId()        	
        };
        if (con == null) {
            SQL.execute(sql, obj);
        } else {
            SQL.execute(con, sql, obj);
        }
    }

    public int update(Map<String, Object> map, Conditions conds) {
        String sql = "update SELM_DEVICE_ITEM set ";
        List<Object> list = new ArrayList<Object>();
        int i = 0;
        for (String field : map.keySet()) {
            if (i++ > 0) {
                sql += ", ";
            }
            sql += field + " = ?";
            list.add(map.get(field));
        }
        String subsql = conds != null ? conds.toString() : "";
        if ("".equals(subsql)) {
            if (con == null) {
                return SQL.execute(sql).TOTAL_RECORD_COUNT;
            } else {
                return SQL.execute(con, sql).TOTAL_RECORD_COUNT;
            }
        } else {
            sql += " where " + subsql;
            list.addAll(conds.getObjectList());
            if (con == null) {
                return SQL.execute(sql, list.toArray()).TOTAL_RECORD_COUNT;
            } else {
                return SQL.execute(con, sql, list.toArray()).TOTAL_RECORD_COUNT;
            }
        }
    }
    
    public int delete(Conditions conds) {
        String sql = "delete from SELM_DEVICE_ITEM";
        String subsql = conds != null ? conds.toString() : "";
        if ("".equals(subsql)) {
            if (con == null) {
                return SQL.execute(sql).TOTAL_RECORD_COUNT;
            } else {
                return SQL.execute(con, sql).TOTAL_RECORD_COUNT;
            }
        } else {
            sql += " where " + subsql;
            if (con == null) {
                return SQL.execute(sql, conds.getObjectArray()).TOTAL_RECORD_COUNT;
            } else {
                return SQL.execute(con, sql, conds.getObjectArray()).TOTAL_RECORD_COUNT;
            }
        }
    }

	public void delete(String[] stItemId, String[] stDeviceId) {
        Conditions conds = Conditions.newOrConditions();
        for (int i = 0; i < stItemId.length; i++) {
            Conditions subconds = Conditions.newAndConditions();
            subconds.add(new Condition("ST_ITEM_ID", Condition.OT_EQUAL, stItemId[i]));
            subconds.add(new Condition("ST_DEVICE_ID", Condition.OT_EQUAL, stDeviceId[i]));
            conds.add(subconds);
        }
        delete(conds);
    }

	public void delete(String stItemId, String stDeviceId) {
        Conditions conds = Conditions.newAndConditions();
        conds.add(new Condition("ST_ITEM_ID", Condition.OT_EQUAL, stItemId));
        conds.add(new Condition("ST_DEVICE_ID", Condition.OT_EQUAL, stDeviceId));
        delete(conds);
    }

    public PaginationArrayList<SelmDeviceItem> query(Conditions conds, String suffix, int pageSize, int currentPage) {
        RecordSet rs;
        if (con == null) {
            rs = SQL.query("SELM_DEVICE_ITEM", "*", conds, suffix, pageSize, currentPage);
        } else {
            rs = SQL.query(con, "SELM_DEVICE_ITEM", "*", conds, suffix, pageSize, currentPage);
        }
        PaginationArrayList<SelmDeviceItem> pal = new PaginationArrayList<SelmDeviceItem>(rs.TOTAL_RECORD_COUNT, rs.COMMON_PAGE_SIZE, rs.CURRENT_PAGE);
        while (rs.next()) {
            SelmDeviceItem info = new SelmDeviceItem();
            setProperties(info, rs);
            pal.add(info);
        }
        return pal;
    }

    public List<SelmDeviceItem> query(Conditions conds, String suffix) {
        RecordSet rs;
        if (con == null) {
            rs = SQL.query("SELM_DEVICE_ITEM", "*", conds, suffix);
        } else {
            rs = SQL.query(con, "SELM_DEVICE_ITEM", "*", conds, suffix);
        }
        ArrayList<SelmDeviceItem> al = new ArrayList<SelmDeviceItem>();
        while (rs.next()) {
            SelmDeviceItem info = new SelmDeviceItem();
            setProperties(info, rs);
            al.add(info);
        }
        return al;
    }
    
    public static void setProperties(SelmDeviceItem info, RecordSet rs){
        info.setStItemId(rs.getOriginalString("ST_ITEM_ID"));
        info.setStDeviceId(rs.getOriginalString("ST_DEVICE_ID"));
        info.setNmStatus(rs.getBigDecimal("NM_STATUS"));
        info.setNmOrder(rs.getBigDecimal("NM_ORDER"));
        info.setDtCreate(rs.getTimestamp("DT_CREATE"));
        info.setDtUpdate(rs.getTimestamp("DT_UPDATE"));
    }

	public SelmDeviceItem get(String stItemId, String stDeviceId) {
        Conditions conds = Conditions.newAndConditions();
        conds.add(new Condition("ST_ITEM_ID", Condition.OT_EQUAL, stItemId));
        conds.add(new Condition("ST_DEVICE_ID", Condition.OT_EQUAL, stDeviceId));
        List<SelmDeviceItem> list = query(conds, null);
        return list.size() > 0 ? list.get(0) : null;
    }

	public  SelmDeviceItem getdevice(String stDeviceId1, String itemId) {
	        Conditions conds = Conditions.newAndConditions();
	        conds.add(new Condition("ST_DEVICE_ID", Condition.OT_EQUAL, stDeviceId1));
	        conds.add(new Condition("ST_ITEM_ID", Condition.OT_EQUAL, itemId));
	        List<SelmDeviceItem> list = query(conds, null);
	        return list.size() > 0 ? list.get(0) : null;
	}

	public int getCount(String stDeviceId) {
			String sql = "SELECT COUNT(*) count from selm_device_item WHERE ST_DEVICE_ID=?";
			Object[] obj = { stDeviceId };
			RecordSet rs;
			if (con == null) {
				rs = SQL.execute(sql, obj);
			} else {
				rs = SQL.execute(con, sql, obj);
			}
			int cont = 0;
			while (rs.next()) {
				BigDecimal bigDecimal = rs.getBigDecimal("count");
				cont = bigDecimal.intValue();
			}
			return cont;
	}
	
	 public List<String> getItemByDevice(String stDeviceId, BigDecimal status) {
		 	String sql = "SELECT ST_ITEM_ID from selm_device_item WHERE ST_DEVICE_ID=? AND NM_STATUS=?";
			Object[] obj = { stDeviceId,status };
			RecordSet rs;
			if (con == null) {
				rs = SQL.execute(sql, obj);
			} else {
				rs = SQL.execute(con, sql, obj);
			}
	        ArrayList<String> al = new ArrayList<String>();
	        while (rs.next()) {
	            al.add(rs.getOriginalString("ST_ITEM_ID"));
	        }
	        return al;
	}
	 
	 public List<String> getItemByDevice(String stDeviceId) {
		 	String sql = "SELECT ST_ITEM_ID from selm_device_item WHERE ST_DEVICE_ID=?";
			Object[] obj = { stDeviceId};
			RecordSet rs;
			if (con == null) {
				rs = SQL.execute(sql, obj);
			} else {
				rs = SQL.execute(con, sql, obj);
			}
	        ArrayList<String> al = new ArrayList<String>();
	        while (rs.next()) {
	            al.add(rs.getOriginalString("ST_ITEM_ID"));
	        }
	        return al;
	}

	public int addList(List<SelmDeviceItem> sdiList) {
		int i = 0;
		for(SelmDeviceItem emp : sdiList){
			i += add(emp);
		}
		return i;
	}

}
