package com.wondersgroup.app.dao;

import java.math.*;
import java.sql.*;
import java.util.*;
import wfc.facility.tool.autocode.*;
import wfc.service.database.*;

import org.springframework.stereotype.Repository;

import com.wondersgroup.app.bean.SelmItem;
import com.wondersgroup.app.bean.SelmItemLink;

/**
 * 事项表
 * @author generated by wfc.facility.tool.autocode.InternalDaoGenerator
 */
@Repository
public class SelmItemDao {

    private Connection con = null;

    public SelmItemDao() {
    }

    public SelmItemDao(Connection con) {
        this.con = con;
    }

    public void add(SelmItem info) {
        String sql = "insert into SELM_ITEM(ST_ITEM_ID, ST_ITEM_NO, ST_TEN_CODE, ST_MAIN_NAME, ST_ITEM_NAME, NM_BELONG, ST_ITEM_TYPE, ST_LEGAL_TIME, ST_PROMISE_TIME, ST_ORGAN_ID, ST_WORK_TYPE, NM_SORT, ST_ITEM_GUIDE_ID, NM_TYPE, ST_PARENT_ID, NM_SHOW_TYPE, ST_WORK_URL, DT_CREATE, DT_UPDATE, ST_EXT1, ST_EXT2, ST_EXT3, ST_EXT4,ST_STATE) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        Object[] obj = {
            info.getStItemId(),
            info.getStItemNo(),
            info.getStTenCode(),
            info.getStMainName(),
            info.getStItemName(),
            info.getNmBelong(),
            info.getStItemType(),
            info.getStLegalTime(),
            info.getStPromiseTime(),
            info.getStOrganId(),
            info.getStWorkType(),
            info.getNmSort(),
            info.getStItemGuideId(),
            info.getNmType(),
            info.getStParentId(),
            info.getNmShowType(),
            info.getStWorkUrl(),
            info.getDtCreate(),
            info.getDtUpdate(),
            info.getStExt1(),
            info.getStExt2(),
            info.getStExt3(),
            info.getStExt4() ,
            info.getStState()
        };
        if (con == null) {
            SQL.execute(sql, obj);
        } else {
            SQL.execute(con, sql, obj);
        }
    }

    public void update(SelmItem info) {
        String sql = "update SELM_ITEM set ST_ITEM_NO = ?, ST_TEN_CODE = ?, ST_MAIN_NAME = ?, ST_ITEM_NAME = ?, NM_BELONG = ?, ST_ITEM_TYPE = ?, ST_LEGAL_TIME = ?, ST_PROMISE_TIME = ?, ST_ORGAN_ID = ?, ST_WORK_TYPE = ?, NM_SORT = ?, ST_ITEM_GUIDE_ID = ?, NM_TYPE = ?, ST_PARENT_ID = ?, NM_SHOW_TYPE = ?, ST_WORK_URL = ?, DT_CREATE = ?, DT_UPDATE = ?, ST_EXT1 = ?, ST_EXT2 = ?, ST_EXT3 = ?, ST_EXT4 = ?, ST_STATE = ? where ST_ITEM_ID = ?";
        Object[] obj = {
            info.getStItemNo(),
            info.getStTenCode(),
            info.getStMainName(),
            info.getStItemName(),
            info.getNmBelong(),
            info.getStItemType(),
            info.getStLegalTime(),
            info.getStPromiseTime(),
            info.getStOrganId(),
            info.getStWorkType(),
            info.getNmSort(),
            info.getStItemGuideId(),
            info.getNmType(),
            info.getStParentId(),
            info.getNmShowType(),
            info.getStWorkUrl(),
            info.getDtCreate(),
            info.getDtUpdate(),
            info.getStExt1(),
            info.getStExt2(),
            info.getStExt3(),
            info.getStExt4(),
            info.getStState(),
            info.getStItemId()        	
        };
        if (con == null) {
            SQL.execute(sql, obj);
        } else {
            SQL.execute(con, sql, obj);
        }
    }

    public int update(Map<String, Object> map, Conditions conds) {
        String sql = "update SELM_ITEM set ";
        List<Object> list = new ArrayList<Object>();
        int i = 0;
        for (String field : map.keySet()) {
            if (i++ > 0) {
                sql += ", ";
            }
            sql += field + " = ?";
            list.add(map.get(field));
        }
        String subsql = conds != null ? conds.toString() : "";
        if ("".equals(subsql)) {
            if (con == null) {
                return SQL.execute(sql).TOTAL_RECORD_COUNT;
            } else {
                return SQL.execute(con, sql).TOTAL_RECORD_COUNT;
            }
        } else {
            sql += " where " + subsql;
            list.addAll(conds.getObjectList());
            if (con == null) {
                return SQL.execute(sql, list.toArray()).TOTAL_RECORD_COUNT;
            } else {
                return SQL.execute(con, sql, list.toArray()).TOTAL_RECORD_COUNT;
            }
        }
    }
    
    public int delete(Conditions conds) {
        String sql = "delete from SELM_ITEM";
        String subsql = conds != null ? conds.toString() : "";
        if ("".equals(subsql)) {
            if (con == null) {
                return SQL.execute(sql).TOTAL_RECORD_COUNT;
            } else {
                return SQL.execute(con, sql).TOTAL_RECORD_COUNT;
            }
        } else {
            sql += " where " + subsql;
            if (con == null) {
                return SQL.execute(sql, conds.getObjectArray()).TOTAL_RECORD_COUNT;
            } else {
                return SQL.execute(con, sql, conds.getObjectArray()).TOTAL_RECORD_COUNT;
            }
        }
    }

	public void delete(String[] stItemId) {
        Conditions conds = Conditions.newOrConditions();
        for (int i = 0; i < stItemId.length; i++) {
            Conditions subconds = Conditions.newAndConditions();
            subconds.add(new Condition("ST_ITEM_ID", Condition.OT_EQUAL, stItemId[i]));
            conds.add(subconds);
        }
        delete(conds);
    }

	public void delete(String stItemId) {
        Conditions conds = Conditions.newAndConditions();
        conds.add(new Condition("ST_ITEM_ID", Condition.OT_EQUAL, stItemId));
        delete(conds);
    }

    public PaginationArrayList<SelmItem> query(Conditions conds, String suffix, int pageSize, int currentPage) {
        RecordSet rs;
        if (con == null) {
            rs = SQL.query("SELM_ITEM", "*", conds, suffix, pageSize, currentPage);
        } else {
            rs = SQL.query(con, "SELM_ITEM", "*", conds, suffix, pageSize, currentPage);
        }
        PaginationArrayList<SelmItem> pal = new PaginationArrayList<SelmItem>(rs.TOTAL_RECORD_COUNT, rs.COMMON_PAGE_SIZE, rs.CURRENT_PAGE);
        while (rs.next()) {
            SelmItem info = new SelmItem();
            setProperties(info, rs);
            pal.add(info);
        }
        return pal;
    }
    
    public PaginationArrayList<SelmItem> selmTypeLinkList(Conditions conds, String suffix, int pageSize, int currentPage) {
    	RecordSet rs;
		String content = "SI.*";
		String table = "selm_item SI JOIN SELM_ITEM_LINK SIL ON SI.ST_ITEM_ID=SIL.ST_ITEM_ID";
		if (con == null) {
			rs = SQL.query(table, content, conds, suffix, pageSize,
					currentPage);
		} else {
			rs = SQL.query(con, table, content, conds, suffix,
					pageSize, currentPage);
		}
        PaginationArrayList<SelmItem> pal = new PaginationArrayList<SelmItem>(rs.TOTAL_RECORD_COUNT, rs.COMMON_PAGE_SIZE, rs.CURRENT_PAGE);
        while (rs.next()) {
            SelmItem info = new SelmItem();
            setProperties(info, rs);
            pal.add(info);
        }
        return pal;
    }

    public List<SelmItem> query(Conditions conds, String suffix) {
        RecordSet rs;
        if (con == null) {
            rs = SQL.query("SELM_ITEM", "*", conds, suffix);
        } else {
            rs = SQL.query(con, "SELM_ITEM", "*", conds, suffix);
        }
        ArrayList<SelmItem> al = new ArrayList<SelmItem>();
        while (rs.next()) {
            SelmItem info = new SelmItem();
            setProperties(info, rs);
            al.add(info);
        }
        return al;
    }
    
    public List<SelmItem> queryItemNo(Conditions conds, String suffix) {
        RecordSet rs;
        if (con == null) {
            rs = SQL.query("INFOPUB_DEVICE_INFO info join selm_device_item sdi ON info.ST_DEVICE_ID=sdi.ST_DEVICE_ID JOIN selm_item si ON sdi.ST_ITEM_ID=si.ST_ITEM_ID", "si.ST_ITEM_NO", conds, suffix);
        } else {
            rs = SQL.query(con, "INFOPUB_DEVICE_INFO info join selm_device_item sdi ON info.ST_DEVICE_ID=sdi.ST_DEVICE_ID JOIN selm_item si ON sdi.ST_ITEM_ID=si.ST_ITEM_ID", "si.ST_ITEM_NO", conds, suffix);
        }
        ArrayList<SelmItem> al = new ArrayList<SelmItem>();
        while (rs.next()) {
            SelmItem info = new SelmItem();
            setProperties(info, rs);
            al.add(info);
        }
        return al;
    }
    
    public static void setProperties(SelmItem info, RecordSet rs){
        info.setStItemId(rs.getOriginalString("ST_ITEM_ID"));
        info.setStItemNo(rs.getOriginalString("ST_ITEM_NO"));
        info.setStTenCode(rs.getOriginalString("ST_TEN_CODE"));
        info.setStMainName(rs.getOriginalString("ST_MAIN_NAME"));
        info.setStItemName(rs.getOriginalString("ST_ITEM_NAME"));
        info.setNmBelong(rs.getBigDecimal("NM_BELONG"));
        info.setStItemType(rs.getOriginalString("ST_ITEM_TYPE"));
        info.setStLegalTime(rs.getOriginalString("ST_LEGAL_TIME"));
        info.setStPromiseTime(rs.getOriginalString("ST_PROMISE_TIME"));
        info.setStOrganId(rs.getOriginalString("ST_ORGAN_ID"));
        info.setStWorkType(rs.getOriginalString("ST_WORK_TYPE"));
        info.setNmSort(rs.getBigDecimal("NM_SORT"));
        info.setStItemGuideId(rs.getOriginalString("ST_ITEM_GUIDE_ID"));
        info.setNmType(rs.getBigDecimal("NM_TYPE"));
        info.setStParentId(rs.getOriginalString("ST_PARENT_ID"));
        info.setNmShowType(rs.getBigDecimal("NM_SHOW_TYPE"));
        info.setStWorkUrl(rs.getOriginalString("ST_WORK_URL"));
        info.setDtCreate(rs.getTimestamp("DT_CREATE"));
        info.setDtUpdate(rs.getTimestamp("DT_UPDATE"));
        info.setStExt1(rs.getOriginalString("ST_EXT1"));
        info.setStExt2(rs.getOriginalString("ST_EXT2"));
        info.setStExt3(rs.getOriginalString("ST_EXT3"));
        info.setStExt4(rs.getOriginalString("ST_EXT4"));
        info.setStState(rs.getBigDecimal("ST_STATE"));
    }

	public SelmItem get(String stItemId) {
        Conditions conds = Conditions.newAndConditions();
        conds.add(new Condition("ST_ITEM_ID", Condition.OT_EQUAL, stItemId));
        List<SelmItem> list = query(conds, null);
        return list.size() > 0 ? list.get(0) : null;
    }
	
	public SelmItem getByName(String stItemName) {
        Conditions conds = Conditions.newAndConditions();
        conds.add(new Condition("ST_MAIN_NAME", Condition.OT_LIKE, stItemName));
        List<SelmItem> list = query(conds, null);
        return list.size() > 0 ? list.get(0) : null;
    }
	
	/**
	 * 获取事项以及和是想有关的信息
	 * @param conds
	 * @param suffix
	 * @param pageSize
	 * @param currentPage
	 * @return
	 */ 
    public List<SelmItem> queryItemWithDetail(Conditions conds, String suffix) {
        RecordSet rs;
        if (con == null) {
            rs = SQL.query("SELM_ITEM si LEFT JOIN SMS_ORGAN so ON si.ST_ORGAN_ID=so.ST_ORGAN_ID", "si.*,so.ST_ORGAN_NAME", conds, suffix);
        } else {
            rs = SQL.query(con, "SELM_ITEM si LEFT JOIN SMS_ORGAN so ON si.ST_ORGAN_ID=so.ST_ORGAN_ID", "si.*,so.ST_ORGAN_NAME", conds, suffix);
        }
        ArrayList<SelmItem> al = new ArrayList<SelmItem>();
        while (rs.next()) {
            SelmItem info = new SelmItem();
            setProperties(info, rs);
            info.setStOrganId(rs.getOriginalString("ST_ORGAN_NAME"));
            al.add(info);
           /* info.setStItemId(rs.getOriginalString("ST_ITEM_ID"));
            info.setStItemNo(rs.getOriginalString("ST_ITEM_NO"));
            info.setStMainName(rs.getOriginalString("ST_MAIN_NAME"));
            al.add(info);*/
        }
        return al;
    }

	public List<String> getByDevice(Conditions conds, String suffix) {
		RecordSet rs;
		String content = "si.ST_EXT3 s3";
		String table = "selm_item si join selm_device_item sdi on si.ST_ITEM_ID = sdi.ST_ITEM_ID "+
					   "join infopub_device_info idi on sdi.ST_DEVICE_ID = idi.ST_DEVICE_ID";
        if (con == null) {
            rs = SQL.query(table, content, conds, suffix);
        } else {
            rs = SQL.query(con, table, content, conds, suffix);
        }
        ArrayList<String> al = new ArrayList<String>();
        while (rs.next()) {
        	al.add(rs.getOriginalString("s3"));
        }
        return al;
		
	}
    

}