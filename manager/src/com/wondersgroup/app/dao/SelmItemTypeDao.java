package com.wondersgroup.app.dao;

import java.math.*;
import java.sql.*;
import java.util.*;
import wfc.facility.tool.autocode.*;
import wfc.service.database.*;
import org.springframework.stereotype.Repository;

import com.wondersgroup.app.bean.SelmItemType;

/**
 * 事项类别
 * @author generated by wfc.facility.tool.autocode.InternalDaoGenerator
 */
@Repository
public class SelmItemTypeDao {

    private Connection con = null;

    public SelmItemTypeDao() {
    }

    public SelmItemTypeDao(Connection con) {
        this.con = con;
    }

    public void add(SelmItemType info) {
        String sql = "insert into SELM_ITEM_TYPE(ST_ITEM_TYPE_ID, ST_ITEM_TYPE_NAME, NM_SORT, ST_PARENT_ID, DT_CREATE, DT_UPDATE, ST_EXT1, ST_EXT2) values (?, ?, ?, ?, ?, ?, ?, ?)";
        Object[] obj = {
            info.getStItemTypeId(),
            info.getStItemTypeName(),
            info.getNmSort(),
            info.getStParentId(),
            info.getDtCreate(),
            info.getDtUpdate(),
            info.getStExt1(),
            info.getStExt2()        	
        };
        if (con == null) {
            SQL.execute(sql, obj);
        } else {
            SQL.execute(con, sql, obj);
        }
    }

    public void update(SelmItemType info) {
        String sql = "update SELM_ITEM_TYPE set ST_ITEM_TYPE_NAME = ?, NM_SORT = ?, ST_PARENT_ID = ?, DT_CREATE = ?, DT_UPDATE = ?, ST_EXT1 = ?, ST_EXT2 = ? where ST_ITEM_TYPE_ID = ?";
        Object[] obj = {
            info.getStItemTypeName(),
            info.getNmSort(),
            info.getStParentId(),
            info.getDtCreate(),
            info.getDtUpdate(),
            info.getStExt1(),
            info.getStExt2(),
            info.getStItemTypeId()        	
        };
        if (con == null) {
            SQL.execute(sql, obj);
        } else {
            SQL.execute(con, sql, obj);
        }
    }

    public int update(Map<String, Object> map, Conditions conds) {
        String sql = "update SELM_ITEM_TYPE set ";
        List<Object> list = new ArrayList<Object>();
        int i = 0;
        for (String field : map.keySet()) {
            if (i++ > 0) {
                sql += ", ";
            }
            sql += field + " = ?";
            list.add(map.get(field));
        }
        String subsql = conds != null ? conds.toString() : "";
        if ("".equals(subsql)) {
            if (con == null) {
                return SQL.execute(sql).TOTAL_RECORD_COUNT;
            } else {
                return SQL.execute(con, sql).TOTAL_RECORD_COUNT;
            }
        } else {
            sql += " where " + subsql;
            list.addAll(conds.getObjectList());
            if (con == null) {
                return SQL.execute(sql, list.toArray()).TOTAL_RECORD_COUNT;
            } else {
                return SQL.execute(con, sql, list.toArray()).TOTAL_RECORD_COUNT;
            }
        }
    }
    
    public int delete(Conditions conds) {
        String sql = "delete from SELM_ITEM_TYPE";
        String subsql = conds != null ? conds.toString() : "";
        if ("".equals(subsql)) {
            if (con == null) {
                return SQL.execute(sql).TOTAL_RECORD_COUNT;
            } else {
                return SQL.execute(con, sql).TOTAL_RECORD_COUNT;
            }
        } else {
            sql += " where " + subsql;
            if (con == null) {
                return SQL.execute(sql, conds.getObjectArray()).TOTAL_RECORD_COUNT;
            } else {
                return SQL.execute(con, sql, conds.getObjectArray()).TOTAL_RECORD_COUNT;
            }
        }
    }

	public void delete(String[] stItemTypeId) {
        Conditions conds = Conditions.newOrConditions();
        for (int i = 0; i < stItemTypeId.length; i++) {
            Conditions subconds = Conditions.newAndConditions();
            subconds.add(new Condition("ST_ITEM_TYPE_ID", Condition.OT_EQUAL, stItemTypeId[i]));
            conds.add(subconds);
        }
        delete(conds);
    }

	public void delete(String stItemTypeId) {
        Conditions conds = Conditions.newAndConditions();
        conds.add(new Condition("ST_ITEM_TYPE_ID", Condition.OT_EQUAL, stItemTypeId));
        delete(conds);
    }

    public PaginationArrayList<SelmItemType> query(Conditions conds, String suffix, int pageSize, int currentPage) {
        RecordSet rs;
        if (con == null) {
            rs = SQL.query("SELM_ITEM_TYPE", "*", conds, suffix, pageSize, currentPage);
        } else {
            rs = SQL.query(con, "SELM_ITEM_TYPE", "*", conds, suffix, pageSize, currentPage);
        }
        PaginationArrayList<SelmItemType> pal = new PaginationArrayList<SelmItemType>(rs.TOTAL_RECORD_COUNT, rs.COMMON_PAGE_SIZE, rs.CURRENT_PAGE);
        while (rs.next()) {
            SelmItemType info = new SelmItemType();
            setProperties(info, rs);
            pal.add(info);
        }
        return pal;
    }

    public List<SelmItemType> query(Conditions conds, String suffix) {
        RecordSet rs;
        if (con == null) {
            rs = SQL.query("SELM_ITEM_TYPE", "*", conds, suffix);
        } else {
            rs = SQL.query(con, "SELM_ITEM_TYPE", "*", conds, suffix);
        }
        ArrayList<SelmItemType> al = new ArrayList<SelmItemType>();
        while (rs.next()) {
            SelmItemType info = new SelmItemType();
            setProperties(info, rs);
            al.add(info);
        }
        return al;
    }
    
    public static void setProperties(SelmItemType info, RecordSet rs){
        info.setStItemTypeId(rs.getOriginalString("ST_ITEM_TYPE_ID"));
        info.setStItemTypeName(rs.getOriginalString("ST_ITEM_TYPE_NAME"));
        info.setNmSort(rs.getBigDecimal("NM_SORT"));
        info.setStParentId(rs.getOriginalString("ST_PARENT_ID"));
        info.setDtCreate(rs.getTimestamp("DT_CREATE"));
        info.setDtUpdate(rs.getTimestamp("DT_UPDATE"));
        info.setStExt1(rs.getOriginalString("ST_EXT1"));
        info.setStExt2(rs.getOriginalString("ST_EXT2"));
    }

	public SelmItemType get(String stItemTypeId) {
        Conditions conds = Conditions.newAndConditions();
        conds.add(new Condition("ST_ITEM_TYPE_ID", Condition.OT_EQUAL, stItemTypeId));
        List<SelmItemType> list = query(conds, null);
        return list.size() > 0 ? list.get(0) : null;
    }

	public SelmItemType getByName(String stItemTypeName) {
		 Conditions conds = Conditions.newAndConditions();
        conds.add(new Condition("ST_ITEM_TYPE_NAME", Condition.OT_EQUAL, stItemTypeName));
        List<SelmItemType> list = query(conds, null);
        return list.size() > 0 ? list.get(0) : null;
		
	}

}
