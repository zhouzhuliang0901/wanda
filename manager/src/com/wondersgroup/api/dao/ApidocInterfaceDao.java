package com.wondersgroup.api.dao;

import java.sql.Connection;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import org.springframework.stereotype.Repository;

import wfc.facility.tool.autocode.PaginationArrayList;
import wfc.service.database.Condition;
import wfc.service.database.Conditions;
import wfc.service.database.RecordSet;
import wfc.service.database.SQL;

import com.wondersgroup.api.bean.ApidocInterface;

/**
 * 接口
 * @author generated by wfc.facility.tool.autocode.InternalDaoGenerator
 */
@Repository
public class ApidocInterfaceDao {

    private Connection con = null;

    public ApidocInterfaceDao() {
    }

    public ApidocInterfaceDao(Connection con) {
        this.con = con;
    }

    public void add(ApidocInterface info) {
        String sql = "insert into APIDOC_INTERFACE(ST_INTERFACE_ID, ST_INTERFACE_NAME, ST_URL, CL_REMARK, ST_METHOD, CL_REQUEST_PARAM, CL_REQUEST_EXAM, CL_RESPONSE_PARAM, CL_RESPONSE_EXAM, ST_MODULE_ID, NM_STATUS, NM_ORDER, DT_CREATE, DT_UPDATE, NM_VERSION, ST_EXT1, ST_EXT2) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        Object[] obj = {
            info.getStInterfaceId(),
            info.getStInterfaceName(),
            info.getStUrl(),
            info.getClRemark(),
            info.getStMethod(),
            info.getClRequestParam(),
            info.getClRequestExam(),
            info.getClResponseParam(),
            info.getClResponseExam(),
            info.getStModuleId(),
            info.getNmStatus(),
            info.getNmOrder(),
            info.getDtCreate(),
            info.getDtUpdate(),
            info.getNmVersion(),
            info.getStExt1(),
            info.getStExt2()        	
        };
        if (con == null) {
            SQL.execute(sql, obj);
        } else {
            SQL.execute(con, sql, obj);
        }
    }

    public void update(ApidocInterface info) {
        String sql = "update APIDOC_INTERFACE set ST_INTERFACE_NAME = ?, ST_URL = ?, CL_REMARK = ?, ST_METHOD = ?, CL_REQUEST_PARAM = ?,CL_REQUEST_EXAM = ?,CL_RESPONSE_PARAM = ?,CL_RESPONSE_EXAM = ?,ST_MODULE_ID = ?, NM_STATUS = ?, NM_ORDER = ?, DT_CREATE = ?, DT_UPDATE = ?, NM_VERSION = ?, ST_EXT1 = ?, ST_EXT2 = ? where ST_INTERFACE_ID = ?";
        Object[] obj = {
            info.getStInterfaceName(),
            info.getStUrl(),
            info.getClRemark(),
            info.getStMethod(),
            info.getClRequestParam(),
            info.getClRequestExam(),
            info.getClResponseParam(),
            info.getClResponseExam(),
            info.getStModuleId(),
            info.getNmStatus(),
            info.getNmOrder(),
            info.getDtCreate(),
            info.getDtUpdate(),
            info.getNmVersion(),
            info.getStExt1(),
            info.getStExt2(),
            info.getStInterfaceId()        	
        };
        if (con == null) {
            SQL.execute(sql, obj);
        } else {
            SQL.execute(con, sql, obj);
        }
    }

    public int update(Map<String, Object> map, Conditions conds) {
        String sql = "update APIDOC_INTERFACE set ";
        List<Object> list = new ArrayList<Object>();
        int i = 0;
        for (String field : map.keySet()) {
            if (i++ > 0) {
                sql += ", ";
            }
            sql += field + " = ?";
            list.add(map.get(field));
        }
        String subsql = conds != null ? conds.toString() : "";
        if ("".equals(subsql)) {
            if (con == null) {
                return SQL.execute(sql).TOTAL_RECORD_COUNT;
            } else {
                return SQL.execute(con, sql).TOTAL_RECORD_COUNT;
            }
        } else {
            sql += " where " + subsql;
            list.addAll(conds.getObjectList());
            if (con == null) {
                return SQL.execute(sql, list.toArray()).TOTAL_RECORD_COUNT;
            } else {
                return SQL.execute(con, sql, list.toArray()).TOTAL_RECORD_COUNT;
            }
        }
    }
    
    public int delete(Conditions conds) {
        String sql = "delete from APIDOC_INTERFACE";
        String subsql = conds != null ? conds.toString() : "";
        if ("".equals(subsql)) {
            if (con == null) {
                return SQL.execute(sql).TOTAL_RECORD_COUNT;
            } else {
                return SQL.execute(con, sql).TOTAL_RECORD_COUNT;
            }
        } else {
            sql += " where " + subsql;
            if (con == null) {
                return SQL.execute(sql, conds.getObjectArray()).TOTAL_RECORD_COUNT;
            } else {
                return SQL.execute(con, sql, conds.getObjectArray()).TOTAL_RECORD_COUNT;
            }
        }
    }

	public void delete(String[] stInterfaceId) {
        Conditions conds = Conditions.newOrConditions();
        for (int i = 0; i < stInterfaceId.length; i++) {
            Conditions subconds = Conditions.newAndConditions();
            subconds.add(new Condition("ST_INTERFACE_ID", Condition.OT_EQUAL, stInterfaceId[i]));
            conds.add(subconds);
        }
        delete(conds);
    }

	public void delete(String stInterfaceId) {
        Conditions conds = Conditions.newAndConditions();
        conds.add(new Condition("ST_INTERFACE_ID", Condition.OT_EQUAL, stInterfaceId));
        delete(conds);
    }

    public PaginationArrayList<ApidocInterface> query(Conditions conds, String suffix, int pageSize, int currentPage) {
        RecordSet rs;
        if (con == null) {
            rs = SQL.query("APIDOC_INTERFACE", "*", conds, suffix, pageSize, currentPage);
        } else {
            rs = SQL.query(con, "APIDOC_INTERFACE", "*", conds, suffix, pageSize, currentPage);
        }
        PaginationArrayList<ApidocInterface> pal = new PaginationArrayList<ApidocInterface>(rs.TOTAL_RECORD_COUNT, rs.COMMON_PAGE_SIZE, rs.CURRENT_PAGE);
        while (rs.next()) {
            ApidocInterface info = new ApidocInterface();
            setProperties(info, rs);
            pal.add(info);
        }
        return pal;
    }

    public List<ApidocInterface> query(Conditions conds, String suffix) {
        RecordSet rs;
        if (con == null) {
            rs = SQL.query("APIDOC_INTERFACE", "*", conds, suffix);
        } else {
            rs = SQL.query(con, "APIDOC_INTERFACE", "*", conds, suffix);
        }
        ArrayList<ApidocInterface> al = new ArrayList<ApidocInterface>();
        while (rs.next()) {
            ApidocInterface info = new ApidocInterface();
            setProperties(info, rs);
            al.add(info);
        }
        return al;
    }
    
    public static void setProperties(ApidocInterface info, RecordSet rs){
        info.setStInterfaceId(rs.getOriginalString("ST_INTERFACE_ID"));
        info.setStInterfaceName(rs.getOriginalString("ST_INTERFACE_NAME"));
        info.setStUrl(rs.getOriginalString("ST_URL"));
        info.setClRemark(rs.getOriginalString("CL_REMARK"));
        info.setStMethod(rs.getOriginalString("ST_METHOD"));
        info.setClRequestParam(rs.getOriginalString("CL_REQUEST_PARAM"));
        info.setClRequestExam(rs.getOriginalString("CL_REQUEST_EXAM"));
        info.setClResponseParam(rs.getOriginalString("CL_RESPONSE_PARAM"));
        info.setClResponseExam(rs.getOriginalString("CL_RESPONSE_EXAM"));
        info.setStModuleId(rs.getOriginalString("ST_MODULE_ID"));
        info.setNmStatus(rs.getBigDecimal("NM_STATUS"));
        info.setNmOrder(rs.getBigDecimal("NM_ORDER"));
        info.setDtCreate(rs.getTimestamp("DT_CREATE"));
        info.setDtUpdate(rs.getTimestamp("DT_UPDATE"));
        info.setNmVersion(rs.getBigDecimal("NM_VERSION"));
        info.setStExt1(rs.getOriginalString("ST_EXT1"));
        info.setStExt2(rs.getOriginalString("ST_EXT2"));
    }

	public ApidocInterface get(String stInterfaceId) {
        Conditions conds = Conditions.newAndConditions();
        conds.add(new Condition("ST_INTERFACE_ID", Condition.OT_EQUAL, stInterfaceId));
        List<ApidocInterface> list = query(conds, null);
        return list.size() > 0 ? list.get(0) : null;
    }
	
	/**
	 * 获取接口和其所在模块
	 * 
	 * @param stInterfaceId
	 * @return
	 */
	 public List<ApidocInterface> queryInterfaceAndLink(Conditions conds, String suffix) {
		 String sql = "select a.ST_INTERFACE_ID,a.ST_INTERFACE_NAME,a.ST_URL,a.CL_REMARK,a.ST_METHOD,a.CL_REQUEST_PARAM,a.CL_REQUEST_EXAM,a.CL_RESPONSE_PARAM,a.CL_RESPONSE_EXAM,a.ST_MODULE_ID,a.NM_ORDER,c.ST_MODULE_NAME as ST_EXT1 "+ 
				 	"from APIDOC_INTERFACE a left join APIDOC_MOD_INTER b " +
				 	"on a.ST_INTERFACE_ID = b.ST_INTERFACE_ID " +
				 	"left join APIDOC_MODULE c " +
				 	"on b.ST_MODULE_ID = c.ST_MODULE_ID";
		 String subsql = conds != null ? conds.toString() : "";
		 suffix = suffix != null ? conds.toString() : "";
		 RecordSet rs;
		 if ("".equals(subsql)) {
			 sql += suffix;
	         if (con == null) {
	            rs = SQL.execute(sql);
	         } else {
	            rs = SQL.execute(con, sql);
	         }
	     } else {
	         sql += " where " + subsql + " " + suffix;
	         if (con == null) {
	            rs = SQL.execute(sql, conds.getObjectArray());
	         } else {
	            rs =  SQL.execute(con, sql, conds.getObjectArray());
	         }
	     }
		 ArrayList<ApidocInterface> al = new ArrayList<ApidocInterface>();
         while (rs.next()) {
            ApidocInterface info = new ApidocInterface();
            setProperties(info, rs);
            al.add(info);
         }
         return al;
	 }
	/**
	 * 根据模块Id查询该模块下的所有接口列表
	 * 
	 * @param stModuleId
	 * @return
	 */
	public List<ApidocInterface> queryInterfaceByLink(String stModuleId) {
		String sql = "SELECT c.* from APIDOC_MODULE a " + 
					"LEFT JOIN APIDOC_MOD_INTER b " +
					"on a.ST_MODULE_ID = b.ST_MODULE_ID " +
					"RIGHT JOIN APIDOC_INTERFACE c " +
					"on b.ST_INTERFACE_ID = c.ST_INTERFACE_ID " +
					"where a.ST_MODULE_ID = ? order by c.NM_ORDER ";
		RecordSet rs; 
		List<ApidocInterface> al = new ArrayList<ApidocInterface>();
		if (con == null) {
				rs = SQL.execute(sql,new Object[]{ stModuleId });
	        } else {
	        	rs = SQL.execute(con, sql,new Object[]{ stModuleId });
	        }
		while (rs.next()) {
            ApidocInterface info = new ApidocInterface();
            setProperties(info, rs);
            al.add(info);
        }
        return al;
	 }
	 
}
