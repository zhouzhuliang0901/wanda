package com.wondersgroup.business.dao;

import java.math.*;
import java.sql.*;
import java.util.*;

import org.springframework.transaction.annotation.*;

import wfc.facility.tool.autocode.*;
import wfc.service.database.*;

import net.sf.json.JSONArray;
import net.sf.json.JSONObject;

import org.springframework.stereotype.Repository;

import coral.base.util.AciHelper;

import com.wondersgroup.business.bean.SelmAttach;
import com.wondersgroup.business.bean.SelmQueryHis;
import com.wondersgroup.business.excelBean.SelmQueryHisExcel;
import com.wondersgroup.infopub.bean.InfopubDeviceInfoExt;


/**
 * 工作台模块使用历史记录
 * @author generated by wfc.facility.tool.autocode.InternalDaoGenerator
 */
@Repository
public class SelmQueryHisDao {

    private Connection con = null;

    public SelmQueryHisDao() {
    }

    public SelmQueryHisDao(Connection con) {
        this.con = con;
    }

    public void add(SelmQueryHis info) {
        String sql = "insert into SELM_QUERY_HIS(ST_QUERY_HIS_ID, ST_MACHINE_ID,ST_ASSIST_ID, ST_MODULE_NAME, ST_MODULE_OP, ST_NAME, ST_IDENTITY_NO, ST_MOBILE, DT_CREATE, ST_ATTACH_ID1, ST_ATTACH_ID2, ST_ATTACH_ID3, ST_ATTACH_ID4, ST_EXT1, ST_EXT2, ST_EXT3, ST_EXT4, ST_EXT5, ST_ITEM_NAME, ST_BUSINESS_NO, ST_SUBMIT_DATA_ID, ST_DESC, ST_OP_RESULT) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        Object[] obj = {
            info.getStQueryHisId(),
            info.getStMachineId(),
            info.getStAssistId(),
            info.getStModuleName(),
            info.getStModuleOp(),
            info.getStName(),
            info.getStIdentityNo(),
            info.getStMobile(),
            info.getDtCreate(),
            info.getStAttachId1(),
            info.getStAttachId2(),
            info.getStAttachId3(),
            info.getStAttachId4(),
            info.getStExt1(),
            info.getStExt2(),
            info.getStExt3(),
            info.getStExt4(),
            info.getStExt5(),
            info.getStItemName(),
            info.getStBusinessNo(),
            info.getStSubmitDataId(),
            info.getStDesc(),
            info.getStOpResult()        	
        };
        if (con == null) {
            SQL.execute(sql, obj);
        } else {
            SQL.execute(con, sql, obj);
        }
    }

    public void update(SelmQueryHis info) {
        String sql = "update SELM_QUERY_HIS set ST_MACHINE_ID = ?, ST_ASSIST_ID = ?,ST_MODULE_NAME = ?, ST_MODULE_OP = ?, ST_NAME = ?, ST_IDENTITY_NO = ?, ST_MOBILE = ?, DT_CREATE = ?, ST_ATTACH_ID1 = ?, ST_ATTACH_ID2 = ?, ST_ATTACH_ID3 = ?, ST_ATTACH_ID4 = ?, ST_EXT1 = ?, ST_EXT2 = ?, ST_EXT3 = ?, ST_EXT4 = ?, ST_EXT5 = ?, ST_ITEM_NAME = ?, ST_BUSINESS_NO = ?, ST_SUBMIT_DATA_ID = ?, ST_DESC = ?, ST_OP_RESULT = ?,ST_ITEM_NO = ? where ST_QUERY_HIS_ID = ?";
        Object[] obj = {
            info.getStMachineId(),
            info.getStAssistId(),
            info.getStModuleName(),
            info.getStModuleOp(),
            info.getStName(),
            info.getStIdentityNo(),
            info.getStMobile(),
            info.getDtCreate(),
            info.getStAttachId1(),
            info.getStAttachId2(),
            info.getStAttachId3(),
            info.getStAttachId4(),
            info.getStExt1(),
            info.getStExt2(),
            info.getStExt3(),
            info.getStExt4(),
            info.getStExt5(),
            info.getStItemName(),
            info.getStBusinessNo(),
            info.getStSubmitDataId(),
            info.getStDesc(),
            info.getStOpResult(),
            info.getStItemNo(),
            info.getStQueryHisId()        	
        };
        if (con == null) {
            SQL.execute(sql, obj);
        } else {
            SQL.execute(con, sql, obj);
        }
    }

    public int update(Map<String, Object> map, Conditions conds) {
        String sql = "update SELM_QUERY_HIS set ";
        List<Object> list = new ArrayList<Object>();
        int i = 0;
        for (String field : map.keySet()) {
            if (i++ > 0) {
                sql += ", ";
            }
            sql += field + " = ?";
            list.add(map.get(field));
        }
        String subsql = conds != null ? conds.toString() : "";
        if ("".equals(subsql)) {
            if (con == null) {
                return SQL.execute(sql).TOTAL_RECORD_COUNT;
            } else {
                return SQL.execute(con, sql).TOTAL_RECORD_COUNT;
            }
        } else {
            sql += " where " + subsql;
            list.addAll(conds.getObjectList());
            if (con == null) {
                return SQL.execute(sql, list.toArray()).TOTAL_RECORD_COUNT;
            } else {
                return SQL.execute(con, sql, list.toArray()).TOTAL_RECORD_COUNT;
            }
        }
    }
    
    public int delete(Conditions conds) {
        String sql = "delete from SELM_QUERY_HIS";
        String subsql = conds != null ? conds.toString() : "";
        if ("".equals(subsql)) {
            if (con == null) {
                return SQL.execute(sql).TOTAL_RECORD_COUNT;
            } else {
                return SQL.execute(con, sql).TOTAL_RECORD_COUNT;
            }
        } else {
            sql += " where " + subsql;
            if (con == null) {
                return SQL.execute(sql, conds.getObjectArray()).TOTAL_RECORD_COUNT;
            } else {
                return SQL.execute(con, sql, conds.getObjectArray()).TOTAL_RECORD_COUNT;
            }
        }
    }

	public void delete(String[] stQueryHisId) {
        Conditions conds = Conditions.newOrConditions();
        for (int i = 0; i < stQueryHisId.length; i++) {
            Conditions subconds = Conditions.newAndConditions();
            subconds.add(new Condition("ST_QUERY_HIS_ID", Condition.OT_EQUAL, stQueryHisId[i]));
            conds.add(subconds);
        }
        delete(conds);
    }

	public void delete(String stQueryHisId) {
        Conditions conds = Conditions.newAndConditions();
        conds.add(new Condition("ST_QUERY_HIS_ID", Condition.OT_EQUAL, stQueryHisId));
        delete(conds);
    }

    public PaginationArrayList<SelmQueryHis> query(Conditions conds, String suffix, int pageSize, int currentPage) {
        RecordSet rs;
        if (con == null) {
            rs = SQL.query("SELM_QUERY_HIS", "*", conds, suffix, pageSize, currentPage);
        } else {
            rs = SQL.query(con, "SELM_QUERY_HIS", "*", conds, suffix, pageSize, currentPage);
        }
        PaginationArrayList<SelmQueryHis> pal = new PaginationArrayList<SelmQueryHis>(rs.TOTAL_RECORD_COUNT, rs.COMMON_PAGE_SIZE, rs.CURRENT_PAGE);
        while (rs.next()) {
            SelmQueryHis info = new SelmQueryHis();
            setProperties(info, rs);
            pal.add(info);
        }
        return pal;
    }

    public List<SelmQueryHis> query(Conditions conds, String suffix) {
        RecordSet rs;
        ArrayList<SelmQueryHis> al = new ArrayList<SelmQueryHis>();;
		List<String> tables = AciHelper.getTables("SELM_QUERY_HIS");
		for(String t : tables){
			if (con == null) {
	            rs = SQL.query(t, "*", conds, suffix);
	        } else {
	            rs = SQL.query(con, t, "*", conds, suffix);
	        }
	        while (rs.next()) {
	            SelmQueryHis info = new SelmQueryHis();
	            setProperties(info, rs);
	            al.add(info);
	        }
		}
        return al;
    }
    
    public int  queryleadCount(Conditions conds, String suffix) {
        RecordSet rs;
        int cont = 0;
        String t = "(select ST_QUERY_HIS_ID,ST_MACHINE_ID,DT_CREATE from SELM_QUERY_HIS "+ 
        			"union all "+
        			"select ST_QUERY_HIS_ID,ST_MACHINE_ID,DT_CREATE from selm_query_his_2022)sqh";
    	if (con == null) {
            rs = SQL.query(t, "COUNT(sqh.ST_QUERY_HIS_ID) cont", conds, suffix);
        } else {
            rs = SQL.query(con, t, "COUNT(sqh.ST_QUERY_HIS_ID) cont", conds, suffix);
        }
        
		while (rs.next()) {
			BigDecimal bigDecimal = rs.getBigDecimal("cont");
			cont = bigDecimal.intValue();
		}
		return cont;
    }
    
    
    public List<SelmQueryHis> queryModule(Conditions conds, String suffix) {
        RecordSet rs;
        if (con == null) {
            rs = SQL.query("SELM_QUERY_HIS", "ST_MODULE_OP,count(ST_MODULE_OP) as number", conds, suffix);
        } else {
            rs = SQL.query(con, "SELM_QUERY_HIS", "ST_MODULE_OP,count(ST_MODULE_OP) as number", conds, suffix);
        }
        ArrayList<SelmQueryHis> al = new ArrayList<SelmQueryHis>();
        while (rs.next()) {
            SelmQueryHis info = new SelmQueryHis();
            BigDecimal bigDecimal = rs.getBigDecimal("number");
            setProperties(info, rs);
            info.setStDesc(bigDecimal.toString());
            al.add(info);
        }
        return al;
    }
    
    public List<SelmQueryHis> queryRate(Conditions conds, String suffix) {
        RecordSet rs;
        if (con == null) {
            rs = SQL.query("SELM_QUERY_HIS", "ST_ITEM_NAME,count(ST_ITEM_NAME) as number", conds, suffix);
        } else {
            rs = SQL.query(con, "SELM_QUERY_HIS", "ST_ITEM_NAME,count(ST_ITEM_NAME) as number", conds, suffix);
        }
        ArrayList<SelmQueryHis> al = new ArrayList<SelmQueryHis>();
        while (rs.next()) {
            SelmQueryHis info = new SelmQueryHis();
            BigDecimal bigDecimal = rs.getBigDecimal("number");
            setProperties(info, rs);
            info.setStDesc(bigDecimal.toString());
            al.add(info);
        }
        return al;
    }
    
    public List<SelmQueryHis> queryRate1(Conditions conds, String suffix) {
        RecordSet rs;
        if (con == null) {
            rs = SQL.query("SELM_QUERY_HIS", "DT_CREATE", conds, suffix);
        } else {
            rs = SQL.query(con, "SELM_QUERY_HIS", "DT_CREATE", conds, suffix);
        }
        ArrayList<SelmQueryHis> al = new ArrayList<SelmQueryHis>();
        while (rs.next()) {
            SelmQueryHis info = new SelmQueryHis();
            setProperties(info, rs);
            al.add(info);
        }
        return al;
    }
    
    public static void setProperties(SelmQueryHis info, RecordSet rs){
        info.setStQueryHisId(rs.getOriginalString("ST_QUERY_HIS_ID"));
        info.setStMachineId(rs.getOriginalString("ST_MACHINE_ID"));
        info.setStAssistId(rs.getOriginalString("ST_ASSIST_ID"));
        info.setStModuleName(rs.getOriginalString("ST_MODULE_NAME"));
        info.setStModuleOp(rs.getOriginalString("ST_MODULE_OP"));
        info.setStName(rs.getOriginalString("ST_NAME"));
        info.setStIdentityNo(rs.getOriginalString("ST_IDENTITY_NO"));
        info.setStMobile(rs.getOriginalString("ST_MOBILE"));
        info.setDtCreate(rs.getTimestamp("DT_CREATE"));
        info.setStAttachId1(rs.getOriginalString("ST_ATTACH_ID1"));
        info.setStAttachId2(rs.getOriginalString("ST_ATTACH_ID2"));
        info.setStAttachId3(rs.getOriginalString("ST_ATTACH_ID3"));
        info.setStAttachId4(rs.getOriginalString("ST_ATTACH_ID4"));
        info.setStExt1(rs.getOriginalString("ST_EXT1"));
        info.setStExt2(rs.getOriginalString("ST_EXT2"));
        info.setStExt3(rs.getOriginalString("ST_EXT3"));
        info.setStExt4(rs.getOriginalString("ST_EXT4"));
        info.setStExt5(rs.getOriginalString("ST_EXT5"));
        info.setStItemName(rs.getOriginalString("ST_ITEM_NAME"));
        info.setStBusinessNo(rs.getOriginalString("ST_BUSINESS_NO"));
        info.setStSubmitDataId(rs.getOriginalString("ST_SUBMIT_DATA_ID"));
        info.setStDesc(rs.getOriginalString("ST_DESC"));
        info.setStItemNo(rs.getOriginalString("ST_ITEM_NO"));
        String result = rs.getOriginalString("ST_OP_RESULT");
        if (result != null) {
        	if(result.equals("SUCCESS")){
            	info.setStOpResult("成功");
            }else {
            	info.setStOpResult("失败");
    		}
		}else {
			info.setStOpResult(result);
		}
        
        
    }

	public SelmQueryHis get(String stQueryHisId) {
		Conditions conds = Conditions.newAndConditions();
        conds.add(new Condition("ST_QUERY_HIS_ID", Condition.OT_EQUAL, stQueryHisId));
        List<SelmQueryHis> list = query(conds, null);
        return list.size() > 0 ? list.get(0) : null;
    }
	
	
	
	 
	 public static void setProperties(SelmQueryHisExcel info, RecordSet rs){
	        info.setStQueryHisId(rs.getOriginalString("ST_QUERY_HIS_ID"));
	        info.setStMachineId(rs.getOriginalString("ST_MACHINE_ID"));
	        info.setStModuleName(rs.getOriginalString("ST_MODULE_NAME"));
	        info.setStModuleOp(rs.getOriginalString("ST_MODULE_OP"));
	        info.setStName(rs.getOriginalString("ST_NAME"));
	        info.setStIdentityNo(rs.getOriginalString("ST_IDENTITY_NO"));
	        info.setStMobile(rs.getOriginalString("ST_MOBILE"));
	        info.setDtCreate(rs.getTimestamp("DT_CREATE"));
	        info.setStAttachId1(rs.getOriginalString("ST_ATTACH_ID1"));
	        info.setStAttachId2(rs.getOriginalString("ST_ATTACH_ID2"));
	        info.setStAttachId3(rs.getOriginalString("ST_ATTACH_ID3"));
	        info.setStAttachId4(rs.getOriginalString("ST_ATTACH_ID4"));
	        info.setStExt1(rs.getOriginalString("ST_EXT1"));
	        info.setStExt2(rs.getOriginalString("ST_EXT2"));
	        info.setStExt3(rs.getOriginalString("ST_EXT3"));
	        info.setStExt4(rs.getOriginalString("ST_EXT4"));
	        info.setStExt5(rs.getOriginalString("ST_EXT5"));
	        info.setStItemName(rs.getOriginalString("ST_ITEM_NAME"));
	        info.setStBusinessNo(rs.getOriginalString("ST_BUSINESS_NO"));
	        info.setStSubmitDataId(rs.getOriginalString("ST_SUBMIT_DATA_ID"));
	        info.setStDesc(rs.getOriginalString("ST_DESC"));
	        String result = rs.getOriginalString("ST_OP_RESULT");
	        if (result != null) {
	        	if(result.equals("SUCCESS")){
	            	info.setStOpResult("成功");
	            }else {
	            	info.setStOpResult("失败");
	    		}
			}else {
				info.setStOpResult(result);
			}
	    }

	 public int getAreaSelmQuery(String stDeviceId,String startTime,String endTime) {
		 String sql = null;
		 if(startTime==null && endTime==null){
			
			 sql = "SELECT ST_MACHINE_ID,COUNT(ST_MACHINE_ID) cont from selm_query_his WHERE ST_MACHINE_ID =? GROUP BY ST_MACHINE_ID";
			 Object[] obj ={ stDeviceId};
			 RecordSet rs;
		        if (con == null) {
		            rs = SQL.execute(sql,obj);
		        } else {
		            rs = SQL.execute(con, sql,obj);
		        }
		        int cont = 0;
				while (rs.next()) {
					BigDecimal bigDecimal = rs.getBigDecimal("cont");
					cont = bigDecimal.intValue();
				}
				return cont;
		 }else{
			 if(endTime==null){
				 sql ="SELECT ST_MACHINE_ID,COUNT(ST_MACHINE_ID) cont from selm_query_his WHERE ST_MACHINE_ID =? AND DT_CREATE >= ? GROUP BY ST_MACHINE_ID";
				 Object[] obj ={ stDeviceId,startTime};
				 RecordSet rs;
			        if (con == null) {
			            rs = SQL.execute(sql,obj);
			        } else {
			            rs = SQL.execute(con, sql,obj);
			        }
			        int cont = 0;
					while (rs.next()) {
						BigDecimal bigDecimal = rs.getBigDecimal("cont");
						cont = bigDecimal.intValue();
					}
					return cont;
			 }
			 if(startTime==null){
				 sql ="SELECT ST_MACHINE_ID,COUNT(ST_MACHINE_ID) cont from selm_query_his WHERE ST_MACHINE_ID =? AND DT_CREATE <= ? GROUP BY ST_MACHINE_ID";
				 Object[] obj ={ stDeviceId,endTime};
				 RecordSet rs;
			        if (con == null) {
			            rs = SQL.execute(sql,obj);
			        } else {
			            rs = SQL.execute(con, sql,obj);
			        }
			        int cont = 0;
					while (rs.next()) {
						BigDecimal bigDecimal = rs.getBigDecimal("cont");
						cont = bigDecimal.intValue();
					}
					return cont;
			 }
			 sql ="SELECT ST_MACHINE_ID,COUNT(ST_MACHINE_ID) cont from selm_query_his WHERE ST_MACHINE_ID =? AND DT_CREATE >= ? and DT_CREATE <= ? GROUP BY ST_MACHINE_ID";
			 Object[] obj ={ stDeviceId,startTime,endTime};
			 RecordSet rs;
		        if (con == null) {
		            rs = SQL.execute(sql,obj);
		        } else {
		            rs = SQL.execute(con, sql,obj);
		        }
		        int cont = 0;
				while (rs.next()) {
					BigDecimal bigDecimal = rs.getBigDecimal("cont");
					cont = bigDecimal.intValue();
				}
				return cont;
		 }
	 }
	 public int getAreaSelmQueryTime(String stDeviceId,String startTime) {
		 String time = "%"+startTime+"%";
		 String	sql ="SELECT ST_MACHINE_ID,COUNT(ST_MACHINE_ID) cont from selm_query_his WHERE ST_MACHINE_ID =? AND convert(char(10),DT_CREATE,121) like ? GROUP BY ST_MACHINE_ID";
				 Object[] obj ={ stDeviceId,time};
				 RecordSet rs;
			        if (con == null) {
			            rs = SQL.execute(sql,obj);
			        } else {
			            rs = SQL.execute(con, sql,obj);
			        }
			        int cont = 0;
					while (rs.next()) {
						BigDecimal bigDecimal = rs.getBigDecimal("cont");
						cont = bigDecimal.intValue();
					}
					return cont;
	 }
	 
	 public int getAreaSelmQuery(String stDeviceId) {
		 String sql = "SELECT ST_MACHINE_ID,COUNT(ST_MACHINE_ID) cont from selm_query_his WHERE ST_MACHINE_ID =? GROUP BY ST_MACHINE_ID";
		 Object[] obj ={ stDeviceId};
			
			RecordSet rs;
	        if (con == null) {
	            rs = SQL.execute(sql,obj);
	        } else {
	            rs = SQL.execute(con, sql,obj);
	        }
	        int cont = 0;
			while (rs.next()) {
				BigDecimal bigDecimal = rs.getBigDecimal("cont");
				cont = bigDecimal.intValue();
			}
			return cont;
		}

	public List<SelmQueryHis> queryItem(Conditions conds, String suffix,int pageSize, int currentPage,int year) {
        RecordSet rs;
        String t = AciHelper.getTableOfYear("SELM_QUERY_HIS",year);
        if (con == null) {
            rs = SQL.query(t, "ST_ITEM_NAME,COUNT(ST_ITEM_NAME) cont", conds, suffix,pageSize, currentPage);
        } else {
            rs = SQL.query(con, t, "ST_ITEM_NAME,COUNT(ST_ITEM_NAME) cont", conds, suffix,pageSize, currentPage);
        }
        PaginationArrayList<SelmQueryHis> pal = new PaginationArrayList<SelmQueryHis>(rs.TOTAL_RECORD_COUNT, rs.COMMON_PAGE_SIZE, rs.CURRENT_PAGE);
        while (rs.next()) {
        	SelmQueryHis info = new SelmQueryHis();
        	BigDecimal bigDecimal = rs.getBigDecimal("cont");
            setProperties(info, rs);
            info.setStExt1(bigDecimal.toString());
            pal.add(info);
        }
        return pal;
    }
	
	
	
	public List<SelmQueryHis> queryItemDay(Conditions conds, String suffix,int pageSize, int currentPage) {
        RecordSet rs;
        if(DB.getDatabaseName()=="MySQL"){
        	if (con == null) {
                rs = SQL.query("SELM_QUERY_HIS", "DATE_FORMAT(DT_CREATE,'%Y-%m-%d') dateTime, count(DT_CREATE) cont", conds, suffix,pageSize, currentPage);
            } else {
                rs = SQL.query(con,"SELM_QUERY_HIS","DATE_FORMAT(DT_CREATE,'%Y-%m-%d') dateTime, count(DT_CREATE) cont", conds, suffix,pageSize, currentPage);
            }
       }else{
        if (con == null) {
            rs = SQL.query("SELM_QUERY_HIS", "convert(char(10),DT_CREATE,102) dateTime,count(convert(char(10),DT_CREATE,102)) cont", conds, suffix,pageSize, currentPage);
        } else {
            rs = SQL.query(con,"SELM_QUERY_HIS","convert(char(10),DT_CREATE,102) dateTime,count(convert(char(10),DT_CREATE,102)) cont", conds, suffix,pageSize, currentPage);
        }
        }
        PaginationArrayList<SelmQueryHis> pal = new PaginationArrayList<SelmQueryHis>(rs.TOTAL_RECORD_COUNT, rs.COMMON_PAGE_SIZE, rs.CURRENT_PAGE);
        while (rs.next()) {
        	SelmQueryHis info = new SelmQueryHis();
        	BigDecimal bigDecimal = rs.getBigDecimal("cont");
            setProperties(info, rs);
            info.setStExt2(rs.getOriginalString("dateTime"));
            info.setStExt1(bigDecimal.toString());
            pal.add(info);
        }
        return pal;
    }
	
	
	 public List<SelmQueryHis> querydate(Conditions conds, String suffix) {
	        RecordSet rs;
	        if(DB.getDatabaseName()=="MySQL"){
	        	if (con == null) {
	                rs = SQL.query("SELM_QUERY_HIS", "DATE_FORMAT(DT_CREATE,'%Y-%m-%d') cerate", conds, suffix);
	            } else {
	                rs = SQL.query(con,"SELM_QUERY_HIS","DATE_FORMAT(DT_CREATE,'%Y-%m-%d') cerate, ", conds, suffix);
	            }
	       }else{
	        if (con == null) {
	            rs = SQL.query("SELM_QUERY_HIS", "convert(char(10),DT_CREATE,121) cerate", conds, suffix);
	        } else {
	            rs = SQL.query(con,"SELM_QUERY_HIS","convert(char(10),DT_CREATE,121) cerate", conds, suffix);
	        }
	        }
	        ArrayList<SelmQueryHis> al = new ArrayList<SelmQueryHis>();
	        while (rs.next()) {
	            SelmQueryHis info = new SelmQueryHis();
	            setProperties(info, rs);
	            info.setStDesc(rs.getOriginalString("cerate"));
	            al.add(info);
	        }
	        return al;
	    }

	 public List<SelmQueryHis> selmQuertTop(Conditions conds, String suffix,int pageSize, int currentPage) {
		 RecordSet rs;
	        if (con == null) {
	            rs = SQL.query("SELM_QUERY_HIS", "ST_ITEM_NAME,COUNT(ST_ITEM_NAME) cont", conds, suffix, pageSize, currentPage);
	        } else {
	            rs = SQL.query(con, "SELM_QUERY_HIS", "ST_ITEM_NAME,COUNT(ST_ITEM_NAME) cont", conds, suffix, pageSize, currentPage);
	        }
	        PaginationArrayList<SelmQueryHis> pal = new PaginationArrayList<SelmQueryHis>(rs.TOTAL_RECORD_COUNT, rs.COMMON_PAGE_SIZE, rs.CURRENT_PAGE);
	        while (rs.next()) {
	        	SelmQueryHis info = new SelmQueryHis();
	        	BigDecimal bigDecimal = rs.getBigDecimal("cont");
	            setProperties(info, rs);
	            info.setStExt1(bigDecimal.toString());
	            pal.add(info);
	        }
	        return pal;
	}
	 
	 public JSONArray selmQuertTop(Conditions conds, String suffix) {
		 RecordSet rs;
		 JSONArray arr = new JSONArray();
		 List<String> tables = AciHelper.getTables("SELM_QUERY_HIS");
		 for(String t : tables){
			 if(DB.getDatabaseName().equalsIgnoreCase("mysql")){
				 if (con == null) {
			            rs = SQL.query(t, "ST_ITEM_NAME,COUNT(ST_ITEM_NAME) cont", conds, suffix);
			        } else {
			            rs = SQL.query(con, t, "ST_ITEM_NAME,COUNT(ST_ITEM_NAME) cont", conds, suffix);
			        }
			 }else{
				 if (con == null) {
			            rs = SQL.query(t, "top 20 ST_ITEM_NAME,COUNT(ST_ITEM_NAME) cont", conds, suffix);
			        } else {
			            rs = SQL.query(con, t, "top 20 ST_ITEM_NAME,COUNT(ST_ITEM_NAME) cont", conds, suffix);
			        }
			 }
	        
	        while (rs.next()) {
	            String stItemName = rs.getOriginalString("ST_ITEM_NAME");
	        	BigDecimal cont = rs.getBigDecimal("cont");
	        	if(arr.size() > 0){
	        		int size = arr.size();
	        		boolean flag = true;
	        		for(int i = 0; i < size; i++){
		        		JSONObject o = arr.getJSONObject(i);
		        		String itemName = o.getString("stItemName");
		        		if(itemName.equals(stItemName)){
		        			BigDecimal cou = (BigDecimal) o.get("stExt1");
		        			cont = cont.add(cou);
		        			JSONObject obj = new JSONObject();
		        			obj.put("stItemName", stItemName);
		        			obj.put("stExt1",cont);
		        			arr.set(i, obj);
		        			flag = false;
		        		}
		        	}
	        		if(flag){
	        			JSONObject obj = new JSONObject();
	        			obj.put("stItemName", stItemName);
	        			obj.put("stExt1",cont);
	        			arr.add(obj);
	        		}
	        	}else{
	        		JSONObject obj = new JSONObject();
	        		obj.put("stItemName", stItemName);
        			obj.put("stExt1",cont);
        			arr.add(obj);
	        	}
	        }
		 }
        return arr;
	}
	 
	 
	 public List<SelmQueryHis> queryItemNo(Conditions conds, String suffix) {
	        RecordSet rs;
	        if (con == null) {
	            rs = SQL.query("INFOPUB_DEVICE_INFO info JOIN SELM_QUERY_HIS sqh on info.ST_DEVICE_MAC=sqh.ST_MACHINE_ID", "sqh.ST_ITEM_NO", conds, suffix);
	        } else {
	            rs = SQL.query(con, "INFOPUB_DEVICE_INFO info JOIN SELM_QUERY_HIS sqh on info.ST_DEVICE_MAC=sqh.ST_MACHINE_ID", "sqh.ST_ITEM_NO", conds, suffix);
	        }
	        ArrayList<SelmQueryHis> al = new ArrayList<SelmQueryHis>();
	        while (rs.next()) {
	            SelmQueryHis info = new SelmQueryHis();
	            setProperties(info, rs);
	            al.add(info);
	        }
	        return al;
	    }
	 /**
	  * 通过设备mac来查询未绑定的事项编码
	  * @param stDeviceMac
	  * @return
	  */
	public List<SelmQueryHis> queryNoItemNo(String stDeviceMac) {
		 String sql = "SELECT DISTINCT(sqh.ST_ITEM_NO) FROM INFOPUB_DEVICE_INFO info "
				 	+" JOIN SELM_QUERY_HIS sqh ON info.ST_DEVICE_MAC=sqh.ST_MACHINE_ID" 
				 	+" WHERE info.ST_DEVICE_MAC=? AND sqh.ST_ITEM_NO IS NOT NULL EXCEPT" 
				 	+" SELECT si.ST_ITEM_NO FROM INFOPUB_DEVICE_INFO info" 
				 	+" JOIN SELM_DEVICE_ITEM sdi ON info.ST_DEVICE_ID=sdi.ST_DEVICE_ID" 
				 	+" JOIN SELM_ITEM si ON sdi.ST_ITEM_ID=si.ST_ITEM_ID WHERE info.ST_DEVICE_MAC=?";
		Object[] obj ={ stDeviceMac,stDeviceMac};
			RecordSet rs;
	        if (con == null) {
	            rs = SQL.execute(sql,obj);
	        } else {
	            rs = SQL.execute(con, sql,obj);
	        }
	        ArrayList<SelmQueryHis> al = new ArrayList<SelmQueryHis>();
			while (rs.next()) {
				SelmQueryHis info = new SelmQueryHis();
				info.setStItemNo(rs.getOriginalString("ST_ITEM_NO"));
				al.add(info);
			}
			return al;
	}
	
	/**
	 * 通过设备mac来查询未绑定的事项名称
	 * @param stDeviceMac
	 * @return
	 */
	public List<SelmQueryHis> queryNoItemName(String stDeviceMac) {
		 String sql = "SELECT sqh.ST_ITEM_NAME FROM INFOPUB_DEVICE_INFO info "
				 	+" JOIN SELM_QUERY_HIS sqh ON info.ST_DEVICE_MAC=sqh.ST_MACHINE_ID" 
				 	+" WHERE info.ST_DEVICE_MAC=? GROUP BY sqh.ST_ITEM_NAME EXCEPT" 
				 	+" SELECT si.ST_MAIN_NAME FROM INFOPUB_DEVICE_INFO info" 
				 	+" JOIN SELM_DEVICE_ITEM sdi ON info.ST_DEVICE_ID=sdi.ST_DEVICE_ID" 
				 	+" JOIN SELM_ITEM si ON sdi.ST_ITEM_ID=si.ST_ITEM_ID WHERE info.ST_DEVICE_MAC=?";
		Object[] obj ={ stDeviceMac,stDeviceMac};
			RecordSet rs;
	        if (con == null) {
	            rs = SQL.execute(sql,obj);
	        } else {
	            rs = SQL.execute(con, sql,obj);
	        }
	        ArrayList<SelmQueryHis> al = new ArrayList<SelmQueryHis>();
			while (rs.next()) {
				SelmQueryHis info = new SelmQueryHis();
				info.setStItemName(rs.getOriginalString("ST_ITEM_NAME"));
				al.add(info);
			}
			return al;
	}
	
	/**
	 * 查询未录入系统设备含有办件信息的Mac
	 * @param conds
	 * @param suffix
	 * @param pageSize
	 * @param currentPage
	 * @return
	 */
	public List<SelmQueryHis> queryUnInDeviceMac(Conditions conds,
			String suffix, int pageSize, int currentPage) {
		RecordSet rs;
        String content = "SQH.ST_MACHINE_ID,COUNT(*) NUMBER";
        String table = "INFOPUB_DEVICE_INFO IDI RIGHT JOIN SELM_QUERY_HIS SQH ON IDI.ST_DEVICE_MAC=SQH.ST_MACHINE_ID";
        if (con == null) {
            rs = SQL.query(table, content, conds, suffix, pageSize, currentPage);
        } else {
            rs = SQL.query(con, table, content, conds, suffix, pageSize, currentPage);
        }
        PaginationArrayList<SelmQueryHis> pal = new PaginationArrayList<SelmQueryHis>(rs.TOTAL_RECORD_COUNT, rs.COMMON_PAGE_SIZE, rs.CURRENT_PAGE);
        while (rs.next()) {
        	SelmQueryHis info = new SelmQueryHis();
        	info.setStMachineId(rs.getOriginalString("ST_MACHINE_ID"));
            info.setStDesc(rs.getOriginalString("NUMBER"));
            pal.add(info);
        }
        return pal;
	}
	
	/**
	 * 统计各区域 街道操作名称数量
	 */
	public List<SelmQueryHis> queryAddressModuleOp(Conditions conds,String suffix, int pageSize, int currentPage) {
		RecordSet rs;
        String content = "a.ST_MODULE_OP,COUNT(a.ST_MODULE_OP) number";
        String table = " (SELECT ia.ST_DISTRICT,ia.ST_STREET,sqh.DT_CREATE,idt.NM_DTYPE,idi.ST_AREA_ID,idt.ST_TYPE_ID,(CASE WHEN sqh.ST_MODULE_OP='查询' THEN '查询' WHEN sqh.ST_MODULE_OP='打印' THEN '打印' WHEN sqh.ST_MODULE_OP='查询+打印' THEN '打印'"+ 
        		" WHEN sqh.ST_MODULE_OP='办理' THEN '办理' WHEN sqh.ST_MODULE_OP='评价' THEN '办理' WHEN sqh.ST_MODULE_OP='实名认证' THEN '办理' WHEN sqh.ST_MODULE_OP='申领' THEN '随申码离线服务-申领'"+
        		" WHEN sqh.ST_MODULE_OP='预览' THEN '随申码离线服务-预览' WHEN sqh.ST_MODULE_OP='补领' THEN '随申码离线服务-补领' WHEN sqh.ST_MODULE_OP='挂失' THEN '随申码离线服务-挂失' ELSE '其他' END) ST_MODULE_OP"+
        		" FROM (select ST_QUERY_HIS_ID,ST_MACHINE_ID,DT_CREATE,ST_MODULE_OP from SELM_QUERY_HIS "+
        				"union all "+
        				"select ST_QUERY_HIS_ID,ST_MACHINE_ID,DT_CREATE,ST_MODULE_OP from selm_query_his_2022)sqh " +
        		"JOIN INFOPUB_DEVICE_INFO idi ON idi.ST_DEVICE_MAC=sqh.ST_MACHINE_ID "+
        		"JOIN INFOPUB_ADDRESS ia ON ia.ST_ADDRESS_ID=idi.ST_ADDRESS_ID " +
        		"join infopub_device_type idt on idi.ST_TYPE_ID = idt.ST_TYPE_ID) a";
        	
        if (con == null) {
            rs = SQL.query(table, content, conds, suffix, pageSize, currentPage);
        } else {
            rs = SQL.query(con, table, content, conds, suffix, pageSize, currentPage);
        }
        PaginationArrayList<SelmQueryHis> pal = new PaginationArrayList<SelmQueryHis>(rs.TOTAL_RECORD_COUNT, rs.COMMON_PAGE_SIZE, rs.CURRENT_PAGE);
        while (rs.next()) {
        	SelmQueryHis info = new SelmQueryHis();
        	info.setStModuleOp(rs.getOriginalString("ST_MODULE_OP"));
        	info.setStExt1(rs.getOriginalString("number"));
            pal.add(info);
        }
        return pal;
	}
	
	/*public List<SelmQueryHis> queryAddressModuleOp(Conditions conds,String suffix) {
		RecordSet rs;
		List<String> tables = AciHelper.getTables("SELM_QUERY_HIS");
		List<SelmQueryHis> arr = new ArrayList<SelmQueryHis>();
        String content = "a.ST_MODULE_OP,COUNT(a.ST_MODULE_OP) number";
        for(String t : tables){
        	String table = " (SELECT ia.ST_DISTRICT,ia.ST_STREET,sqh.DT_CREATE,idt.NM_DTYPE,idi.ST_AREA_ID,idt.ST_TYPE_ID, (CASE WHEN sqh.ST_MODULE_OP='查询' THEN '查询' WHEN sqh.ST_MODULE_OP='打印' THEN '打印' WHEN sqh.ST_MODULE_OP='查询+打印' THEN '打印'"+ 
            		" WHEN sqh.ST_MODULE_OP='办理' THEN '办理' WHEN sqh.ST_MODULE_OP='评价' THEN '办理' WHEN sqh.ST_MODULE_OP='实名认证' THEN '办理' WHEN sqh.ST_MODULE_OP='申领' THEN '随申码离线服务-申领'"+
            		" WHEN sqh.ST_MODULE_OP='预览' THEN '随申码离线服务-预览' WHEN sqh.ST_MODULE_OP='补领' THEN '随申码离线服务-补领' WHEN sqh.ST_MODULE_OP='挂失' THEN '随申码离线服务-挂失' ELSE '其他' END) ST_MODULE_OP"+
            		" FROM "+ t +" sqh LEFT JOIN INFOPUB_DEVICE_INFO idi ON idi.ST_DEVICE_MAC=sqh.ST_MACHINE_ID"+
            		" LEFT JOIN INFOPUB_ADDRESS ia ON ia.ST_ADDRESS_ID=idi.ST_ADDRESS_ID " +
            		" left join infopub_device_type idt on idi.ST_TYPE_ID = idt.ST_TYPE_ID) a";
            	
            if (con == null) {
                rs = SQL.query(table, content, conds, suffix);
            } else {
                rs = SQL.query(con, table, content, conds, suffix);
            }
            
            while (rs.next()) {
	        	String moduleOp = rs.getOriginalString("ST_MODULE_OP");
	        	BigDecimal num = rs.getBigDecimal("number");
	        	if(arr.size() > 0){
	        		int size = arr.size();
	        		boolean flag = true;
	        		for(int i = 0; i < size; i++){
	        			SelmQueryHis o = arr.get(i);
		        		String mo = o.getStModuleOp();
		        		if(moduleOp.equals(mo)){
		        			BigDecimal cou = new BigDecimal(o.getStExt1());
		        			cou = cou.add(num);
		        			SelmQueryHis info = new SelmQueryHis();
		        			info.setStModuleOp(moduleOp);
			            	info.setStExt1(cou.toString());
		        			arr.set(i, info);
		        			flag = false;
		        		}
		        	}
	        		if(flag){
	        			SelmQueryHis info = new SelmQueryHis();
		            	info.setStModuleOp(moduleOp);
		            	info.setStExt1(num.toString());
		            	arr.add(info);
	        		}
	        	}else{
	        		SelmQueryHis info = new SelmQueryHis();
	            	info.setStModuleOp(moduleOp);
	            	info.setStExt1(num.toString());
	            	arr.add(info);
	        	}
            }
        }
        return arr;
	}*/
	
	/**
	 * 统计设备操作名称数量
	 */
	public List<SelmQueryHis> queryDeviceModuleOp(Conditions conds,String suffix, int pageSize, int currentPage) {
		RecordSet rs;
        String content = "a.ST_MODULE_OP,COUNT(a.ST_MODULE_OP) number";
        String table = "(SELECT sqh.ST_MACHINE_ID,sqh.DT_CREATE,(CASE WHEN sqh.ST_MODULE_OP='查询' THEN '查询' "+
							"WHEN sqh.ST_MODULE_OP='打印' THEN '打印'  "+
							"WHEN sqh.ST_MODULE_OP='查询+打印' THEN '打印'  "+
							"WHEN sqh.ST_MODULE_OP='办理' THEN '办理'  "+
							"WHEN sqh.ST_MODULE_OP='评价' THEN '办理'  "+
							"WHEN sqh.ST_MODULE_OP='实名认证' THEN '办理'  "+
							"WHEN sqh.ST_MODULE_OP='申领' THEN '随申码离线服务-申领'  "+
							"WHEN sqh.ST_MODULE_OP='预览' THEN '随申码离线服务-预览'  "+
							"WHEN sqh.ST_MODULE_OP='补领' THEN '随申码离线服务-补领'  "+
							"WHEN sqh.ST_MODULE_OP='挂失' THEN '随申码离线服务-挂失' ELSE ' 其他' END) ST_MODULE_OP  "+
				"FROM (select s.ST_MACHINE_ID,s.DT_CREATE,s.ST_MODULE_OP from "+
						"(select ST_MACHINE_ID,DT_CREATE,ST_MODULE_OP from SELM_QUERY_HIS  "+
						"union all "+
						"select ST_MACHINE_ID,DT_CREATE,ST_MODULE_OP from selm_query_his_2022 )s)sqh)a ";
        	
        if (con == null) {
            rs = SQL.query(table, content,conds,suffix, pageSize, currentPage);
        } else {
            rs = SQL.query(con, table, content, conds,suffix, pageSize, currentPage);
        }
        PaginationArrayList<SelmQueryHis> pal = new PaginationArrayList<SelmQueryHis>(rs.TOTAL_RECORD_COUNT, rs.COMMON_PAGE_SIZE, rs.CURRENT_PAGE);
        while (rs.next()) {
        	SelmQueryHis info = new SelmQueryHis();
        	info.setStModuleOp(rs.getOriginalString("ST_MODULE_OP"));
        	info.setStExt1(rs.getOriginalString("number"));
            pal.add(info);
        }
        return pal;
	}

	public int getSelmQueryCount(String stItemName) {
		String sql = "SELECT COUNT(ST_QUERY_HIS_ID) cont from SELM_QUERY_HIS WHERE ST_ITEM_NAME =? ";
		Object[] obj = { stItemName };
		RecordSet rs;
        if (con == null) {
            rs = SQL.execute(sql,obj);
        } else {
            rs = SQL.execute(con, sql,obj);
        }
        int cont = 0;
		while (rs.next()) {
			BigDecimal bigDecimal = rs.getBigDecimal("cont");
			cont = bigDecimal.intValue();
		}
		return cont;
	}
	
	
	
	public int getSelmQueryCount(String stItemName, String startDate, String endDate) {
		String sql = "SELECT COUNT(ST_QUERY_HIS_ID) cont from SELM_QUERY_HIS WHERE ST_ITEM_NAME =? and DT_CREATE >= ? and DT_CREATE <= ?";
		Object[] obj = { stItemName,Timestamp.valueOf(startDate),Timestamp.valueOf(endDate) };
		RecordSet rs;
        if (con == null) {
            rs = SQL.execute(sql,obj);
        } else {
            rs = SQL.execute(con, sql,obj);
        }
        int cont = 0;
		while (rs.next()) {
			BigDecimal bigDecimal = rs.getBigDecimal("cont");
			cont = bigDecimal.intValue();
		}
		return cont;
	}	
		

	public List<SelmQueryHis> itemPeopleNumber(String stItemName) {
		String s_sql ="select case when age>=1 and age <=25 then '25岁及以下' when age>=26 and age <=35 then '26~35岁'"
				+" when age>=36 and age <=45 then '36~45岁'"
				+" when age>=45 and age <=60 then '45~60岁'"  
				+" else '60岁以上'"
				+" end as ageScope,"
				+" count(*) as number"
				+" from (select DateDiff(YEAR,birthday ,getdate()) as age,birthday from"
				+" (select b.ST_IDENTITY_NO, CONVERT(datetime,b.sqhyear) birthday" 
				+" from" 
				+" (SELECT * FROM (select ST_IDENTITY_NO,substring(ST_IDENTITY_NO,7,4) sqhyear from SELM_QUERY_HIS" 
				+" WHERE ST_ITEM_NAME=?"
				+" AND (len(ST_IDENTITY_NO) = 15 or len(ST_IDENTITY_NO)=18)" 
				+" AND ST_IDENTITY_NO is NOT NULL) a WHERE a.sqhyear>'1900') b )t ) a"
				+" group by case" 
				+" when age>=1 and age <=25 then '25岁及以下'" 
				+" when age>=26 and age <=35 then '26~35岁'"
				+" when age>=36 and age <=45 then '36~45岁'"
				+" when age>=45 and age <=60 then '45~60岁'"  
				+" else '60岁以上'  end"
				+" order by ageScope";
		
		String m_sql = "select case when age>=1 and age <=25 then '25岁及以下' when age>=26 and age <=35 then '26~35岁' when age>=36 and age <=45 then '36~45岁' when age>=45 and age <=60 then '45~60岁' else '60岁以上' end as ageScope, count(*) as number from ("+
						"select date_format(now(),'%Y')-birthday as age,birthday from ("+
						"select b.ST_IDENTITY_NO,b.sqhyear birthday from ("+
						"SELECT * FROM (select ST_IDENTITY_NO,substring(ST_IDENTITY_NO,7,4) sqhyear from SELM_QUERY_HIS WHERE ST_ITEM_NAME=? AND (length(ST_IDENTITY_NO) = 15 or length(ST_IDENTITY_NO)=18) AND ST_IDENTITY_NO is NOT NULL) a	WHERE a.sqhyear>'1900') b )t ) a "+
						"group by case when age>=1 and age <=25 then '25岁及以下' when age>=26 and age <=35 then '26~35岁' when age>=36 and age <=45 then '36~45岁' when age>=45 and age <=60 then '45~60岁' else '60岁以上'  end "+
						"order by ageScope";
		RecordSet rs;
		Object[] obj = { stItemName };
		if(DB.getDatabaseName().equalsIgnoreCase("mysql")){
			if (con == null) {
		        rs = SQL.execute(m_sql,obj);
		    } else {
		        rs = SQL.execute(con, m_sql,obj);
		    }
		}else{
			if (con == null) {
		        rs = SQL.execute(s_sql,obj);
		    } else {
		        rs = SQL.execute(con, s_sql,obj);
		    }
		}
	    
	    ArrayList<SelmQueryHis> al = new ArrayList<SelmQueryHis>();
	    while (rs.next()) {
	    	SelmQueryHis info = new SelmQueryHis();
	        info.setStIdentityNo(rs.getOriginalString("ageScope"));
	        info.setStDesc(rs.getOriginalString("number"));
	        al.add(info);
	    }
	    return al;
	}

	public JSONArray areaItemCount(Conditions conds, String suffix) {
		RecordSet rs;
		String table = "(select ST_QUERY_HIS_ID,ST_MACHINE_ID,DT_CREATE from SELM_QUERY_HIS "+
						"union all "+
						"select ST_QUERY_HIS_ID,ST_MACHINE_ID,DT_CREATE from selm_query_his_2022)sqh "+
						"join INFOPUB_DEVICE_INFO idi on sqh.ST_MACHINE_ID = idi.ST_DEVICE_MAC "+
					    "join INFOPUB_AREA ia ON idi.ST_AREA_ID = ia.ST_AREA_ID " +
					    "join infopub_device_type idt on idi.ST_TYPE_ID = idt.ST_TYPE_ID ";
        if (con == null) {
            rs = SQL.query(table, "ia.ST_AREA_NAME, count(ia.ST_AREA_NAME) icou", conds, suffix);
        } else {
            rs = SQL.query(con, table, "ia.ST_AREA_NAME, count(ia.ST_AREA_NAME) icou", conds, suffix);
        }
        JSONArray arr = new JSONArray();
        while (rs.next()) {
        	JSONObject obj = new JSONObject();
        	obj.put("areaName", rs.getOriginalString("ST_AREA_NAME"));
        	obj.put("iCount",rs.getOriginalString("icou"));
        	arr.add(obj);
        }
        return arr;
	}
	/*public JSONArray areaItemCount(Conditions conds, String suffix) {
		RecordSet rs;
		JSONArray arr = new JSONArray();
		List<String> tables = AciHelper.getTables("SELM_QUERY_HIS");
		for(String t : tables){
			String table = t + " sqs left join INFOPUB_DEVICE_INFO idi on sqs.ST_MACHINE_ID = idi.ST_DEVICE_MAC "+
					   "left join INFOPUB_AREA ia ON idi.ST_AREA_ID = ia.ST_AREA_ID " +
					   "left join infopub_device_type idt on idi.ST_TYPE_ID = idt.ST_TYPE_ID ";
		     if (con == null) {
		         rs = SQL.query(table, "ia.ST_AREA_NAME, count(ia.ST_AREA_NAME) icou", conds, suffix);
		     } else {
		         rs = SQL.query(con, table, "ia.ST_AREA_NAME, count(ia.ST_AREA_NAME) icou", conds, suffix);
		     }
		     
		     while (rs.next()) {
	        	String areaName = rs.getOriginalString("ST_AREA_NAME");
	        	BigDecimal count = rs.getBigDecimal("icou");
	        	if(arr.size() > 0){
	        		int size = arr.size();
	        		boolean flag = true;
	        		for(int i = 0; i < size; i++){
		        		JSONObject o = arr.getJSONObject(i);
		        		String area = o.getString("areaName");
		        		if(areaName.equals(area)){
		        			BigDecimal cou = (BigDecimal) o.get("iCount");
		        			cou = cou.add(count);
		        			JSONObject obj = new JSONObject();
		        			obj.put("areaName", areaName);
		        			obj.put("iCount",cou);
		        			arr.set(i, obj);
		        			flag = false;
		        		}
		        	}
	        		if(flag){
	        			JSONObject obj = new JSONObject();
	        			obj.put("areaName", areaName);
	        			obj.put("iCount",count);
	        			arr.add(obj);
	        		}
	        	}else{
	        		JSONObject obj = new JSONObject();
        			obj.put("areaName", areaName);
        			obj.put("iCount",count);
        			arr.add(obj);
	        	}
		    }
		}
		
        return arr;
	}*/
	
	/*public String bareaItemCount(Conditions conds, String suffix) {
		RecordSet rs;
		String table = "SELM_QUERY_HIS sqh left join INFOPUB_DEVICE_INFO idi on sqh.ST_MACHINE_ID = idi.ST_DEVICE_MAC "+
					   "left join INFOPUB_AREA ia ON idi.ST_AREA_ID = ia.ST_AREA_ID " +
					   "left join infopub_device_type idt on idi.ST_TYPE_ID = idt.ST_TYPE_ID ";
        if (con == null) {
            rs = SQL.query(table, "count(sqh.ST_QUERY_HIS_ID) icou", conds, suffix);
        } else {
            rs = SQL.query(con, table, "count(sqh.ST_QUERY_HIS_ID) icou", conds, suffix);
        }
        
        String s = "0";
        while (rs.next()) {
        	s = rs.getOriginalString("icou");
        }
        return s;
	}*/
	
	public String bareaItemCount(Conditions conds, String suffix) {
		RecordSet rs;
		String s = "0";
		BigDecimal cou = new BigDecimal(0);
		String table = "(select s.ST_QUERY_HIS_ID,s.ST_MACHINE_ID,DT_CREATE from "+
				"(select ST_QUERY_HIS_ID,ST_MACHINE_ID,DT_CREATE from SELM_QUERY_HIS union all "+
						"select ST_QUERY_HIS_ID,ST_MACHINE_ID,DT_CREATE from selm_query_his_2022)s )sqh  "+
						"join INFOPUB_DEVICE_INFO idi on sqh.ST_MACHINE_ID = idi.ST_DEVICE_MAC  "+
						"join infopub_device_type idt on idi.ST_TYPE_ID = idt.ST_TYPE_ID  ";
						
		if (con == null) {
		     rs = SQL.query(table, "count(sqh.ST_QUERY_HIS_ID) icou", conds, suffix);
		} else {
		     rs = SQL.query(con, table, "count(sqh.ST_QUERY_HIS_ID) icou", conds, suffix);
		}
	     
	     while (rs.next()) {
	    	 BigDecimal c = rs.getBigDecimal("icou");
	    	 cou = c;
	     }
		s = cou.toString();
        return s;
	}
	
	public JSONArray govCount(Conditions conds, String suffix) {
		RecordSet rs;
		String table = "INFOPUB_DEVICE_INFO idi left join INFOPUB_AREA ia on idi.ST_AREA_ID = ia.ST_AREA_ID"+
					 " left join INFOPUB_DEVICE_TYPE idt on idi.ST_TYPE_ID = idt.ST_TYPE_ID ";
        if (con == null) {
            rs = SQL.query(table, "ia.ST_AREA_NAME,count(ia.ST_AREA_NAME) cou", conds, suffix);
        } else {
            rs = SQL.query(con, table, "ia.ST_AREA_NAME,count(ia.ST_AREA_NAME) cou", conds, suffix);
        }
        
        JSONArray arr = new JSONArray();
        while (rs.next()) {
        	JSONObject gObj = new JSONObject();
        	gObj.put("areaName", rs.getOriginalString("ST_AREA_NAME"));
        	gObj.put("gCount",rs.getOriginalString("cou"));
        	arr.add(gObj);
        }
        return arr;
	}
	
	public String socCount(Conditions conds, String suffix) {
		RecordSet rs;
		String table = "INFOPUB_DEVICE_INFO idi join INFOPUB_DEVICE_TYPE idt on idi.ST_TYPE_ID = idt.ST_TYPE_ID ";
        if (con == null) {
            rs = SQL.query(table, "count(idi.ST_DEVICE_ID) cou", conds, suffix);
        } else {
            rs = SQL.query(con, table, "count(idi.ST_DEVICE_ID) cou", conds, suffix);
        }
        
        String devSum = "0";
        while(rs.next()){
        	devSum = rs.getOriginalString("cou");
        }
        return devSum;
	}

	/*public List<SelmQueryHis> queryAddressItemAmount(Conditions conds,String suffix, int pageSize, int currentPage) {
        RecordSet rs;
		String table ="SELM_QUERY_HIS sqh left join infopub_device_info idi on sqh.ST_MACHINE_ID = idi.ST_DEVICE_MAC "+
				"left join infopub_address ia on idi.ST_ADDRESS_ID = ia.ST_ADDRESS_ID "+
				"left join infopub_device_type idt on idi.ST_TYPE_ID = idt.ST_TYPE_ID";
        if (con == null) {
            rs = SQL.query(table, "sqh.ST_ITEM_NAME,COUNT(sqh.ST_ITEM_NAME) number", conds, suffix, pageSize, currentPage);
        } else {
            rs = SQL.query(con, table, "sqh.ST_ITEM_NAME,COUNT(sqh.ST_ITEM_NAME) number", conds, suffix, pageSize, currentPage);
        }
        
        PaginationArrayList<SelmQueryHis> pal = new PaginationArrayList<SelmQueryHis>(rs.TOTAL_RECORD_COUNT, rs.COMMON_PAGE_SIZE, rs.CURRENT_PAGE);
        while (rs.next()) {
        	SelmQueryHis info = new SelmQueryHis();
        	info.setStItemName(rs.getOriginalString("ST_ITEM_NAME"));
        	info.setStExt1(rs.getOriginalString("number"));
            pal.add(info);
        }
        return pal;
	}
*/
	
	public List<SelmQueryHis> queryAddressItemAmount(Conditions conds,String suffix, int pageSize, int currentPage) {
        RecordSet rs;
		String table ="(select ST_QUERY_HIS_ID,ST_MACHINE_ID,DT_CREATE,ST_ITEM_NAME from SELM_QUERY_HIS "+
						"union all "+
						"select ST_QUERY_HIS_ID,ST_MACHINE_ID,DT_CREATE,ST_ITEM_NAME from selm_query_his_2022) sqh "+
					"join infopub_device_info idi on sqh.ST_MACHINE_ID = idi.ST_DEVICE_MAC "+
					"join infopub_address ia on idi.ST_ADDRESS_ID = ia.ST_ADDRESS_ID "+
				"join infopub_device_type idt on idi.ST_TYPE_ID = idt.ST_TYPE_ID";
        if (con == null) {
            rs = SQL.query(table, "sqh.ST_ITEM_NAME,COUNT(sqh.ST_ITEM_NAME) number", conds, suffix, pageSize, currentPage);
        } else {
            rs = SQL.query(con, table, "sqh.ST_ITEM_NAME,COUNT(sqh.ST_ITEM_NAME) number", conds, suffix, pageSize, currentPage);
        }
        
        PaginationArrayList<SelmQueryHis> pal = new PaginationArrayList<SelmQueryHis>(rs.TOTAL_RECORD_COUNT, rs.COMMON_PAGE_SIZE, rs.CURRENT_PAGE);
        while (rs.next()) {
        	SelmQueryHis info = new SelmQueryHis();
        	info.setStItemName(rs.getOriginalString("ST_ITEM_NAME"));
        	info.setStExt1(rs.getOriginalString("number"));
            pal.add(info);
        }
        return pal;
	}
	
	
	public List<SelmQueryHis> queryDeviceItemAmount(Conditions conds,String suffix, int pageSize, int currentPage) {
		RecordSet rs;
		String t = "(select ST_QUERY_HIS_ID,ST_MACHINE_ID,DT_CREATE,ST_ITEM_NAME from SELM_QUERY_HIS "+
					"union all "+
					"select ST_QUERY_HIS_ID,ST_MACHINE_ID,DT_CREATE,ST_ITEM_NAME from selm_query_his_2022 )sqh";
        if (con == null) {
            rs = SQL.query(t, "ST_ITEM_NAME,COUNT(ST_ITEM_NAME) number", conds, suffix, pageSize, currentPage);
        } else {
            rs = SQL.query(con, t, "ST_ITEM_NAME,COUNT(ST_ITEM_NAME) number", conds, suffix, pageSize, currentPage);
        }
        
        PaginationArrayList<SelmQueryHis> pal = new PaginationArrayList<SelmQueryHis>(rs.TOTAL_RECORD_COUNT, rs.COMMON_PAGE_SIZE, rs.CURRENT_PAGE);
        while (rs.next()) {
        	SelmQueryHis info = new SelmQueryHis();
        	info.setStItemName(rs.getOriginalString("ST_ITEM_NAME"));
        	info.setStExt1(rs.getOriginalString("number"));
            pal.add(info);
        }
        return pal;
	}
	
	/*public List<SelmQueryHis> querySelm(Conditions conds,String suffix, int pageSize, int currentPage) {
		RecordSet rs;
		String content = "sqh.ST_QUERY_HIS_ID,sqh.ST_ITEM_NAME,sqh.ST_MODULE_NAME,sqh.ST_MODULE_OP,sqh.ST_NAME,sqh.ST_IDENTITY_NO,ia.ST_DISTRICT,ia.ST_STREET,sqh.DT_CREATE,sqh.ST_OP_RESULT,sqh.ST_ASSIST_ID";
		String table ="SELM_QUERY_HIS sqh left join infopub_device_info idi on sqh.ST_MACHINE_ID = idi.ST_DEVICE_MAC "+
					   "left join infopub_address ia on ia.ST_ADDRESS_ID = idi.ST_ADDRESS_ID " +
					   "left join infopub_device_type idt on idi.ST_TYPE_ID = idt.ST_TYPE_ID ";
        if (con == null) {
            rs = SQL.query(table, content, conds, suffix, pageSize, currentPage);
        } else {
            rs = SQL.query(con, table, content, conds, suffix, pageSize, currentPage);
        }
        
        PaginationArrayList<SelmQueryHis> pal = new PaginationArrayList<SelmQueryHis>(rs.TOTAL_RECORD_COUNT, rs.COMMON_PAGE_SIZE, rs.CURRENT_PAGE);
        String op_result = "";
        while (rs.next()) {
        	SelmQueryHis info = new SelmQueryHis();
        	info.setStQueryHisId(rs.getOriginalString("ST_QUERY_HIS_ID"));
        	info.setStItemName(rs.getOriginalString("ST_ITEM_NAME"));
        	info.setStModuleName(rs.getOriginalString("ST_MODULE_NAME"));
        	info.setStModuleOp(rs.getOriginalString("ST_MODULE_OP"));
        	info.setStName(rs.getOriginalString("ST_NAME"));
        	info.setStIdentityNo(rs.getOriginalString("ST_IDENTITY_NO"));
        	info.setStExt3(rs.getOriginalString("ST_DISTRICT"));
        	info.setStExt4(rs.getOriginalString("ST_STREET"));
        	info.setDtCreate(rs.getTimestamp("DT_CREATE"));
        	info.setStAssistId(rs.getOriginalString("ST_ASSIST_ID"));
        	op_result = rs.getOriginalString("ST_OP_RESULT");
        	if("SUCCESS".equals(op_result)){
        		info.setStOpResult("成功");
        	}else{
        		info.setStOpResult("");
        	}
            pal.add(info);
        }
        return pal;
	}*/
	
	
	public List<SelmQueryHis> querySelm(Conditions conds,String suffix, int pageSize, int currentPage) {
		RecordSet rs;
		String content = "sqh.ST_QUERY_HIS_ID,sqh.ST_ITEM_NAME,sqh.ST_MODULE_NAME,sqh.ST_MODULE_OP,sqh.ST_NAME,sqh.ST_IDENTITY_NO,ia.ST_DISTRICT,ia.ST_STREET,sqh.DT_CREATE,sqh.ST_OP_RESULT,sqh.ST_ASSIST_ID";
		String table = "(select ST_QUERY_HIS_ID,ST_MACHINE_ID,DT_CREATE,ST_ITEM_NAME,ST_MODULE_NAME,ST_MODULE_OP,ST_NAME,ST_IDENTITY_NO,ST_OP_RESULT,ST_ASSIST_ID " +
						"from SELM_QUERY_HIS "+
						"union all  "+
						"select ST_QUERY_HIS_ID,ST_MACHINE_ID,DT_CREATE,ST_ITEM_NAME,ST_MODULE_NAME,ST_MODULE_OP,ST_NAME,ST_IDENTITY_NO,ST_OP_RESULT,ST_ASSIST_ID  " +
						"from selm_query_his_2022) sqh "+ 
						"join infopub_device_info idi on sqh.ST_MACHINE_ID = idi.ST_DEVICE_MAC "+
						"join infopub_address ia on ia.ST_ADDRESS_ID = idi.ST_ADDRESS_ID " +
						"join infopub_device_type idt on idi.ST_TYPE_ID = idt.ST_TYPE_ID ";
		if (con == null) {
		     rs = SQL.query(table, content, conds, suffix, pageSize, currentPage);
		} else {
		     rs = SQL.query(con, table, content, conds, suffix, pageSize, currentPage);
		}
	        
		PaginationArrayList<SelmQueryHis> pal = new PaginationArrayList<SelmQueryHis>(rs.TOTAL_RECORD_COUNT, rs.COMMON_PAGE_SIZE, rs.CURRENT_PAGE);
		String op_result = "";
		SelmQueryHis info = null;
		while (rs.next()) {
			info = new SelmQueryHis();
        	info.setStQueryHisId(rs.getOriginalString("ST_QUERY_HIS_ID"));
        	info.setStItemName(rs.getOriginalString("ST_ITEM_NAME"));
        	info.setStModuleName(rs.getOriginalString("ST_MODULE_NAME"));
        	info.setStModuleOp(rs.getOriginalString("ST_MODULE_OP"));
        	info.setStName(rs.getOriginalString("ST_NAME"));
        	info.setStIdentityNo(rs.getOriginalString("ST_IDENTITY_NO"));
        	info.setStExt3(rs.getOriginalString("ST_DISTRICT"));
        	info.setStExt4(rs.getOriginalString("ST_STREET"));
        	info.setDtCreate(rs.getTimestamp("DT_CREATE"));
        	info.setStAssistId(rs.getOriginalString("ST_ASSIST_ID"));
        	op_result = rs.getOriginalString("ST_OP_RESULT");
        	if("SUCCESS".equals(op_result)){
        		info.setStOpResult("成功");
        	}else{
        		info.setStOpResult("");
        	}
            pal.add(info);
        }
        return pal;
	}
	
	/**
	 * excel导出相关代码
	 * 
	 */
	/*public List<SelmQueryHisExcel> queryExcel(Conditions conds, String suffix) {
        RecordSet rs;
        if (con == null) {
            rs = SQL.query("SELM_QUERY_HIS", "*", conds, suffix);
        } else {
            rs = SQL.query(con, "SELM_QUERY_HIS", "*", conds, suffix);
        }
        ArrayList<SelmQueryHisExcel> al = new ArrayList<SelmQueryHisExcel>();
        while (rs.next()) {
        	SelmQueryHisExcel info = new SelmQueryHisExcel();
            setProperties(info, rs);
            al.add(info);
        }
        return al;
    }*/
	/**
	 * excel导出相关代码
	 * 
	 */
	public List<SelmQueryHisExcel> queryExcel(Conditions conds, String suffix) {
		RecordSet rs;
		String content = "sqh.ST_QUERY_HIS_ID,sqh.ST_ITEM_NAME,sqh.ST_MODULE_NAME,sqh.ST_MODULE_OP,sqh.ST_NAME,sqh.ST_IDENTITY_NO,ia.ST_DISTRICT,ia.ST_STREET,sqh.DT_CREATE,sqh.ST_OP_RESULT,sqh.ST_ASSIST_ID";
		String table = "(select ST_QUERY_HIS_ID,ST_MACHINE_ID,DT_CREATE,ST_ITEM_NAME,ST_MODULE_NAME,ST_MODULE_OP,ST_NAME,ST_IDENTITY_NO,ST_OP_RESULT,ST_ASSIST_ID " +
						"from SELM_QUERY_HIS "+
						"union all  "+
						"select ST_QUERY_HIS_ID,ST_MACHINE_ID,DT_CREATE,ST_ITEM_NAME,ST_MODULE_NAME,ST_MODULE_OP,ST_NAME,ST_IDENTITY_NO,ST_OP_RESULT,ST_ASSIST_ID  " +
						"from selm_query_his_2022) sqh "+ 
						"join infopub_device_info idi on sqh.ST_MACHINE_ID = idi.ST_DEVICE_MAC "+
						"join infopub_address ia on ia.ST_ADDRESS_ID = idi.ST_ADDRESS_ID " +
						"join infopub_device_type idt on idi.ST_TYPE_ID = idt.ST_TYPE_ID ";
		if (con == null) {
		     rs = SQL.query(table, content, conds, suffix);
		} else {
		     rs = SQL.query(con, table, content, conds, suffix);
		}
	        
		ArrayList<SelmQueryHisExcel> al = new ArrayList<SelmQueryHisExcel>();
		SelmQueryHisExcel info = null;
		String op_result = "";
		while (rs.next()) {
			info = new SelmQueryHisExcel();
        	info.setStQueryHisId(rs.getOriginalString("ST_QUERY_HIS_ID"));
        	info.setStItemName(rs.getOriginalString("ST_ITEM_NAME"));
        	info.setStModuleName(rs.getOriginalString("ST_MODULE_NAME"));
        	info.setStModuleOp(rs.getOriginalString("ST_MODULE_OP"));
        	info.setStName(rs.getOriginalString("ST_NAME"));
        	info.setStIdentityNo(rs.getOriginalString("ST_IDENTITY_NO"));
        	info.setStExt3(rs.getOriginalString("ST_DISTRICT"));
        	info.setStExt4(rs.getOriginalString("ST_STREET"));
        	info.setDtCreate(rs.getTimestamp("DT_CREATE"));
        	info.setStAssistId(rs.getOriginalString("ST_ASSIST_ID"));
        	op_result = rs.getOriginalString("ST_OP_RESULT");
        	if("SUCCESS".equals(op_result)){
        		info.setStOpResult("成功");
        	}else{
        		info.setStOpResult("");
        	}
            al.add(info);
        }
		return al;
    }

	
}
