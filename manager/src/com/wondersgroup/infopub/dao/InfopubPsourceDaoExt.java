package com.wondersgroup.infopub.dao;

import java.sql.Connection;
import java.util.ArrayList;
import java.util.List;

import org.springframework.stereotype.Repository;

import wfc.facility.tool.autocode.PaginationArrayList;
import wfc.service.database.Condition;
import wfc.service.database.Conditions;
import wfc.service.database.RecordSet;
import wfc.service.database.SQL;

import com.wondersgroup.infopub.bean.InfopubPsourceExt;

/**
 * 发布源
 * 
 * @author generated by wfc.facility.tool.autocode.InternalDaoGenerator
 */
@Repository
public class InfopubPsourceDaoExt extends InfopubPsourceDao {

	private Connection con = null;

	public InfopubPsourceDaoExt() {
	}

	public InfopubPsourceDaoExt(Connection con) {
		this.con = con;
	}

	public List<InfopubPsourceExt> queryWithContent(Conditions conds,
			String suffix, int pageSize, int currentPage) {
		RecordSet rs;
		String content = "IP.*, IA.CL_CONTENT";
		String table = "INFOPUB_PSOURCE IP LEFT JOIN INFOPUB_ATTACHMENT IA ON IP.ST_ATTACH_ID = IA.ST_ATTACH_ID";
		if (con == null) {
			rs = SQL.query(table, content, conds, suffix, pageSize,
					currentPage);
		} else {
			rs = SQL.query(con, table, content, conds, suffix,
					pageSize, currentPage);
		}
		PaginationArrayList<InfopubPsourceExt> pal = new PaginationArrayList<InfopubPsourceExt>(
				rs.TOTAL_RECORD_COUNT, rs.COMMON_PAGE_SIZE, rs.CURRENT_PAGE);
		while (rs.next()) {
			InfopubPsourceExt info = new InfopubPsourceExt();
			setProperties(info, rs);
			pal.add(info);
		}
		return pal;
	}
	
    public List<InfopubPsourceExt> queryWithContent(Conditions conds, String suffix) {
        RecordSet rs;
        String content = "IP.*, IA.CL_CONTENT";
		String table = "INFOPUB_PSOURCE IP LEFT JOIN INFOPUB_ATTACHMENT IA ON IP.ST_ATTACH_ID = IA.ST_ATTACH_ID";
        if (con == null) {
            rs = SQL.query(table, content, conds, suffix);
        } else {
            rs = SQL.query(con, table, content, conds, suffix);
        }
        ArrayList<InfopubPsourceExt> al = new ArrayList<InfopubPsourceExt>();
        while (rs.next()) {
        	InfopubPsourceExt info = new InfopubPsourceExt();
            setProperties(info, rs);
            al.add(info);
        }
        return al;
    }

	public static void setProperties(InfopubPsourceExt info, RecordSet rs) {
		info.setStPsourceId(rs.getOriginalString("ST_PSOURCE_ID"));
		info.setStPsourceName(rs.getOriginalString("ST_PSOURCE_NAME"));
		info.setNmOffline(rs.getBigDecimal("NM_OFFLINE"));
		info.setStAttachId(rs.getOriginalString("ST_ATTACH_ID"));
		info.setStUserId(rs.getOriginalString("ST_USER_ID"));
		info.setDtCreate(rs.getTimestamp("DT_CREATE"));
		info.setDtUpdate(rs.getTimestamp("DT_UPDATE"));
		info.setStDesc(rs.getOriginalString("ST_DESC"));
		info.setStWorkspaceId(rs.getOriginalString("ST_WORKSPACE_ID"));
		info.setStContent(rs.getOriginalString("CL_CONTENT"));
	}

	public InfopubPsourceExt getWithContent(String psourceId) {
		 Conditions conds = Conditions.newAndConditions();
        conds.add(new Condition("IP.ST_PSOURCE_ID", Condition.OT_EQUAL, psourceId));
        List<InfopubPsourceExt> list = queryWithContent(conds, null);
        return list.size() > 0 ? list.get(0) : null;
	}
}
