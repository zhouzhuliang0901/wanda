package com.wondersgroup.infopub.dao;

import java.sql.Connection;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import org.springframework.stereotype.Repository;

import wfc.facility.tool.autocode.PaginationArrayList;
import wfc.service.database.Condition;
import wfc.service.database.Conditions;
import wfc.service.database.RecordSet;
import wfc.service.database.SQL;

import com.wondersgroup.infopub.bean.InfopubPublish;

/**
 * 设备发布
 * @author generated by wfc.facility.tool.autocode.InternalDaoGenerator
 */
@Repository
public class InfopubPublishDao {

    private Connection con = null;

    public InfopubPublishDao() {
    }

    public InfopubPublishDao(Connection con) {
        this.con = con;
    }

    public void add(InfopubPublish info) {
        String sql = "insert into INFOPUB_PUBLISH(ST_PUBLISH_ID, ST_DEVICE_ID, ST_PSOURCE_ID, ST_PUBLISH_NAME, NM_PRIORITY, ST_PTYPE, ST_PSTART, ST_PEND, ST_PERIOD, DT_PUBLISH, DT_CREATE, DT_UPDATE, ST_DESC) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        Object[] obj = {
            info.getStPublishId(),
            info.getStDeviceId(),
            info.getStPsourceId(),
            info.getStPublishName(),
            info.getNmPriority(),
            info.getStPtype(),
            info.getStPstart(),
            info.getStPend(),
            info.getStPeriod(),
            info.getDtPublish(),
            info.getDtCreate(),
            info.getDtUpdate(),
            info.getStDesc()        	
        };
        if (con == null) {
            SQL.execute(sql, obj);
        } else {
            SQL.execute(con, sql, obj);
        }
    }

    public void update(InfopubPublish info) {
        String sql = "update INFOPUB_PUBLISH set ST_DEVICE_ID = ?, ST_PSOURCE_ID = ?, ST_PUBLISH_NAME = ?, NM_PRIORITY = ?, ST_PTYPE = ?, ST_PSTART = ?, ST_PEND = ?, ST_PERIOD = ?, DT_PUBLISH = ?, DT_CREATE = ?, DT_UPDATE = ?, ST_DESC = ? where ST_PUBLISH_ID = ?";
        Object[] obj = {
            info.getStDeviceId(),
            info.getStPsourceId(),
            info.getStPublishName(),
            info.getNmPriority(),
            info.getStPtype(),
            info.getStPstart(),
            info.getStPend(),
            info.getStPeriod(),
            info.getDtPublish(),
            info.getDtCreate(),
            info.getDtUpdate(),
            info.getStDesc(),
            info.getStPublishId()        	
        };
        if (con == null) {
            SQL.execute(sql, obj);
        } else {
            SQL.execute(con, sql, obj);
        }
    }

    public int update(Map<String, Object> map, Conditions conds) {
        String sql = "update INFOPUB_PUBLISH set ";
        List<Object> list = new ArrayList<Object>();
        int i = 0;
        for (String field : map.keySet()) {
            if (i++ > 0) {
                sql += ", ";
            }
            sql += field + " = ?";
            list.add(map.get(field));
        }
        String subsql = conds != null ? conds.toString() : "";
        if ("".equals(subsql)) {
            if (con == null) {
                return SQL.execute(sql).TOTAL_RECORD_COUNT;
            } else {
                return SQL.execute(con, sql).TOTAL_RECORD_COUNT;
            }
        } else {
            sql += " where " + subsql;
            list.addAll(conds.getObjectList());
            if (con == null) {
                return SQL.execute(sql, list.toArray()).TOTAL_RECORD_COUNT;
            } else {
                return SQL.execute(con, sql, list.toArray()).TOTAL_RECORD_COUNT;
            }
        }
    }
    
    public int delete(Conditions conds) {
        String sql = "delete from INFOPUB_PUBLISH";
        String subsql = conds != null ? conds.toString() : "";
        if ("".equals(subsql)) {
            if (con == null) {
                return SQL.execute(sql).TOTAL_RECORD_COUNT;
            } else {
                return SQL.execute(con, sql).TOTAL_RECORD_COUNT;
            }
        } else {
            sql += " where " + subsql;
            if (con == null) {
                return SQL.execute(sql, conds.getObjectArray()).TOTAL_RECORD_COUNT;
            } else {
                return SQL.execute(con, sql, conds.getObjectArray()).TOTAL_RECORD_COUNT;
            }
        }
    }

	public void delete(String[] stPublishId) {
        Conditions conds = Conditions.newOrConditions();
        for (int i = 0; i < stPublishId.length; i++) {
            Conditions subconds = Conditions.newAndConditions();
            subconds.add(new Condition("ST_PUBLISH_ID", Condition.OT_EQUAL, stPublishId[i]));
            conds.add(subconds);
        }
        delete(conds);
    }

	public void delete(String stPublishId) {
        Conditions conds = Conditions.newAndConditions();
        conds.add(new Condition("ST_PUBLISH_ID", Condition.OT_EQUAL, stPublishId));
        delete(conds);
    }

    public PaginationArrayList<InfopubPublish> query(Conditions conds, String suffix, int pageSize, int currentPage) {
        RecordSet rs;
        if (con == null) {
            rs = SQL.query("INFOPUB_PUBLISH", "*", conds, suffix, pageSize, currentPage);
        } else {
            rs = SQL.query(con, "INFOPUB_PUBLISH", "*", conds, suffix, pageSize, currentPage);
        }
        PaginationArrayList<InfopubPublish> pal = new PaginationArrayList<InfopubPublish>(rs.TOTAL_RECORD_COUNT, rs.COMMON_PAGE_SIZE, rs.CURRENT_PAGE);
        while (rs.next()) {
            InfopubPublish info = new InfopubPublish();
            setProperties(info, rs);
            pal.add(info);
        }
        return pal;
    }

    public List<InfopubPublish> query(Conditions conds, String suffix) {
        RecordSet rs;
        if (con == null) {
            rs = SQL.query("INFOPUB_PUBLISH", "*", conds, suffix);
        } else {
            rs = SQL.query(con, "INFOPUB_PUBLISH", "*", conds, suffix);
        }
        ArrayList<InfopubPublish> al = new ArrayList<InfopubPublish>();
        while (rs.next()) {
            InfopubPublish info = new InfopubPublish();
            setProperties(info, rs);
            al.add(info);
        }
        return al;
    }
    
    public static void setProperties(InfopubPublish info, RecordSet rs){
        info.setStPublishId(rs.getOriginalString("ST_PUBLISH_ID"));
        info.setStDeviceId(rs.getOriginalString("ST_DEVICE_ID"));
        info.setStPsourceId(rs.getOriginalString("ST_PSOURCE_ID"));
        info.setStPublishName(rs.getOriginalString("ST_PUBLISH_NAME"));
        info.setNmPriority(rs.getBigDecimal("NM_PRIORITY"));
        info.setStPtype(rs.getOriginalString("ST_PTYPE"));
        info.setStPstart(rs.getOriginalString("ST_PSTART"));
        info.setStPend(rs.getOriginalString("ST_PEND"));
        info.setStPeriod(rs.getOriginalString("ST_PERIOD"));
        info.setDtPublish(rs.getTimestamp("DT_PUBLISH"));
        info.setDtCreate(rs.getTimestamp("DT_CREATE"));
        info.setDtUpdate(rs.getTimestamp("DT_UPDATE"));
        info.setStDesc(rs.getOriginalString("ST_DESC"));
    }

	public InfopubPublish get(String stPublishId) {
        Conditions conds = Conditions.newAndConditions();
        conds.add(new Condition("ST_PUBLISH_ID", Condition.OT_EQUAL, stPublishId));
        List<InfopubPublish> list = query(conds, null);
        return list.size() > 0 ? list.get(0) : null;
    }

}
