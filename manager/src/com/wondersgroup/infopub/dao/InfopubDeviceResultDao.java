package com.wondersgroup.infopub.dao;

import java.math.*;
import java.sql.*;
import java.util.*;

import javax.sql.rowset.serial.SerialClob;
import javax.sql.rowset.serial.SerialException;

import wfc.facility.tool.autocode.*;
import wfc.service.database.*;
import org.springframework.stereotype.Repository;

import com.wondersgroup.infopub.bean.InfopubDeviceResult;

/**
 * 设备状态结果信息
 * @author generated by wfc.facility.tool.autocode.InternalDaoGenerator
 */
@Repository
public class InfopubDeviceResultDao {

    private Connection con = null;

    public InfopubDeviceResultDao() {
    }

    public InfopubDeviceResultDao(Connection con) {
        this.con = con;
    }

    public void add(InfopubDeviceResult info) {
        String sql = "insert into INFOPUB_DEVICE_RESULT(ST_DEVICE_RESULT_ID, ST_DEVICE_ID, NM_MEM_USED, NM_CPU_USED, CL_HD_USED,CL_NET_USED,CL_SERVICE_USED, DT_CREATE, ST_EXT1, ST_EXT2) values (?, ?, ?, ?, ?, ?, ?, ?,?,?)";
        Object[] obj = {
            info.getStDeviceResultId(),
            info.getStDeviceId(),
            info.getNmMemUsed(),
            info.getNmCpuUsed(),
            info.getClHdUsed(),
            info.getClNetUsed(),
            info.getClServiceUsed(),
            info.getDtCreate(),
            info.getStExt1(),
            info.getStExt2()        	
        };
        if (con == null) {
            SQL.execute(sql, obj);
        } else {
            SQL.execute(con, sql, obj);
        }
    }

    public void update(InfopubDeviceResult info) {
        String sql = "update INFOPUB_DEVICE_RESULT set ST_DEVICE_ID = ?, NM_MEM_USED = ?, NM_CPU_USED = ?, CL_HD_USED = ?,CL_NET_USED=?,CL_SERVICE_USED=?, DT_CREATE = ?, ST_EXT1 = ?, ST_EXT2 = ? where ST_DEVICE_RESULT_ID = ?";
        Object[] obj = {
            info.getStDeviceId(),
            info.getNmMemUsed(),
            info.getNmCpuUsed(),
            info.getClHdUsed(),
            info.getClNetUsed(),
            info.getClServiceUsed(),
            info.getDtCreate(),
            info.getStExt1(),
            info.getStExt2(),
            info.getStDeviceResultId()        	
        };
        if (con == null) {
            SQL.execute(sql, obj);
        } else {
            SQL.execute(con, sql, obj);
        }
    }

    public int update(Map<String, Object> map, Conditions conds) {
        String sql = "update INFOPUB_DEVICE_RESULT set ";
        List<Object> list = new ArrayList<Object>();
        int i = 0;
        for (String field : map.keySet()) {
            if (i++ > 0) {
                sql += ", ";
            }
            sql += field + " = ?";
            list.add(map.get(field));
        }
        String subsql = conds != null ? conds.toString() : "";
        if ("".equals(subsql)) {
            if (con == null) {
                return SQL.execute(sql).TOTAL_RECORD_COUNT;
            } else {
                return SQL.execute(con, sql).TOTAL_RECORD_COUNT;
            }
        } else {
            sql += " where " + subsql;
            list.addAll(conds.getObjectList());
            if (con == null) {
                return SQL.execute(sql, list.toArray()).TOTAL_RECORD_COUNT;
            } else {
                return SQL.execute(con, sql, list.toArray()).TOTAL_RECORD_COUNT;
            }
        }
    }
    
    public int delete(Conditions conds) {
        String sql = "delete from INFOPUB_DEVICE_RESULT";
        String subsql = conds != null ? conds.toString() : "";
        if ("".equals(subsql)) {
            if (con == null) {
                return SQL.execute(sql).TOTAL_RECORD_COUNT;
            } else {
                return SQL.execute(con, sql).TOTAL_RECORD_COUNT;
            }
        } else {
            sql += " where " + subsql;
            if (con == null) {
                return SQL.execute(sql, conds.getObjectArray()).TOTAL_RECORD_COUNT;
            } else {
                return SQL.execute(con, sql, conds.getObjectArray()).TOTAL_RECORD_COUNT;
            }
        }
    }

	public void delete(String[] stDeviceResultId) {
        Conditions conds = Conditions.newOrConditions();
        for (int i = 0; i < stDeviceResultId.length; i++) {
            Conditions subconds = Conditions.newAndConditions();
            subconds.add(new Condition("ST_DEVICE_RESULT_ID", Condition.OT_EQUAL, stDeviceResultId[i]));
            conds.add(subconds);
        }
        delete(conds);
    }

	public void delete(String stDeviceResultId) {
        Conditions conds = Conditions.newAndConditions();
        conds.add(new Condition("ST_DEVICE_RESULT_ID", Condition.OT_EQUAL, stDeviceResultId));
        delete(conds);
    }

    public PaginationArrayList<InfopubDeviceResult> query(Conditions conds, String suffix, int pageSize, int currentPage) {
        RecordSet rs;
        if (con == null) {
            rs = SQL.query("INFOPUB_DEVICE_RESULT", "*", conds, suffix, pageSize, currentPage);
        } else {
            rs = SQL.query(con, "INFOPUB_DEVICE_RESULT", "*", conds, suffix, pageSize, currentPage);
        }
        PaginationArrayList<InfopubDeviceResult> pal = new PaginationArrayList<InfopubDeviceResult>(rs.TOTAL_RECORD_COUNT, rs.COMMON_PAGE_SIZE, rs.CURRENT_PAGE);
        while (rs.next()) {
            InfopubDeviceResult info = new InfopubDeviceResult();
            setProperties(info, rs);
            pal.add(info);
        }
        return pal;
    }

    public List<InfopubDeviceResult> query(Conditions conds, String suffix) {
        RecordSet rs;
        if (con == null) {
            rs = SQL.query("INFOPUB_DEVICE_RESULT", "*", conds, suffix);
        } else {
            rs = SQL.query(con, "INFOPUB_DEVICE_RESULT", "*", conds, suffix);
        }
        ArrayList<InfopubDeviceResult> al = new ArrayList<InfopubDeviceResult>();
        while (rs.next()) {
            InfopubDeviceResult info = new InfopubDeviceResult();
            setProperties(info, rs);
            al.add(info);
        }
        return al;
    }
    
    public static void setProperties(InfopubDeviceResult info, RecordSet rs){
        info.setStDeviceResultId(rs.getOriginalString("ST_DEVICE_RESULT_ID"));
        info.setStDeviceId(rs.getOriginalString("ST_DEVICE_ID"));
        info.setNmMemUsed(rs.getBigDecimal("NM_MEM_USED"));
        info.setNmCpuUsed(rs.getBigDecimal("NM_CPU_USED"));
        if(rs.getOriginalString("CL_HD_USED")!=null && !rs.getOriginalString("CL_HD_USED").equals("") ){
        	char[] ch = rs.getOriginalString("CL_HD_USED").toCharArray();
            try {
    			Clob c = new SerialClob(ch);
    			info.setClHdUsed(c);
    		} catch (SerialException e) {
    			e.printStackTrace();
    		} catch (SQLException e) {
    			e.printStackTrace();
    		}
       }
        if(rs.getOriginalString("CL_NET_USED")!=null && !rs.getOriginalString("CL_NET_USED").equals("") ){
        	char[] clNetUsed = rs.getOriginalString("CL_NET_USED").toCharArray();
             try {
     			Clob netUsed = new SerialClob(clNetUsed);
     			info.setClNetUsed(netUsed);
     		} catch (SerialException e) {
     			e.printStackTrace();
     		} catch (SQLException e) {
     			e.printStackTrace();
     		}
        }
        if(rs.getOriginalString("CL_SERVICE_USED")!=null && !rs.getOriginalString("CL_SERVICE_USED").equals("") ){
        	char[] clServiceUsed = rs.getOriginalString("CL_SERVICE_USED").toCharArray();
            try {
    			Clob serviceUsed = new SerialClob(clServiceUsed);
    			info.setClServiceUsed(serviceUsed);
    		} catch (SerialException e) {
    			e.printStackTrace();
    		} catch (SQLException e) {
    			e.printStackTrace();
    		}
        }
        info.setDtCreate(rs.getTimestamp("DT_CREATE"));
        info.setStExt1(rs.getOriginalString("ST_EXT1"));
        info.setStExt2(rs.getOriginalString("ST_EXT2"));
    }

	public InfopubDeviceResult getDeviceResultId(String stDeviceResultId) {
        Conditions conds = Conditions.newAndConditions();
        conds.add(new Condition("ST_DEVICE_RESULT_ID", Condition.OT_EQUAL, stDeviceResultId));
        List<InfopubDeviceResult> list = query(conds, null);
        return list.size() > 0 ? list.get(0) : null;
    }
	public InfopubDeviceResult get(String stDeviceId) {
		Conditions conds = Conditions.newAndConditions();
		conds.add(new Condition("ST_DEVICE_ID", Condition.OT_EQUAL, stDeviceId));
		List<InfopubDeviceResult> list = query(conds, null);
		return list.size() > 0 ? list.get(0) : null;
	}

}
