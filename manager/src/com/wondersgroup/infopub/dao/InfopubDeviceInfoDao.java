package com.wondersgroup.infopub.dao;

import java.math.BigDecimal;
import java.sql.Connection;
import java.sql.Timestamp;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;

import wfc.facility.tool.autocode.PaginationArrayList;
import wfc.service.database.Condition;
import wfc.service.database.Conditions;
import wfc.service.database.RecordSet;
import wfc.service.database.SQL;
import wfc.service.log.Log;

import com.wondersgroup.business.bean.SelmQueryHis;
import com.wondersgroup.infopub.bean.InfopubDeviceInfo;
import com.wondersgroup.infopub.bean.InfopubDeviceInfoExt;
import com.wondersgroup.infopub.bean.InfopubDeviceInfoMap;
import com.wondersgroup.infopub.bean.InfopubDeviceType;

/**
 * 信息设备
 * @author generated by wfc.facility.tool.autocode.InternalDaoGenerator
 */
@Repository
public class InfopubDeviceInfoDao {

    private Connection con = null;

    public InfopubDeviceInfoDao() {
    }

    public InfopubDeviceInfoDao(Connection con) {
        this.con = con;
    }

    public void add(InfopubDeviceInfo info) {
        String sql = "insert into INFOPUB_DEVICE_INFO(ST_DEVICE_ID, " +
        		"ST_DEVICE_NAME," +
        		" ST_DEVICE_CODE, " +
        		"ST_DEVICE_IP, " +
        		"ST_DEVICE_MAC, " +
        		"ST_DEVICE_ADDRESS, " +
        		"ST_TYPE_ID," +
        		" NM_IS_HOST," +
        		" NM_ORDER, " +
        		"NM_INTERVAL," +
        		" NM_RECOVER," +
        		" NM_DOWN_TRY," +
        		" NM_NOTIFICATION, " +
        		"NM_LNG," +
        		" NM_LAT," +
        		" NM_ONLINE," +
        		" ST_CHANNEL," +
        		" ST_CONFIG_ID," +
        		" NM_SDTYPE," +
        		" ST_USER_ID," +
        		" ST_AREA_ID," +
        		" ST_ADDRESS_ID, " +
        		"ST_CERT_KEY, " +
        		"DT_CREATE, " +
        		"DT_UPDATE," +
        		" ST_UPDATE, " +
        		"ST_DESC," +
        		"ST_ORGAN_ID," +
        		"ST_STATE) values (?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?)";
        Object[] obj = {
            info.getStDeviceId(),
            info.getStDeviceName(),
            info.getStDeviceCode(),
            info.getStDeviceIp(),
            info.getStDeviceMac(),
            info.getStDeviceAddress(),
            info.getStTypeId(),
            info.getNmIsHost(),
            info.getNmOrder(),
            info.getNmInterval(),
            info.getNmRecover(),
            info.getNmDownTry(),
            info.getNmNotification(),
            info.getNmLng(),
            info.getNmLat(),
            info.getNmOnline(),
            info.getStChannel(),
            info.getStConfigId(),
            info.getNmSdtype(),
            info.getStUserId(),
            info.getStAreaId(),
            info.getStAddressId(),
            info.getStCertKey(),
            info.getDtCreate(),
            info.getDtUpdate(),
            info.getStUpdate(),
            info.getStDesc(),
            info.getStOrganId(),
            info.getStState()
        };
        if (con == null) {
            SQL.execute(sql, obj);
        } else {
            SQL.execute(con, sql, obj);
        }
    }

    public void update(InfopubDeviceInfo info) {
        String sql = "update INFOPUB_DEVICE_INFO set ST_DEVICE_NAME = ?, ST_DEVICE_CODE = ?, ST_DEVICE_IP = ?, ST_DEVICE_MAC = ?, ST_DEVICE_ADDRESS = ?, ST_TYPE_ID = ?, NM_IS_HOST = ?, NM_ORDER = ?, NM_INTERVAL = ?, NM_RECOVER = ?, NM_DOWN_TRY = ?, NM_NOTIFICATION = ?, NM_LNG = ?, NM_LAT = ?, NM_ONLINE = ?, ST_CHANNEL = ?, ST_CONFIG_ID = ?, NM_SDTYPE = ?, ST_USER_ID = ?, ST_AREA_ID = ?, ST_ADDRESS_ID = ?, ST_CERT_KEY = ?, DT_CREATE = ?, DT_UPDATE = ?,ST_UPDATE = ?,  ST_DESC = ? , ST_ORGAN_ID = ? ,ST_STATE = ? where ST_DEVICE_ID = ?";
        Object[] obj = {
            info.getStDeviceName(),
            info.getStDeviceCode(),
            info.getStDeviceIp(),
            info.getStDeviceMac(),
            info.getStDeviceAddress(),
            info.getStTypeId(),
            info.getNmIsHost(),
            info.getNmOrder(),
            info.getNmInterval(),
            info.getNmRecover(),
            info.getNmDownTry(),
            info.getNmNotification(),
            info.getNmLng(),
            info.getNmLat(),
            info.getNmOnline(),
            info.getStChannel(),
            info.getStConfigId(),
            info.getNmSdtype(),
            info.getStUserId(),
            info.getStAreaId(),
            info.getStAddressId(),
            info.getStCertKey(),
            info.getDtCreate(),
            info.getDtUpdate(),
            info.getStUpdate(),
            info.getStDesc(),
            info.getStOrganId(),
            info.getStState(),
            info.getStDeviceId()
            
        };
        if (con == null) {
            SQL.execute(sql, obj);
        } else {
            SQL.execute(con, sql, obj);
        }
    }

    public int update(Map<String, Object> map, Conditions conds) {
        String sql = "update INFOPUB_DEVICE_INFO set ";
        List<Object> list = new ArrayList<Object>();
        int i = 0;
        for (String field : map.keySet()) {
            if (i++ > 0) {
                sql += ", ";
            }
            sql += field + " = ?";
            list.add(map.get(field));
        }
        String subsql = conds != null ? conds.toString() : "";
        if ("".equals(subsql)) {
            if (con == null) {
                return SQL.execute(sql).TOTAL_RECORD_COUNT;
            } else {
                return SQL.execute(con, sql).TOTAL_RECORD_COUNT;
            }
        } else {
            sql += " where " + subsql;
            list.addAll(conds.getObjectList());
            if (con == null) {
                return SQL.execute(sql, list.toArray()).TOTAL_RECORD_COUNT;
            } else {
                return SQL.execute(con, sql, list.toArray()).TOTAL_RECORD_COUNT;
            }
        }
    }
    
    
    /**
     * 方法描述：刷新更新时间
     */
    public int updateTime(InfopubDeviceInfo info) {
        String sql = "update INFOPUB_DEVICE_INFO set DT_UPDATE = ? where ST_DEVICE_MAC = ?";
        Object[] obj = {
        	info.getDtUpdate(),
            info.getStDeviceMac()    	
        };
        if (con == null) {
            return SQL.execute(sql, obj).TOTAL_RECORD_COUNT;
        } else {
        	return SQL.execute(con, sql, obj).TOTAL_RECORD_COUNT;
        }
    }

    /**
     * 方法描述：刷新更新时间
     */
    public int updateLogicDelete(String deviceId) {
        String sql = "update INFOPUB_DEVICE_INFO set ST_STATE = 0 where ST_DEVICE_ID =  '" + deviceId + "'";
        if (con == null) {
            return SQL.execute(sql).TOTAL_RECORD_COUNT;
        } else {
            return SQL.execute(con, sql).TOTAL_RECORD_COUNT;
        }
    }
   
    public int delete(Conditions conds) {
        String sql = "delete from INFOPUB_DEVICE_INFO";
        String subsql = conds != null ? conds.toString() : "";
        if ("".equals(subsql)) {
            if (con == null) {
                return SQL.execute(sql).TOTAL_RECORD_COUNT;
            } else {
                return SQL.execute(con, sql).TOTAL_RECORD_COUNT;
            }
        } else {
            sql += " where " + subsql;
            if (con == null) {
                return SQL.execute(sql, conds.getObjectArray()).TOTAL_RECORD_COUNT;
            } else {
                return SQL.execute(con, sql, conds.getObjectArray()).TOTAL_RECORD_COUNT;
            }
        }
    }

	public void delete(String[] stDeviceId) {
        Conditions conds = Conditions.newOrConditions();
        for (int i = 0; i < stDeviceId.length; i++) {
            Conditions subconds = Conditions.newAndConditions();
            subconds.add(new Condition("ST_DEVICE_ID", Condition.OT_EQUAL, stDeviceId[i]));
            conds.add(subconds);
        }
        delete(conds);
    }

	public void delete(String stDeviceId) {
        Conditions conds = Conditions.newAndConditions();
        conds.add(new Condition("ST_DEVICE_ID", Condition.OT_EQUAL, stDeviceId));
        delete(conds);
    }

    public PaginationArrayList<InfopubDeviceInfo> query(Conditions conds, String suffix, int pageSize, int currentPage) {
        RecordSet rs;
        if (con == null) {
            rs = SQL.query("INFOPUB_DEVICE_INFO", "*", conds, suffix, pageSize, currentPage);
        } else {
            rs = SQL.query(con, "INFOPUB_DEVICE_INFO", "*", conds, suffix, pageSize, currentPage);
        }
        PaginationArrayList<InfopubDeviceInfo> pal = new PaginationArrayList<InfopubDeviceInfo>(rs.TOTAL_RECORD_COUNT, rs.COMMON_PAGE_SIZE, rs.CURRENT_PAGE);
        while (rs.next()) {
            InfopubDeviceInfo info = new InfopubDeviceInfo();
            setProperties(info, rs);
            pal.add(info);
        }
        return pal;
    }
    
    public PaginationArrayList<InfopubDeviceInfo> queryDWithIOrNoI(Conditions conds, String suffix, int pageSize, int currentPage) {
        RecordSet rs;
        String table ="infopub_device_info idi left join (select distinct ST_DEVICE_ID  from selm_device_item ) sdi " +
        		"on idi.ST_DEVICE_ID = sdi.ST_DEVICE_ID";
        String content = "idi.*";
        if (con == null) {
            rs = SQL.query(table, content, conds, suffix, pageSize, currentPage);
        } else {
            rs = SQL.query(con, table, content, conds, suffix, pageSize, currentPage);
        }
        PaginationArrayList<InfopubDeviceInfo> pal = new PaginationArrayList<InfopubDeviceInfo>(rs.TOTAL_RECORD_COUNT, rs.COMMON_PAGE_SIZE, rs.CURRENT_PAGE);
        while (rs.next()) {
            InfopubDeviceInfo info = new InfopubDeviceInfo();
            setProperties(info, rs);
            pal.add(info);
        }
        return pal;
    }

    public List<InfopubDeviceInfo> query(Conditions conds, String suffix) {
        RecordSet rs;
        if (con == null) {
            rs = SQL.query("INFOPUB_DEVICE_INFO", "*", conds, suffix);
        } else {
            rs = SQL.query(con, "INFOPUB_DEVICE_INFO", "*", conds, suffix);
        }
        ArrayList<InfopubDeviceInfo> al = new ArrayList<InfopubDeviceInfo>();
        while (rs.next()) {
            InfopubDeviceInfo info = new InfopubDeviceInfo();
            setProperties(info, rs);
            al.add(info);
        }
        return al;
    }

    public List<InfopubDeviceInfo> queryText(Conditions conds, String suffix) {
        RecordSet rs;
        if (con == null) {
            rs = SQL.query("INFOPUB_DEVICE_INFO", "*", conds, suffix);
        } else {
            rs = SQL.query(con, "INFOPUB_DEVICE_INFO", "*", conds, suffix);
        }
        ArrayList<InfopubDeviceInfo> al = new ArrayList<InfopubDeviceInfo>();
        while (rs.next()) {
            InfopubDeviceInfo info = new InfopubDeviceInfo();
            setPropertiesText(info,rs);
            al.add(info);
        }
        String typeId = "";
        BigDecimal nmDtype = new BigDecimal(0);
        for (InfopubDeviceInfo in : al){
            SimpleDateFormat dfs = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
            String updateTime = dfs.format(in.getDtUpdate());
            Date date = new Date();
            String nowTime = dfs.format(date);
            Date begin = null;
            Date end = null;
            try {
                begin = dfs.parse(updateTime);
                end = dfs.parse(nowTime);
            } catch (ParseException e) {
                e.printStackTrace();
            }
            
            
            if (!typeId.equals(in.getStTypeId()) && typeId!="" && !typeId.isEmpty()){
            	typeId = in.getStTypeId();
                if(StringUtils.isNotEmpty(typeId)){
                    nmDtype = getTypeById(typeId);
                }
                if(nmDtype.equals(new BigDecimal(1))){
                    if (begin != null && end != null) {
                        long second=(end.getTime()-begin.getTime())/1000;//除以1000是为了转换成秒
                        //时间小于4个小时在线
                        if (second < 14400) {
                            in.setNmOnline(new BigDecimal(1));
                        }else {
                            in.setNmOnline(new BigDecimal(0));
                        }
                    } else {
                        Log.debug("更新时间begin 或 系统现在时间 end 为 null");
                    }

                }else if(nmDtype.equals(new BigDecimal(0))){
                    if (begin != null && end != null) {
                        long second=(end.getTime()-begin.getTime())/1000;//除以1000是为了转换成秒
                        if (second < 30) {
                            in.setNmOnline(new BigDecimal(1));
                        }else {
                            in.setNmOnline(new BigDecimal(0));
                        }
                    } else {
                        Log.debug("更新时间begin 或 系统现在时间 end 为 null");
                    }
                }
            }else if (typeId.equals(in.getStTypeId())){
                if(nmDtype.equals(new BigDecimal(1))){
                    if (begin != null && end != null) {
                        long second=(end.getTime()-begin.getTime())/1000;//除以1000是为了转换成秒
                        //时间小于4个小时在线
                        if (second < 14400) {
                            in.setNmOnline(new BigDecimal(1));
                        }else {
                            in.setNmOnline(new BigDecimal(0));
                        }
                    } else {
                        Log.debug("更新时间begin 或 系统现在时间 end 为 null");
                    }

                }else if(nmDtype.equals(new BigDecimal(0))){
                    if (begin != null && end != null) {
                        long second=(end.getTime()-begin.getTime())/1000;//除以1000是为了转换成秒
                        if (second < 30) {
                            in.setNmOnline(new BigDecimal(1));
                        }else {
                            in.setNmOnline(new BigDecimal(0));
                        }
                    } else {
                        Log.debug("更新时间begin 或 系统现在时间 end 为 null");
                    }
                }
            }




        }
        return al;
    }
    
    public List<InfopubDeviceInfo> queryWithType(Conditions conds, String suffix) {
    	RecordSet rs;
        String content = "ST_DEVICE_CODE,ST_DEVICE_MAC,ST_DEVICE_ADDRESS";
        String table = "infopub_device_info idi left join infopub_device_type idt " +
         		"on idi.ST_TYPE_ID = idt.ST_TYPE_ID"; 
        if (con == null) {
            rs = SQL.query(table, content, conds, suffix);
        } else {
            rs = SQL.query(con, table, content, conds, suffix);
        }
        ArrayList<InfopubDeviceInfo> al = new ArrayList<InfopubDeviceInfo>();
        while (rs.next()) {
            InfopubDeviceInfo info = new InfopubDeviceInfo();
            info.setStDeviceCode(rs.getOriginalString("ST_DEVICE_CODE"));
        	info.setStDeviceMac(rs.getOriginalString("ST_DEVICE_MAC"));
        	info.setStDeviceAddress(rs.getOriginalString("ST_DEVICE_ADDRESS"));
            al.add(info);
        }
        return al; 
    }
    public void setPropertiesText(InfopubDeviceInfo info, RecordSet rs){
    	info.setStDeviceId(rs.getOriginalString("ST_DEVICE_ID"));
        info.setStDeviceName(rs.getOriginalString("ST_DEVICE_NAME"));
        info.setStDeviceCode(rs.getOriginalString("ST_DEVICE_CODE"));
        info.setStDeviceIp(rs.getOriginalString("ST_DEVICE_IP"));
        info.setStDeviceMac(rs.getOriginalString("ST_DEVICE_MAC"));
        info.setStDeviceAddress(rs.getOriginalString("ST_DEVICE_ADDRESS"));
        info.setStTypeId(rs.getOriginalString("ST_TYPE_ID"));
        info.setNmIsHost(rs.getBigDecimal("NM_IS_HOST"));
        info.setNmOrder(rs.getBigDecimal("NM_ORDER"));
        info.setNmInterval(rs.getBigDecimal("NM_INTERVAL"));
        info.setNmRecover(rs.getBigDecimal("NM_RECOVER"));
        info.setNmDownTry(rs.getBigDecimal("NM_DOWN_TRY"));
        info.setNmNotification(rs.getBigDecimal("NM_NOTIFICATION"));
        info.setNmLng(rs.getBigDecimal("NM_LNG"));
        info.setNmLat(rs.getBigDecimal("NM_LAT"));
		info.setStConfigId(rs.getOriginalString("ST_CONFIG_ID"));
        info.setStChannel(rs.getOriginalString("ST_CHANNEL"));
        info.setNmSdtype(rs.getBigDecimal("NM_SDTYPE"));
        info.setStUserId(rs.getOriginalString("ST_USER_ID"));
        info.setStAreaId(rs.getOriginalString("ST_AREA_ID"));
        info.setStAddressId(rs.getOriginalString("ST_ADDRESS_ID"));
        info.setStCertKey(rs.getOriginalString("ST_CERT_KEY"));
        info.setDtCreate(rs.getTimestamp("DT_CREATE"));
        info.setDtUpdate(rs.getTimestamp("DT_UPDATE"));
        info.setStUpdate(rs.getTimestamp("ST_UPDATE"));
        info.setStDesc(rs.getOriginalString("ST_DESC"));
        info.setStOrganId(rs.getOriginalString("ST_ORGAN_ID"));
        info.setStState(rs.getBigDecimal("ST_STATE"));
    }
    
    public void setProperties(InfopubDeviceInfo info, RecordSet rs){
    	info.setStDeviceId(rs.getOriginalString("ST_DEVICE_ID"));
        info.setStDeviceName(rs.getOriginalString("ST_DEVICE_NAME"));
        info.setStDeviceCode(rs.getOriginalString("ST_DEVICE_CODE"));
        info.setStDeviceIp(rs.getOriginalString("ST_DEVICE_IP"));
        info.setStDeviceMac(rs.getOriginalString("ST_DEVICE_MAC"));
        info.setStDeviceAddress(rs.getOriginalString("ST_DEVICE_ADDRESS"));
        info.setStTypeId(rs.getOriginalString("ST_TYPE_ID"));
        info.setNmIsHost(rs.getBigDecimal("NM_IS_HOST"));
        info.setNmOrder(rs.getBigDecimal("NM_ORDER"));
        info.setNmInterval(rs.getBigDecimal("NM_INTERVAL"));
        info.setNmRecover(rs.getBigDecimal("NM_RECOVER"));
        info.setNmDownTry(rs.getBigDecimal("NM_DOWN_TRY"));
        info.setNmNotification(rs.getBigDecimal("NM_NOTIFICATION"));
        info.setNmLng(rs.getBigDecimal("NM_LNG"));
        info.setNmLat(rs.getBigDecimal("NM_LAT"));
        
        SimpleDateFormat dfs = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        String updateTime = dfs.format(rs.getTimestamp("DT_UPDATE"));
        Date date = new Date();
        String nowTime = dfs.format(date);
        Date begin = null;
        Date end = null;
        String stTypeId = rs.getOriginalString("ST_TYPE_ID");
        BigDecimal nmDtype = new BigDecimal(0);
        if(StringUtils.isNotEmpty(stTypeId)){
        	nmDtype = getTypeById(stTypeId);
        }
        try {
			begin = dfs.parse(updateTime);
			end = dfs.parse(nowTime);
		} catch (ParseException e) {
			e.printStackTrace();
		}
        //判断银行的设备
        /*if("29cf0e14-2d45-4ee7-886d-39a062165149".equals(stTypeId)
        		||"c0c4e5d8-03bd-454a-896e-d9828689c3e1".equals(stTypeId)
        		||"076958d8-fa5f-45c7-a8bb-31c90f36daad".equals(stTypeId)
        		||"990168e7-76c0-4469-babd-dfe88e2a96a3".equals(stTypeId)
        		||"ba1b9a00-1655-4cf4-8cb4-5a363ad9d307".equals(stTypeId)
        		||"18c3bcf9-7aed-4e41-a00d-69bfd4169b64".equals(stTypeId)){*/
        if(nmDtype.equals(new BigDecimal(1))){
        	if (begin != null && end != null) {
    			long second=(end.getTime()-begin.getTime())/1000;//除以1000是为了转换成秒
    			//时间小于4个小时在线
    			if (second < 14400) {
    				info.setNmOnline(new BigDecimal(1));
    			}else {
    				info.setNmOnline(new BigDecimal(0));
    			}
    		} else {
    			Log.debug("更新时间begin 或 系统现在时间 end 为 null");
    		}
        	
        }else if(nmDtype.equals(new BigDecimal(0))){
        	if (begin != null && end != null) {
    			long second=(end.getTime()-begin.getTime())/1000;//除以1000是为了转换成秒
    			if (second < 30) {
    				info.setNmOnline(new BigDecimal(1));
    			}else {
    				info.setNmOnline(new BigDecimal(0));
    			}
    		} else {
    			Log.debug("更新时间begin 或 系统现在时间 end 为 null");
    		}
        }
		
        //info.setNmOnline(rs.getBigDecimal("NM_ONLINE"));
		info.setStConfigId(rs.getOriginalString("ST_CONFIG_ID"));
        info.setStChannel(rs.getOriginalString("ST_CHANNEL"));
        info.setNmSdtype(rs.getBigDecimal("NM_SDTYPE"));
        info.setStUserId(rs.getOriginalString("ST_USER_ID"));
        info.setStAreaId(rs.getOriginalString("ST_AREA_ID"));
        info.setStAddressId(rs.getOriginalString("ST_ADDRESS_ID"));
        info.setStCertKey(rs.getOriginalString("ST_CERT_KEY"));
        info.setDtCreate(rs.getTimestamp("DT_CREATE"));
        info.setDtUpdate(rs.getTimestamp("DT_UPDATE"));
        info.setStUpdate(rs.getTimestamp("ST_UPDATE"));
        info.setStDesc(rs.getOriginalString("ST_DESC"));
        info.setStOrganId(rs.getOriginalString("ST_ORGAN_ID"));
        info.setStState(rs.getBigDecimal("ST_STATE"));
    }
    
    
    public BigDecimal getTypeById(String stTypeId){
    	Conditions conds = Conditions.newAndConditions();
        conds.add(new Condition("ST_TYPE_ID", Condition.OT_EQUAL, stTypeId));
        RecordSet rs;
        if (con == null) {
            rs = SQL.query("INFOPUB_DEVICE_TYPE", "*", conds, null);
        } else {
            rs = SQL.query(con, "INFOPUB_DEVICE_TYPE", "*", conds, null);
        }
        ArrayList<InfopubDeviceType> al = new ArrayList<InfopubDeviceType>();
        while (rs.next()) {
        	InfopubDeviceType info = new InfopubDeviceType();
            info.setStTypeId(rs.getOriginalString("ST_TYPE_ID"));
            info.setStTypeName(rs.getOriginalString("ST_TYPE_NAME"));
            info.setNmDtype(rs.getBigDecimal("NM_DTYPE"));
            al.add(info);
        }
        return al.size() > 0 ? al.get(0).getNmDtype() : new BigDecimal(0);
    }

	public InfopubDeviceInfo get(String stDeviceId) {
        Conditions conds = Conditions.newAndConditions();
        conds.add(new Condition("ST_DEVICE_ID", Condition.OT_EQUAL, stDeviceId));
        List<InfopubDeviceInfo> list = query(conds, null);
        return list.size() > 0 ? list.get(0) : null;
    }
	
	public InfopubDeviceInfo getCode(String stDeviceCode) {
        Conditions conds = Conditions.newAndConditions();
        conds.add(new Condition("ST_DEVICE_CODE", Condition.OT_EQUAL, stDeviceCode));
        List<InfopubDeviceInfo> list = query(conds, null);
        return list.size() > 0 ? list.get(0) : null;
    }
	
	public InfopubDeviceInfo getMac(String stDeviceMac) {
        Conditions conds = Conditions.newAndConditions();
        conds.add(new Condition("ST_DEVICE_MAC", Condition.OT_EQUAL, stDeviceMac));
        List<InfopubDeviceInfo> list = query(conds, null);
        return list.size() > 0 ? list.get(0) : null;
    }
	
	
	
	public void updateCretKey(String stCertKey, String stDeviceMac) {
		String sql = "update INFOPUB_DEVICE_INFO set ST_CERT_KEY = ? where ST_DEVICE_MAC = ?";
        Object[] obj = {stCertKey,stDeviceMac};
        if (con == null) {
            SQL.execute(sql, obj);
        } else {
            SQL.execute(con, sql, obj);
        }
		
	}

	public List<InfopubDeviceInfo> queryDis(Conditions conds, String suffix) {
        RecordSet rs;
        if (con == null) {
            rs = SQL.query("INFOPUB_DEVICE_INFO i JOIN INFOPUB_ADDRESS a ON i.ST_ADDRESS_ID=a.ST_ADDRESS_ID", "i.ST_DEVICE_MAC,i.DT_UPDATE", conds, suffix);
        } else {
            rs = SQL.query(con, "INFOPUB_DEVICE_INFO i JOIN INFOPUB_ADDRESS a ON i.ST_ADDRESS_ID=a.ST_ADDRESS_ID", "i.ST_DEVICE_MAC,i.DT_UPDATE", conds, suffix);
        }
        ArrayList<InfopubDeviceInfo> al = new ArrayList<InfopubDeviceInfo>();
        while (rs.next()) {
            InfopubDeviceInfo info = new InfopubDeviceInfo();
            setProperties(info, rs);
            al.add(info);
        }
        return al;
    }
	
	public List<InfopubDeviceInfo> queryItemNoDevice() {
		String sql = "SELECT DISTINCT(IDI.ST_DEVICE_MAC) FROM INFOPUB_DEVICE_INFO IDI" 
				+" JOIN SELM_QUERY_HIS SQH ON IDI.ST_DEVICE_MAC=SQH.ST_MACHINE_ID" 
				+" JOIN SELM_DEVICE_ITEM SDI ON IDI.ST_DEVICE_ID=SDI.ST_DEVICE_ID"
				+" JOIN SELM_ITEM SI ON SDI.ST_ITEM_ID=SI.ST_ITEM_ID"
				//事项编码匹配
				//+" WHERE SQH.ST_ITEM_NO IS NOT NULL AND SI.ST_ITEM_NO != SQH.ST_ITEM_NO";
				//事项名称匹配
				+" WHERE  SI.ST_MAIN_NAME != SQH.ST_ITEM_NAME";
	Object[] obj ={};
		RecordSet rs;
        if (con == null) {
            rs = SQL.execute(sql,obj);
        } else {
            rs = SQL.execute(con, sql,obj);
        }
        ArrayList<InfopubDeviceInfo> al = new ArrayList<InfopubDeviceInfo>();
        while (rs.next()) {
        	InfopubDeviceInfo info = new InfopubDeviceInfo();
        	 info.setStDeviceMac(rs.getOriginalString("ST_DEVICE_MAC"));
            al.add(info);
        }
        return al;
	}	
	
	
	public PaginationArrayList<InfopubDeviceInfo> queryItemWithDevice(Conditions conds, String suffix, int pageSize, int currentPage) {
		 RecordSet rs;
	        String content = "idi.ST_DEVICE_ID,idi.ST_DEVICE_NAME,idi.ST_DEVICE_MAC,idi.ST_DEVICE_ADDRESS,idi.ST_TYPE_ID,ssi.DT_AUDIT,ssi.NM_STATUS";
	        String table = "infopub_device_info idi left join selm_server_item ssi " +
	        		"on idi.ST_DEVICE_ID = ssi.ST_DEVICE_ID"; 
	        if (con == null) {
	            rs = SQL.query(table, content, conds, suffix, pageSize, currentPage);
	        } else {
	            rs = SQL.query(con, table, content, conds, suffix, pageSize, currentPage);
	        }
	        PaginationArrayList<InfopubDeviceInfo> pal = new PaginationArrayList<InfopubDeviceInfo>(rs.TOTAL_RECORD_COUNT, rs.COMMON_PAGE_SIZE, rs.CURRENT_PAGE);
	        while (rs.next()) {
	        	InfopubDeviceInfoExt info = new InfopubDeviceInfoExt();
	        	info.setStDeviceId(rs.getOriginalString("ST_DEVICE_ID"));
	        	info.setStDeviceMac(rs.getOriginalString("ST_DEVICE_MAC"));
	        	 info.setStDeviceName(rs.getOriginalString("ST_DEVICE_NAME"));
	        	 info.setStDeviceAddress(rs.getOriginalString("ST_DEVICE_ADDRESS"));
	        	 info.setStTypeId(rs.getOriginalString("ST_TYPE_ID"));
	        	 //审核更新时间selm_device_time
	        	 info.setDtUpdate(rs.getTimestamp("DT_AUDIT"));
	        	 //审核标识
	        	 info.setNmOrder(rs.getBigDecimal("NM_STATUS"));
	            pal.add(info);
	        }
	        return pal;
	}
	
	
	
	
	
	
	
	
	public List<InfopubDeviceInfoMap> queryMap(Conditions conds, String suffix) {
        RecordSet rs;
        if (con == null) {
            rs = SQL.query("INFOPUB_DEVICE_INFO", "*", conds, suffix);
        } else {
            rs = SQL.query(con, "INFOPUB_DEVICE_INFO", "*", conds, suffix);
        }
        ArrayList<InfopubDeviceInfoMap> al = new ArrayList<InfopubDeviceInfoMap>();
        while (rs.next()) {
        	InfopubDeviceInfoMap info = new InfopubDeviceInfoMap();
            setProperties(info, rs);
            al.add(info);
        }
        return al;
    }
	
	 public PaginationArrayList<InfopubDeviceInfo> querySelmAssistDevice(Conditions conds, String suffix, int pageSize, int currentPage) {
	        RecordSet rs;
	        String content = "A.*";
	        String table = "(SELECT IDI.ST_DEVICE_MAC,IDI.ST_DEVICE_CODE,IDI.ST_DEVICE_ADDRESS,IDT.ST_TYPE_NAME AS ST_TYPE_ID,SDA.ST_ASSIST_ID  FROM"  
	        		+" SELM_DEVICE_ASSIST SDA RIGHT JOIN INFOPUB_DEVICE_INFO IDI ON IDI.ST_DEVICE_MAC=SDA.ST_DEVICE_ID"
	        		+" JOIN INFOPUB_DEVICE_TYPE IDT ON IDI.ST_TYPE_ID=IDT.ST_TYPE_ID) A"; 
	        if (con == null) {
	            rs = SQL.query(table, content, conds, suffix, pageSize, currentPage);
	        } else {
	            rs = SQL.query(con, table, content, conds, suffix, pageSize, currentPage);
	        }
	        PaginationArrayList<InfopubDeviceInfo> pal = new PaginationArrayList<InfopubDeviceInfo>(rs.TOTAL_RECORD_COUNT, rs.COMMON_PAGE_SIZE, rs.CURRENT_PAGE);
	        while (rs.next()) {
	        	InfopubDeviceInfoExt info = new InfopubDeviceInfoExt();
	        	info.setStDeviceMac(rs.getOriginalString("ST_DEVICE_MAC"));
	        	 info.setStDeviceCode(rs.getOriginalString("ST_DEVICE_CODE"));
	        	 info.setStDeviceAddress(rs.getOriginalString("ST_DEVICE_ADDRESS"));
	        	 info.setStTypeId(rs.getOriginalString("ST_TYPE_ID"));
	            pal.add(info);
	        }
	        return pal;
	    }
	 
	 
	 public List<InfopubDeviceInfo> queryZheng(Conditions conds, String suffix) {
	        RecordSet rs;
	        if (con == null) {
	            rs = SQL.query("INFOPUB_DEVICE_INFO IDI JOIN INFOPUB_DEVICE_TYPE IDT ON IDI.ST_TYPE_ID=IDT.ST_TYPE_ID", "*", conds, suffix);
	        } else {
	            rs = SQL.query(con, "INFOPUB_DEVICE_INFO IDI JOIN INFOPUB_DEVICE_TYPE IDT ON IDI.ST_TYPE_ID=IDT.ST_TYPE_ID", "*", conds, suffix);
	        }
	        ArrayList<InfopubDeviceInfo> al = new ArrayList<InfopubDeviceInfo>();
	        while (rs.next()) {
	            InfopubDeviceInfo info = new InfopubDeviceInfo();
	            info.setStDeviceCode(rs.getOriginalString("ST_DEVICE_CODE"));
	            al.add(info);
	        }
	        return al;
	 }

	public List<InfopubDeviceInfo> getDeviceWithStreet(Conditions conds, String suffix, int pageSize, int currentPage) {
		RecordSet rs;
        String content = "idi.ST_DEVICE_MAC,idi.ST_DEVICE_CODE,idi.ST_DEVICE_ADDRESS,idi.ST_TYPE_ID,idt.ST_TYPE_NAME";
        String table = "infopub_device_info idi left join infopub_address ia on idi.ST_ADDRESS_ID = ia.ST_ADDRESS_ID "+
        			   "left join infopub_device_type idt on idi.ST_TYPE_ID = idt.ST_TYPE_ID "; 
        if (con == null) {
            rs = SQL.query(table, content, conds, suffix, pageSize, currentPage);
        } else {
            rs = SQL.query(con, table, content, conds, suffix, pageSize, currentPage);
        }
        PaginationArrayList<InfopubDeviceInfo> pal = new PaginationArrayList<InfopubDeviceInfo>(rs.TOTAL_RECORD_COUNT, rs.COMMON_PAGE_SIZE, rs.CURRENT_PAGE);
        while (rs.next()) {
        	InfopubDeviceInfo info = new InfopubDeviceInfo();
        	info.setStDeviceMac(rs.getOriginalString("ST_DEVICE_MAC"));
        	info.setStDeviceCode(rs.getOriginalString("ST_DEVICE_CODE"));
        	info.setStDeviceAddress(rs.getOriginalString("ST_DEVICE_ADDRESS"));
        	info.setStTypeId(rs.getOriginalString("ST_TYPE_ID"));
        	info.setStDesc(rs.getOriginalString("ST_TYPE_NAME"));
            pal.add(info);
        }
        return pal;
	}

	public List<String> getMacByTypeName(Conditions conds, String suffix) {
		RecordSet rs;
        if (con == null) {
            rs = SQL.query("INFOPUB_DEVICE_INFO IDI JOIN INFOPUB_DEVICE_TYPE IDT ON IDI.ST_TYPE_ID=IDT.ST_TYPE_ID", "ST_DEVICE_MAC", conds, suffix);
        } else {
            rs = SQL.query(con, "INFOPUB_DEVICE_INFO IDI JOIN INFOPUB_DEVICE_TYPE IDT ON IDI.ST_TYPE_ID=IDT.ST_TYPE_ID", "ST_DEVICE_MAC", conds, suffix);
        }
        ArrayList<String> al = new ArrayList<String>();
        String str = "";
        while (rs.next()) {
            str = rs.getOriginalString("ST_DEVICE_MAC");
            al.add(str);
        }
        return al;
	}
	
	public List<InfopubDeviceInfo> mGetDeviceInfo(Conditions conds, String suffix) {
		RecordSet rs;
        String content = "distinct idi.*";
        String table = "infopub_device_info idi left join selm_device_item sdi on idi.ST_DEVICE_ID = sdi.ST_DEVICE_ID " +
        			    "join selm_item si on sdi.ST_ITEM_ID = si.ST_ITEM_ID";
        if (con == null) {
            rs = SQL.query(table, content, conds, suffix);
        } else {
            rs = SQL.query(con, table, content, conds, suffix);
        }
        ArrayList<InfopubDeviceInfo> al = new ArrayList<InfopubDeviceInfo>();
        while (rs.next()) {
        	InfopubDeviceInfo info = new InfopubDeviceInfo();
            setProperties(info, rs);
            al.add(info);
        }
        return al;
		
	}
	
	public List<InfopubDeviceInfo> mGetDeviceByTime(Conditions conds, String suffix) {
		RecordSet rs;
        String content = "idi.ST_DEVICE_NAME,idi.ST_DEVICE_MAC,idi.ST_DEVICE_IP,ia.ST_LABEL,"+
        				"ia.ST_CITY,ia.ST_DISTRICT,ia.ST_STREET,ia.ST_ADDRESS,idi.ST_UPDATE,idt.NM_DTYPE,idt.ST_TYPE_NAME,idi.ST_DESC,idi.ST_STATE";
        String table = "infopub_device_info idi join infopub_device_type idt on idi.ST_TYPE_ID = idt.ST_TYPE_ID "+
        				"join infopub_address ia on idi.ST_ADDRESS_ID = ia.ST_ADDRESS_ID "+
        				"join infopub_area iaa on idi.ST_AREA_ID = iaa.ST_AREA_ID";
        if (con == null) {
            rs = SQL.query(table, content, conds, suffix);
        } else {
            rs = SQL.query(con, table, content, conds, suffix);
        }
        ArrayList<InfopubDeviceInfo> al = new ArrayList<InfopubDeviceInfo>();
        while (rs.next()) {
        	InfopubDeviceInfo info = new InfopubDeviceInfo();
        	info.setStDeviceName(rs.getOriginalString("ST_DEVICE_NAME"));
        	info.setStDeviceMac(rs.getOriginalString("ST_DEVICE_MAC"));
        	info.setStDeviceIp(rs.getOriginalString("ST_DEVICE_IP"));
        	info.setStAddressId(rs.getOriginalString("ST_LABEL"));
        	info.setStAreaId(rs.getOriginalString("ST_CITY"));
        	info.setStCertKey(rs.getOriginalString("ST_DISTRICT"));
        	info.setStChannel(rs.getOriginalString("ST_STREET"));
        	info.setStDeviceAddress(rs.getOriginalString("ST_ADDRESS"));
        	info.setStUpdate(rs.getTimestamp("ST_UPDATE"));
        	info.setNmSdtype(rs.getBigDecimal("NM_DTYPE"));
        	info.setStTypeId(rs.getOriginalString("ST_TYPE_NAME"));
        	info.setStDesc(rs.getOriginalString("ST_DESC"));
        	info.setStState(rs.getBigDecimal("ST_STATE"));
        	al.add(info);
        }
        return al;
		
	}
}
