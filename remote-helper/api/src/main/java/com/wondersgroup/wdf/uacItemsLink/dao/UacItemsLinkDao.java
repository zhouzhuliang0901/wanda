package com.wondersgroup.wdf.uacItemsLink.dao;

import org.springframework.stereotype.Repository;
import wfc.facility.tool.autocode.PaginationArrayList;
import wfc.service.database.Condition;
import wfc.service.database.Conditions;
import wfc.service.database.RecordSet;
import wfc.service.database.SQL;

import java.sql.Connection;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

/**
 * 主题服务事项关联
 * @author generated by wfc.facility.tool.autocode.InternalDaoGenerator
 */
@Repository
public class UacItemsLinkDao {

    private Connection con = null;

    public UacItemsLinkDao() {
    }

    public UacItemsLinkDao(Connection con) {
        this.con = con;
    }

    public void add(UacItemsLink info) {
        String sql = "insert into UAC_ITEMS_LINK(ST_ITEMS_ID, ST_ITEM_ID, NM_ORDER) values (?, ?, ?)";
        Object[] obj = {
            info.getStItemsId(),
            info.getStItemId(),
            info.getNmOrder()        	
        };
        if (con == null) {
            SQL.execute(sql, obj);
        } else {
            SQL.execute(con, sql, obj);
        }
    }

    public void update(UacItemsLink info) {
        String sql = "update UAC_ITEMS_LINK set NM_ORDER = ? where ST_ITEMS_ID = ? and ST_ITEM_ID = ?";
        Object[] obj = {
            info.getNmOrder(),
            info.getStItemsId(),
            info.getStItemId()        	
        };
        if (con == null) {
            SQL.execute(sql, obj);
        } else {
            SQL.execute(con, sql, obj);
        }
    }

    public int update(Map<String, Object> map, Conditions conds) {
        String sql = "update UAC_ITEMS_LINK set ";
        List<Object> list = new ArrayList<Object>();
        int i = 0;
        for (String field : map.keySet()) {
            if (i++ > 0) {
                sql += ", ";
            }
            sql += field + " = ?";
            list.add(map.get(field));
        }
        String subsql = conds != null ? conds.toString() : "";
        if ("".equals(subsql)) {
            if (con == null) {
                return SQL.execute(sql).TOTAL_RECORD_COUNT;
            } else {
                return SQL.execute(con, sql).TOTAL_RECORD_COUNT;
            }
        } else {
            sql += " where " + subsql;
            list.addAll(conds.getObjectList());
            if (con == null) {
                return SQL.execute(sql, list.toArray()).TOTAL_RECORD_COUNT;
            } else {
                return SQL.execute(con, sql, list.toArray()).TOTAL_RECORD_COUNT;
            }
        }
    }
    
    public int delete(Conditions conds) {
        String sql = "delete from UAC_ITEMS_LINK";
        String subsql = conds != null ? conds.toString() : "";
        if ("".equals(subsql)) {
            if (con == null) {
                return SQL.execute(sql).TOTAL_RECORD_COUNT;
            } else {
                return SQL.execute(con, sql).TOTAL_RECORD_COUNT;
            }
        } else {
            sql += " where " + subsql;
            if (con == null) {
                return SQL.execute(sql, conds.getObjectArray()).TOTAL_RECORD_COUNT;
            } else {
                return SQL.execute(con, sql, conds.getObjectArray()).TOTAL_RECORD_COUNT;
            }
        }
    }

	public void delete(String[] stItemsId, String[] stItemId) {
        Conditions conds = Conditions.newOrConditions();
        for (int i = 0; i < stItemsId.length; i++) {
            Conditions subconds = Conditions.newAndConditions();
            subconds.add(new Condition("ST_ITEMS_ID", Condition.OT_EQUAL, stItemsId[i]));
            subconds.add(new Condition("ST_ITEM_ID", Condition.OT_EQUAL, stItemId[i]));
            conds.add(subconds);
        }
        delete(conds);
    }

	public void delete(String stItemsId, String stItemId) {
        Conditions conds = Conditions.newAndConditions();
        conds.add(new Condition("ST_ITEMS_ID", Condition.OT_EQUAL, stItemsId));
        conds.add(new Condition("ST_ITEM_ID", Condition.OT_EQUAL, stItemId));
        delete(conds);
    }

    public PaginationArrayList<UacItemsLink> query(Conditions conds, String suffix, int pageSize, int currentPage) {
        RecordSet rs;
        if (con == null) {
            rs = SQL.query("UAC_ITEMS_LINK", "*", conds, suffix, pageSize, currentPage);
        } else {
            rs = SQL.query(con, "UAC_ITEMS_LINK", "*", conds, suffix, pageSize, currentPage);
        }
        PaginationArrayList<UacItemsLink> pal = new PaginationArrayList<UacItemsLink>(rs.TOTAL_RECORD_COUNT, rs.COMMON_PAGE_SIZE, rs.CURRENT_PAGE);
        while (rs.next()) {
            UacItemsLink info = new UacItemsLink();
            setProperties(info, rs);
            pal.add(info);
        }
        return pal;
    }

    public List<UacItemsLink> query(Conditions conds, String suffix) {
        RecordSet rs;
        if (con == null) {
            rs = SQL.query("UAC_ITEMS_LINK", "*", conds, suffix);
        } else {
            rs = SQL.query(con, "UAC_ITEMS_LINK", "*", conds, suffix);
        }
        ArrayList<UacItemsLink> al = new ArrayList<UacItemsLink>();
        while (rs.next()) {
            UacItemsLink info = new UacItemsLink();
            setProperties(info, rs);
            al.add(info);
        }
        return al;
    }
    
    public static void setProperties(UacItemsLink info, RecordSet rs){
        info.setStItemsId(rs.getOriginalString("ST_ITEMS_ID"));
        info.setStItemId(rs.getOriginalString("ST_ITEM_ID"));
        info.setNmOrder(rs.getBigDecimal("NM_ORDER"));
    }

	public UacItemsLink get(String stItemsId, String stItemId) {
        Conditions conds = Conditions.newAndConditions();
        conds.add(new Condition("ST_ITEMS_ID", Condition.OT_EQUAL, stItemsId));
        conds.add(new Condition("ST_ITEM_ID", Condition.OT_EQUAL, stItemId));
        List<UacItemsLink> list = query(conds, null);
        return list.size() > 0 ? list.get(0) : null;
    }

    /**
     * 通过主题id查询
     * @param stItemsId
     * @return
     */
    public List<UacItemsLink> getBystItemsId(String stItemsId) {
        Conditions conds = Conditions.newAndConditions();
        conds.add(new Condition("ST_ITEMS_ID", Condition.OT_EQUAL, stItemsId));
        List<UacItemsLink> list = query(conds, null);
        return list;
    }

}
