package com.wondersgroup.wdf.dao;

import org.springframework.stereotype.Repository;
import wfc.facility.tool.autocode.PaginationArrayList;
import wfc.service.database.Condition;
import wfc.service.database.Conditions;
import wfc.service.database.RecordSet;
import wfc.service.database.SQL;

import java.sql.Connection;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

/**
 * 综合受理
 * @author generated by wfc.facility.tool.autocode.InternalDaoGenerator
 */
@Repository
public class UacUnionApplyDao {

    private Connection con = null;

    public UacUnionApplyDao() {
    }

    public UacUnionApplyDao(Connection con) {
        this.con = con;
    }

    public void add(UacUnionApply info) {
        String sql = "insert into UAC_UNION_APPLY(ST_APPLY_ID, ST_SNO, ST_USER_ID, ST_APPLY_NO, ST_CITEM_ID, ST_CITEM_CODE, ST_CITEM_NAME, ST_TRANSACT_NAME, ST_ORGAN_ID, ST_DEPART_CODE, ST_DEPART_NAME, ST_RECEIVOR_ID, ST_RECEIVOR_NAME, ST_AREA_ID, ST_AREA_CODE, ST_AREA_NAME, ST_APPLY_USER, ST_APPLY_USER_PHONE, NM_IDENTITY_TYPE, ST_IDENTITY_NO, ST_LEGAL_NAME, ST_LEGAL_IDCARD, ST_LEGAL_TEL, ST_TARGET, NM_TARGET_TYPE, NM_LICENSE_TYPE, ST_LICENSE_NO, ST_TEL, ST_BADDRESS, NM_IS_CANCEL, ST_TSOURCE, NM_SOURCE, NM_IMT, ST_APPLY_STATE, NM_STATUS, NM_UAPPLY, NM_LOGISTICS, ST_CERTIFICATION_TYPE, NM_CERTIFICATION_STATUS, ST_LTYPE, DT_CERTIFICATION, ST_MF_ORGAN_ID, ST_MF_ORGAN_NAME, ST_MF_USER_ID, ST_MF_USER_NAME, DT_MF_TIME, ST_ID, NM_MF_STATUS, NM_UID, DT_CREATE, DT_UPDATE, DT_RECEIVE, DT_AUDIT, NM_REMOVED, DT_LOOK_LAST, NM_LOOK, ST_EXT1, ST_EXT2) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        Object[] obj = {
                info.getStApplyId(),
                info.getStSno(),
                info.getStUserId(),
                info.getStApplyNo(),
                info.getStCitemId(),
                info.getStCitemCode(),
                info.getStCitemName(),
                info.getStTransactName(),
                info.getStOrganId(),
                info.getStDepartCode(),
                info.getStDepartName(),
                info.getStReceivorId(),
                info.getStReceivorName(),
                info.getStAreaId(),
                info.getStAreaCode(),
                info.getStAreaName(),
                info.getStApplyUser(),
                info.getStApplyUserPhone(),
                info.getNmIdentityType(),
                info.getStIdentityNo(),
                info.getStLegalName(),
                info.getStLegalIdcard(),
                info.getStLegalTel(),
                info.getStTarget(),
                info.getNmTargetType(),
                info.getNmLicenseType(),
                info.getStLicenseNo(),
                info.getStTel(),
                info.getStBaddress(),
                info.getNmIsCancel(),
                info.getStTsource(),
                info.getNmSource(),
                info.getNmImt(),
                info.getStApplyState(),
                info.getNmStatus(),
                info.getNmUapply(),
                info.getNmLogistics(),
                info.getStCertificationType(),
                info.getNmCertificationStatus(),
                info.getStLtype(),
                info.getDtCertification(),
                info.getStMfOrganId(),
                info.getStMfOrganName(),
                info.getStMfUserId(),
                info.getStMfUserName(),
                info.getDtMfTime(),
                info.getStId(),
                info.getNmMfStatus(),
                info.getNmUid(),
                info.getDtCreate(),
                info.getDtUpdate(),
                info.getDtReceive(),
                info.getDtAudit(),
                info.getNmRemoved(),
                info.getDtLookLast(),
                info.getNmLook(),
                info.getStExt1(),
                info.getStExt2()
        };
        if (con == null) {
            SQL.execute(sql, obj);
        } else {
            SQL.execute(con, sql, obj);
        }
    }

    public void update(UacUnionApply info) {
        String sql = "update UAC_UNION_APPLY set ST_SNO = ?, ST_USER_ID = ?, ST_APPLY_NO = ?, ST_CITEM_ID = ?, ST_CITEM_CODE = ?, ST_CITEM_NAME = ?, ST_TRANSACT_NAME = ?, ST_ORGAN_ID = ?, ST_DEPART_CODE = ?, ST_DEPART_NAME = ?, ST_RECEIVOR_ID = ?, ST_RECEIVOR_NAME = ?, ST_AREA_ID = ?, ST_AREA_CODE = ?, ST_AREA_NAME = ?, ST_APPLY_USER = ?, ST_APPLY_USER_PHONE = ?, NM_IDENTITY_TYPE = ?, ST_IDENTITY_NO = ?, ST_LEGAL_NAME = ?, ST_LEGAL_IDCARD = ?, ST_LEGAL_TEL = ?, ST_TARGET = ?, NM_TARGET_TYPE = ?, NM_LICENSE_TYPE = ?, ST_LICENSE_NO = ?, ST_TEL = ?, ST_BADDRESS = ?, NM_IS_CANCEL = ?, ST_TSOURCE = ?, NM_SOURCE = ?, NM_IMT = ?, ST_APPLY_STATE = ?, NM_STATUS = ?, NM_UAPPLY = ?, NM_LOGISTICS = ?, ST_CERTIFICATION_TYPE = ?, NM_CERTIFICATION_STATUS = ?, ST_LTYPE = ?, DT_CERTIFICATION = ?, ST_MF_ORGAN_ID = ?, ST_MF_ORGAN_NAME = ?, ST_MF_USER_ID = ?, ST_MF_USER_NAME = ?, DT_MF_TIME = ?, ST_ID = ?, NM_MF_STATUS = ?, NM_UID = ?, DT_CREATE = ?, DT_UPDATE = ?, DT_RECEIVE = ?, DT_AUDIT = ?, NM_REMOVED = ?, DT_LOOK_LAST = ?, NM_LOOK = ?, ST_EXT1 = ?, ST_EXT2 = ? where ST_APPLY_ID = ?";
        Object[] obj = {
                info.getStSno(),
                info.getStUserId(),
                info.getStApplyNo(),
                info.getStCitemId(),
                info.getStCitemCode(),
                info.getStCitemName(),
                info.getStTransactName(),
                info.getStOrganId(),
                info.getStDepartCode(),
                info.getStDepartName(),
                info.getStReceivorId(),
                info.getStReceivorName(),
                info.getStAreaId(),
                info.getStAreaCode(),
                info.getStAreaName(),
                info.getStApplyUser(),
                info.getStApplyUserPhone(),
                info.getNmIdentityType(),
                info.getStIdentityNo(),
                info.getStLegalName(),
                info.getStLegalIdcard(),
                info.getStLegalTel(),
                info.getStTarget(),
                info.getNmTargetType(),
                info.getNmLicenseType(),
                info.getStLicenseNo(),
                info.getStTel(),
                info.getStBaddress(),
                info.getNmIsCancel(),
                info.getStTsource(),
                info.getNmSource(),
                info.getNmImt(),
                info.getStApplyState(),
                info.getNmStatus(),
                info.getNmUapply(),
                info.getNmLogistics(),
                info.getStCertificationType(),
                info.getNmCertificationStatus(),
                info.getStLtype(),
                info.getDtCertification(),
                info.getStMfOrganId(),
                info.getStMfOrganName(),
                info.getStMfUserId(),
                info.getStMfUserName(),
                info.getDtMfTime(),
                info.getStId(),
                info.getNmMfStatus(),
                info.getNmUid(),
                info.getDtCreate(),
                info.getDtUpdate(),
                info.getDtReceive(),
                info.getDtAudit(),
                info.getNmRemoved(),
                info.getDtLookLast(),
                info.getNmLook(),
                info.getStExt1(),
                info.getStExt2(),
                info.getStApplyId()
        };
        if (con == null) {
            SQL.execute(sql, obj);
        } else {
            SQL.execute(con, sql, obj);
        }
    }

    public int update(Map<String, Object> map, Conditions conds) {
        String sql = "update UAC_UNION_APPLY set ";
        List<Object> list = new ArrayList<Object>();
        int i = 0;
        for (String field : map.keySet()) {
            if (i++ > 0) {
                sql += ", ";
            }
            sql += field + " = ?";
            list.add(map.get(field));
        }
        String subsql = conds != null ? conds.toString() : "";
        if ("".equals(subsql)) {
            if (con == null) {
                return SQL.execute(sql).TOTAL_RECORD_COUNT;
            } else {
                return SQL.execute(con, sql).TOTAL_RECORD_COUNT;
            }
        } else {
            sql += " where " + subsql;
            list.addAll(conds.getObjectList());
            if (con == null) {
                return SQL.execute(sql, list.toArray()).TOTAL_RECORD_COUNT;
            } else {
                return SQL.execute(con, sql, list.toArray()).TOTAL_RECORD_COUNT;
            }
        }
    }

    public int delete(Conditions conds) {
        String sql = "delete from UAC_UNION_APPLY";
        String subsql = conds != null ? conds.toString() : "";
        if ("".equals(subsql)) {
            if (con == null) {
                return SQL.execute(sql).TOTAL_RECORD_COUNT;
            } else {
                return SQL.execute(con, sql).TOTAL_RECORD_COUNT;
            }
        } else {
            sql += " where " + subsql;
            if (con == null) {
                return SQL.execute(sql, conds.getObjectArray()).TOTAL_RECORD_COUNT;
            } else {
                return SQL.execute(con, sql, conds.getObjectArray()).TOTAL_RECORD_COUNT;
            }
        }
    }

    public void delete(String[] stApplyId) {
        Conditions conds = Conditions.newOrConditions();
        for (int i = 0; i < stApplyId.length; i++) {
            Conditions subconds = Conditions.newAndConditions();
            subconds.add(new Condition("ST_APPLY_ID", Condition.OT_EQUAL, stApplyId[i]));
            conds.add(subconds);
        }
        delete(conds);
    }

    public void delete(String stApplyId) {
        Conditions conds = Conditions.newAndConditions();
        conds.add(new Condition("ST_APPLY_ID", Condition.OT_EQUAL, stApplyId));
        delete(conds);
    }

    public PaginationArrayList<UacUnionApply> query(Conditions conds, String suffix, int pageSize, int currentPage) {
        RecordSet rs;

        if (con == null) {
            rs = SQL.query("UAC_UNION_APPLY", "*", conds, suffix, pageSize, currentPage);
        } else {
            rs = SQL.query(con, "UAC_UNION_APPLY", "*", conds, suffix, pageSize, currentPage);
        }
        PaginationArrayList<UacUnionApply> pal = new PaginationArrayList<UacUnionApply>(rs.TOTAL_RECORD_COUNT, rs.COMMON_PAGE_SIZE, rs.CURRENT_PAGE);
        while (rs.next()) {
            UacUnionApply info = new UacUnionApply();
            setProperties(info, rs);
            pal.add(info);
        }
        return pal;
    }

    public PaginationArrayList<UacUnionApply> queryRece(Conditions conds, String suffix, int pageSize, int currentPage) {
        RecordSet rs;
        String table;
        table = "UAC_UNION_APPLY where NM_SOURCE != 1 AND ST_APPLY_STATE in ('已预审','待补正','暂存'，'已看件')";
        if (con == null) {
            rs = SQL.query(table, "*", conds, suffix, pageSize, currentPage);
        } else {
            rs = SQL.query(con, table, "*", conds, suffix, pageSize, currentPage);
        }
        PaginationArrayList<UacUnionApply> pal = new PaginationArrayList<UacUnionApply>(rs.TOTAL_RECORD_COUNT, rs.COMMON_PAGE_SIZE, rs.CURRENT_PAGE);
        while (rs.next()) {
            UacUnionApply info = new UacUnionApply();
            setProperties(info, rs);
            pal.add(info);
        }
        return pal;
    }
    public List<UacUnionApply> query(Conditions conds, String suffix) {
        RecordSet rs;
        if (con == null) {
            rs = SQL.query("UAC_UNION_APPLY", "*", conds, suffix);
        } else {
            rs = SQL.query(con, "UAC_UNION_APPLY", "*", conds, suffix);
        }
        ArrayList<UacUnionApply> al = new ArrayList<UacUnionApply>();
        while (rs.next()) {
            UacUnionApply info = new UacUnionApply();
            setProperties(info, rs);
            al.add(info);
        }
        return al;
    }

    public static void setProperties(UacUnionApply info, RecordSet rs){
        info.setStApplyId(rs.getOriginalString("ST_APPLY_ID"));
        info.setStSno(rs.getOriginalString("ST_SNO"));
        info.setStUserId(rs.getOriginalString("ST_USER_ID"));
        info.setStApplyNo(rs.getOriginalString("ST_APPLY_NO"));
        info.setStCitemId(rs.getOriginalString("ST_CITEM_ID"));
        info.setStCitemCode(rs.getOriginalString("ST_CITEM_CODE"));
        info.setStCitemName(rs.getOriginalString("ST_CITEM_NAME"));
        info.setStTransactName(rs.getOriginalString("ST_TRANSACT_NAME"));
        info.setStOrganId(rs.getOriginalString("ST_ORGAN_ID"));
        info.setStDepartCode(rs.getOriginalString("ST_DEPART_CODE"));
        info.setStDepartName(rs.getOriginalString("ST_DEPART_NAME"));
        info.setStReceivorId(rs.getOriginalString("ST_RECEIVOR_ID"));
        info.setStReceivorName(rs.getOriginalString("ST_RECEIVOR_NAME"));
        info.setStAreaId(rs.getOriginalString("ST_AREA_ID"));
        info.setStAreaCode(rs.getOriginalString("ST_AREA_CODE"));
        info.setStAreaName(rs.getOriginalString("ST_AREA_NAME"));
        info.setStApplyUser(rs.getOriginalString("ST_APPLY_USER"));
        info.setStApplyUserPhone(rs.getOriginalString("ST_APPLY_USER_PHONE"));
        info.setNmIdentityType(rs.getBigDecimal("NM_IDENTITY_TYPE"));
        info.setStIdentityNo(rs.getOriginalString("ST_IDENTITY_NO"));
        info.setStLegalName(rs.getOriginalString("ST_LEGAL_NAME"));
        info.setStLegalIdcard(rs.getOriginalString("ST_LEGAL_IDCARD"));
        info.setStLegalTel(rs.getOriginalString("ST_LEGAL_TEL"));
        info.setStTarget(rs.getOriginalString("ST_TARGET"));
        info.setNmTargetType(rs.getOriginalString("NM_TARGET_TYPE"));
        info.setNmLicenseType(rs.getOriginalString("NM_LICENSE_TYPE"));
        info.setStLicenseNo(rs.getOriginalString("ST_LICENSE_NO"));
        info.setStTel(rs.getOriginalString("ST_TEL"));
        info.setStBaddress(rs.getOriginalString("ST_BADDRESS"));
        info.setNmIsCancel(rs.getBigDecimal("NM_IS_CANCEL"));
        info.setStTsource(rs.getOriginalString("ST_TSOURCE"));
        info.setNmSource(rs.getBigDecimal("NM_SOURCE"));
        info.setNmImt(rs.getBigDecimal("NM_IMT"));
        info.setStApplyState(rs.getOriginalString("ST_APPLY_STATE"));
        info.setNmStatus(rs.getBigDecimal("NM_STATUS"));
        info.setNmUapply(rs.getBigDecimal("NM_UAPPLY"));
        info.setNmLogistics(rs.getBigDecimal("NM_LOGISTICS"));
        info.setStCertificationType(rs.getOriginalString("ST_CERTIFICATION_TYPE"));
        info.setNmCertificationStatus(rs.getBigDecimal("NM_CERTIFICATION_STATUS"));
        info.setStLtype(rs.getOriginalString("ST_LTYPE"));
        info.setDtCertification(rs.getTimestamp("DT_CERTIFICATION"));
        info.setStMfOrganId(rs.getOriginalString("ST_MF_ORGAN_ID"));
        info.setStMfOrganName(rs.getOriginalString("ST_MF_ORGAN_NAME"));
        info.setStMfUserId(rs.getOriginalString("ST_MF_USER_ID"));
        info.setStMfUserName(rs.getOriginalString("ST_MF_USER_NAME"));
        info.setDtMfTime(rs.getTimestamp("DT_MF_TIME"));
        info.setStId(rs.getOriginalString("ST_ID"));
        info.setNmMfStatus(rs.getBigDecimal("NM_MF_STATUS"));
        info.setNmUid(rs.getBigDecimal("NM_UID"));
        info.setDtCreate(rs.getTimestamp("DT_CREATE"));
        info.setDtUpdate(rs.getTimestamp("DT_UPDATE"));
        info.setDtReceive(rs.getTimestamp("DT_RECEIVE"));
        info.setDtAudit(rs.getTimestamp("DT_AUDIT"));
        info.setNmRemoved(rs.getBigDecimal("NM_REMOVED"));
        info.setDtLookLast(rs.getTimestamp("DT_LOOK_LAST"));
        info.setNmLook(rs.getBigDecimal("NM_LOOK"));
        info.setStExt1(rs.getOriginalString("ST_EXT1"));
        info.setStExt2(rs.getOriginalString("ST_EXT2"));
    }

    public UacUnionApply get(String stApplyId) {
        Conditions conds = Conditions.newAndConditions();
        conds.add(new Condition("ST_APPLY_ID", Condition.OT_EQUAL, stApplyId));
        List<UacUnionApply> list = query(conds, null);
        return list.size() > 0 ? list.get(0) : null;
    }

}
