package com.wondersgroup.wdf.dao;

import org.springframework.stereotype.Repository;
import wfc.facility.tool.autocode.PaginationArrayList;
import wfc.service.database.Condition;
import wfc.service.database.Conditions;
import wfc.service.database.RecordSet;
import wfc.service.database.SQL;

import java.sql.Connection;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

/**
 * 综合办件反馈
 * @author generated by wfc.facility.tool.autocode.InternalDaoGenerator
 */
@Repository
public class UacUapplyFeedbackDao {

    private Connection con = null;

    public UacUapplyFeedbackDao() {
    }

    public UacUapplyFeedbackDao(Connection con) {
        this.con = con;
    }

    public void add(UacUapplyFeedback info) {
        String sql = "insert into UAC_UAPPLY_FEEDBACK(ST_FEEDBACK_ID, ST_SUB_SNO, ST_CITEM_ID, ST_CITEM_CODE, ST_CITEM_NAME, ST_APPLY_ID, ST_BACK_STATE, NM_IS_OVER, ST_WF_ID, ST_PARENT_ID, NM_CORRECT, NM_PRE_STATUS, NM_ADS_STATUS, ST_SUB_STATUS, ST_SUB_CONTENT_ID, DT_CREATE, DT_UPDATE) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        Object[] obj = {
            info.getStFeedbackId(),
            info.getStSubSno(),
            info.getStCitemId(),
            info.getStCitemCode(),
            info.getStCitemName(),
            info.getStApplyId(),
            info.getStBackState(),
            info.getNmIsOver(),
            info.getStWfId(),
            info.getStParentId(),
            info.getNmCorrect(),
            info.getNmPreStatus(),
            info.getNmAdsStatus(),
            info.getStSubStatus(),
            info.getStSubContentId(),
            info.getDtCreate(),
            info.getDtUpdate()

        };
        if (con == null) {
            SQL.execute(sql, obj);
        } else {
            SQL.execute(con, sql, obj);
        }
    }

    public void update(UacUapplyFeedback info) {
        String sql = "update UAC_UAPPLY_FEEDBACK set ST_SUB_SNO = ?, ST_CITEM_ID = ?, ST_CITEM_CODE = ?, ST_CITEM_NAME = ?, ST_APPLY_ID = ?, ST_BACK_STATE = ?, NM_IS_OVER = ?, ST_WF_ID = ?, ST_PARENT_ID = ?, NM_CORRECT = ?, NM_PRE_STATUS = ?, NM_ADS_STATUS = ?, ST_SUB_STATUS = ?, ST_SUB_CONTENT_ID = ?, DT_CREATE = ?, DT_UPDATE = ? where ST_FEEDBACK_ID = ?";
        Object[] obj = {
            info.getStSubSno(),
            info.getStCitemId(),
            info.getStCitemCode(),
            info.getStCitemName(),
            info.getStApplyId(),
            info.getStBackState(),
            info.getNmIsOver(),
            info.getStWfId(),
            info.getStParentId(),
            info.getNmCorrect(),
            info.getNmPreStatus(),
            info.getNmAdsStatus(),
            info.getStSubStatus(),
            info.getStSubContentId(),
            info.getDtCreate(),
            info.getDtUpdate(),
            info.getStFeedbackId()        	
        };
        if (con == null) {
            SQL.execute(sql, obj);
        } else {
            SQL.execute(con, sql, obj);
        }
    }

    public int update(Map<String, Object> map, Conditions conds) {
        String sql = "update UAC_UAPPLY_FEEDBACK set ";
        List<Object> list = new ArrayList<Object>();
        int i = 0;
        for (String field : map.keySet()) {
            if (i++ > 0) {
                sql += ", ";
            }
            sql += field + " = ?";
            list.add(map.get(field));
        }
        String subsql = conds != null ? conds.toString() : "";
        if ("".equals(subsql)) {
            if (con == null) {
                return SQL.execute(sql).TOTAL_RECORD_COUNT;
            } else {
                return SQL.execute(con, sql).TOTAL_RECORD_COUNT;
            }
        } else {
            sql += " where " + subsql;
            list.addAll(conds.getObjectList());
            if (con == null) {
                return SQL.execute(sql, list.toArray()).TOTAL_RECORD_COUNT;
            } else {
                return SQL.execute(con, sql, list.toArray()).TOTAL_RECORD_COUNT;
            }
        }
    }
    
    public int delete(Conditions conds) {
        String sql = "delete from UAC_UAPPLY_FEEDBACK";
        String subsql = conds != null ? conds.toString() : "";
        if ("".equals(subsql)) {
            if (con == null) {
                return SQL.execute(sql).TOTAL_RECORD_COUNT;
            } else {
                return SQL.execute(con, sql).TOTAL_RECORD_COUNT;
            }
        } else {
            sql += " where " + subsql;
            if (con == null) {
                return SQL.execute(sql, conds.getObjectArray()).TOTAL_RECORD_COUNT;
            } else {
                return SQL.execute(con, sql, conds.getObjectArray()).TOTAL_RECORD_COUNT;
            }
        }
    }

	public void delete(String[] stFeedbackId) {
        Conditions conds = Conditions.newOrConditions();
        for (int i = 0; i < stFeedbackId.length; i++) {
            Conditions subconds = Conditions.newAndConditions();
            subconds.add(new Condition("ST_FEEDBACK_ID", Condition.OT_EQUAL, stFeedbackId[i]));
            conds.add(subconds);
        }
        delete(conds);
    }

	public void delete(String stFeedbackId) {
        Conditions conds = Conditions.newAndConditions();
        conds.add(new Condition("ST_FEEDBACK_ID", Condition.OT_EQUAL, stFeedbackId));
        delete(conds);
    }

    public PaginationArrayList<UacUapplyFeedback> query(Conditions conds, String suffix, int pageSize, int currentPage) {
        RecordSet rs;
        if (con == null) {
            rs = SQL.query("UAC_UAPPLY_FEEDBACK", "*", conds, suffix, pageSize, currentPage);
        } else {
            rs = SQL.query(con, "UAC_UAPPLY_FEEDBACK", "*", conds, suffix, pageSize, currentPage);
        }
        PaginationArrayList<UacUapplyFeedback> pal = new PaginationArrayList<UacUapplyFeedback>(rs.TOTAL_RECORD_COUNT, rs.COMMON_PAGE_SIZE, rs.CURRENT_PAGE);
        while (rs.next()) {
            UacUapplyFeedback info = new UacUapplyFeedback();
            setProperties(info, rs);
            pal.add(info);
        }
        return pal;
    }

    public List<UacUapplyFeedback> query(Conditions conds, String suffix) {
        RecordSet rs;
        if (con == null) {
            rs = SQL.query("UAC_UAPPLY_FEEDBACK", "*", conds, suffix);
        } else {
            rs = SQL.query(con, "UAC_UAPPLY_FEEDBACK", "*", conds, suffix);
        }
        ArrayList<UacUapplyFeedback> al = new ArrayList<UacUapplyFeedback>();
        while (rs.next()) {
            UacUapplyFeedback info = new UacUapplyFeedback();
            setProperties(info, rs);
            al.add(info);
        }
        return al;
    }
    
    public static void setProperties(UacUapplyFeedback info, RecordSet rs){
        info.setStFeedbackId(rs.getOriginalString("ST_FEEDBACK_ID"));
        info.setStSubSno(rs.getOriginalString("ST_SUB_SNO"));
        info.setStCitemId(rs.getOriginalString("ST_CITEM_ID"));
        info.setStCitemCode(rs.getOriginalString("ST_CITEM_CODE"));
        info.setStCitemName(rs.getOriginalString("ST_CITEM_NAME"));
        info.setStApplyId(rs.getOriginalString("ST_APPLY_ID"));
        info.setStBackState(rs.getOriginalString("ST_BACK_STATE"));
        info.setNmIsOver(rs.getBigDecimal("NM_IS_OVER"));
        info.setStWfId(rs.getOriginalString("ST_WF_ID"));
        info.setStParentId(rs.getOriginalString("ST_PARENT_ID"));
        info.setNmCorrect(rs.getBigDecimal("NM_CORRECT"));
        info.setNmPreStatus(rs.getBigDecimal("NM_PRE_STATUS"));
        info.setNmAdsStatus(rs.getBigDecimal("NM_ADS_STATUS"));
        info.setStSubStatus(rs.getOriginalString("ST_SUB_STATUS"));
        info.setStSubContentId(rs.getOriginalString("ST_SUB_CONTENT_ID"));
        info.setDtCreate(rs.getTimestamp("DT_CREATE"));
        info.setDtUpdate(rs.getTimestamp("DT_UPDATE"));
    }

	public UacUapplyFeedback get(String stFeedbackId) {
        Conditions conds = Conditions.newAndConditions();
        conds.add(new Condition("ST_FEEDBACK_ID", Condition.OT_EQUAL, stFeedbackId));
        List<UacUapplyFeedback> list = query(conds, null);
        return list.size() > 0 ? list.get(0) : null;
    }

    public UacUapplyFeedback getByApplyId(String stApplyId) {
        Conditions conds = Conditions.newAndConditions();
        conds.add(new Condition("ST_APPLY_ID", Condition.OT_EQUAL, stApplyId));
        List<UacUapplyFeedback> list = query(conds, null);
        return list.size() > 0 ? list.get(0) : null;
    }
}
