package com.wondersgroup.wdf.dao;

import java.math.*;
import java.sql.*;
import java.util.*;
import wfc.facility.tool.autocode.*;
import wfc.service.database.*;
import org.springframework.stereotype.Repository;

/**
 * 区域办理点
 * @author generated by wfc.facility.tool.autocode.InternalDaoGenerator
 */
@Repository
public class UacAreaTwoDao {

    private Connection con = null;

    public UacAreaTwoDao() {
    }

    public UacAreaTwoDao(Connection con) {
        this.con = con;
    }

    public void add(UacAreaTwo info) {
        String sql = "insert into UAC_AREA(ST_AREA_ID, ST_AREA_NAME, ST_AREA_CODE, NM_ORDER, ST_ADDRESS, DT_CREATE, DT_UPDATE, ST_PARENT_AREA_ID, ST_ORG, ST_DESC) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        Object[] obj = {
            info.getStAreaId(),
            info.getStAreaName(),
            info.getStAreaCode(),
            info.getNmOrder(),
            info.getStAddress(),
            info.getDtCreate(),
            info.getDtUpdate(),
            info.getStParentAreaId(),
            info.getStOrg(),
            info.getStDesc()        	
        };
        if (con == null) {
            SQL.execute(sql, obj);
        } else {
            SQL.execute(con, sql, obj);
        }
    }

    public void update(UacAreaTwo info) {
        String sql = "update UAC_AREA set ST_AREA_NAME = ?, ST_AREA_CODE = ?, NM_ORDER = ?, ST_ADDRESS = ?, DT_CREATE = ?, DT_UPDATE = ?, ST_PARENT_AREA_ID = ?, ST_ORG = ?, ST_DESC = ? where ST_AREA_ID = ?";
        Object[] obj = {
            info.getStAreaName(),
            info.getStAreaCode(),
            info.getNmOrder(),
            info.getStAddress(),
            info.getDtCreate(),
            info.getDtUpdate(),
            info.getStParentAreaId(),
            info.getStOrg(),
            info.getStDesc(),
            info.getStAreaId()        	
        };
        if (con == null) {
            SQL.execute(sql, obj);
        } else {
            SQL.execute(con, sql, obj);
        }
    }

    public int update(Map<String, Object> map, Conditions conds) {
        String sql = "update UAC_AREA set ";
        List<Object> list = new ArrayList<Object>();
        int i = 0;
        for (String field : map.keySet()) {
            if (i++ > 0) {
                sql += ", ";
            }
            sql += field + " = ?";
            list.add(map.get(field));
        }
        String subsql = conds != null ? conds.toString() : "";
        if ("".equals(subsql)) {
            if (con == null) {
                return SQL.execute(sql).TOTAL_RECORD_COUNT;
            } else {
                return SQL.execute(con, sql).TOTAL_RECORD_COUNT;
            }
        } else {
            sql += " where " + subsql;
            list.addAll(conds.getObjectList());
            if (con == null) {
                return SQL.execute(sql, list.toArray()).TOTAL_RECORD_COUNT;
            } else {
                return SQL.execute(con, sql, list.toArray()).TOTAL_RECORD_COUNT;
            }
        }
    }
    
    public int delete(Conditions conds) {
        String sql = "delete from UAC_AREA";
        String subsql = conds != null ? conds.toString() : "";
        if ("".equals(subsql)) {
            if (con == null) {
                return SQL.execute(sql).TOTAL_RECORD_COUNT;
            } else {
                return SQL.execute(con, sql).TOTAL_RECORD_COUNT;
            }
        } else {
            sql += " where " + subsql;
            if (con == null) {
                return SQL.execute(sql, conds.getObjectArray()).TOTAL_RECORD_COUNT;
            } else {
                return SQL.execute(con, sql, conds.getObjectArray()).TOTAL_RECORD_COUNT;
            }
        }
    }

	public void delete(String[] stAreaId) {
        Conditions conds = Conditions.newOrConditions();
        for (int i = 0; i < stAreaId.length; i++) {
            Conditions subconds = Conditions.newAndConditions();
            subconds.add(new Condition("ST_AREA_ID", Condition.OT_EQUAL, stAreaId[i]));
            conds.add(subconds);
        }
        delete(conds);
    }

	public void delete(String stAreaId) {
        Conditions conds = Conditions.newAndConditions();
        conds.add(new Condition("ST_AREA_ID", Condition.OT_EQUAL, stAreaId));
        delete(conds);
    }

    public PaginationArrayList<UacAreaTwo> query(Conditions conds, String suffix, int pageSize, int currentPage) {
        RecordSet rs;
        if (con == null) {
            rs = SQL.query("UAC_AREA", "*", conds, suffix, pageSize, currentPage);
        } else {
            rs = SQL.query(con, "UAC_AREA", "*", conds, suffix, pageSize, currentPage);
        }
        PaginationArrayList<UacAreaTwo> pal = new PaginationArrayList<UacAreaTwo>(rs.TOTAL_RECORD_COUNT, rs.COMMON_PAGE_SIZE, rs.CURRENT_PAGE);
        while (rs.next()) {
            UacAreaTwo info = new UacAreaTwo();
            setProperties(info, rs);
            pal.add(info);
        }
        return pal;
    }

    public List<UacAreaTwo> query(Conditions conds, String suffix) {
        RecordSet rs;
        if (con == null) {
            rs = SQL.query("UAC_AREA", "*", conds, suffix);
        } else {
            rs = SQL.query(con, "UAC_AREA", "*", conds, suffix);
        }
        ArrayList<UacAreaTwo> al = new ArrayList<UacAreaTwo>();
        while (rs.next()) {
            UacAreaTwo info = new UacAreaTwo();
            setProperties(info, rs);
            al.add(info);
        }
        return al;
    }
    
    public static void setProperties(UacAreaTwo info, RecordSet rs){
        info.setStAreaId(rs.getOriginalString("ST_AREA_ID"));
        info.setStAreaName(rs.getOriginalString("ST_AREA_NAME"));
        info.setStAreaCode(rs.getOriginalString("ST_AREA_CODE"));
        info.setNmOrder(rs.getBigDecimal("NM_ORDER"));
        info.setStAddress(rs.getOriginalString("ST_ADDRESS"));
        info.setDtCreate(rs.getTimestamp("DT_CREATE"));
        info.setDtUpdate(rs.getTimestamp("DT_UPDATE"));
        info.setStParentAreaId(rs.getOriginalString("ST_PARENT_AREA_ID"));
        info.setStOrg(rs.getOriginalString("ST_ORG"));
        info.setStDesc(rs.getOriginalString("ST_DESC"));
    }

	public UacAreaTwo get(String stAreaId) {
        Conditions conds = Conditions.newAndConditions();
        conds.add(new Condition("ST_AREA_ID", Condition.OT_EQUAL, stAreaId));
        List<UacAreaTwo> list = query(conds, null);
        return list.size() > 0 ? list.get(0) : null;
    }

}
