package com.wondersgroup.wdf.dao;

import org.springframework.stereotype.Repository;
import wfc.facility.tool.autocode.PaginationArrayList;
import wfc.service.database.Condition;
import wfc.service.database.Conditions;
import wfc.service.database.RecordSet;
import wfc.service.database.SQL;

import java.sql.Connection;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

/**
 * 综合办件环节跟踪信息
 * @author generated by wfc.facility.tool.autocode.InternalDaoGenerator
 */
@Repository
public class UacUapplyNodeTrackDao {

    private Connection con = null;

    public UacUapplyNodeTrackDao() {
    }

    public UacUapplyNodeTrackDao(Connection con) {
        this.con = con;
    }

    public void add(UacUapplyNodeTrack info) {
        String sql = "insert into UAC_UAPPLY_NODE_TRACK(ST_NODE_TRACK_ID, ST_TRACK_ID, ST_APPLY_ID, ST_OP_DEPART, ST_OP_NODE, ST_OP_USER, ST_OP_TYPE, ST_OP_DESC, ST_OP_RESULT, DT_OP_TIME, DT_START, DT_END, ST_CERT_NO, ST_RESULT_EXPLAIN, NM_DELIVERY, ST_SATISFACTION, ST_SPECIAL_TYPE, ST_SPECIAL_NAME, ST_SPECIAL_REASON, DT_CREATE, DT_UPDATE) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        Object[] obj = {
            info.getStNodeTrackId(),
            info.getStTrackId(),
            info.getStApplyId(),
            info.getStOpDepart(),
            info.getStOpNode(),
            info.getStOpUser(),
            info.getStOpType(),
            info.getStOpDesc(),
            info.getStOpResult(),
            info.getDtOpTime(),
            info.getDtStart(),
            info.getDtEnd(),
            info.getStCertNo(),
            info.getStResultExplain(),
            info.getNmDelivery(),
            info.getStSatisfaction(),
            info.getStSpecialType(),
            info.getStSpecialName(),
            info.getStSpecialReason(),
            info.getDtCreate(),
            info.getDtUpdate()        	
        };
        if (con == null) {
            SQL.execute(sql, obj);
        } else {
            SQL.execute(con, sql, obj);
        }
    }

    public void update(UacUapplyNodeTrack info) {
        String sql = "update UAC_UAPPLY_NODE_TRACK set ST_TRACK_ID = ?, ST_APPLY_ID = ?, ST_OP_DEPART = ?, ST_OP_NODE = ?, ST_OP_USER = ?, ST_OP_TYPE = ?, ST_OP_DESC = ?, ST_OP_RESULT = ?, DT_OP_TIME = ?, DT_START = ?, DT_END = ?, ST_CERT_NO = ?, ST_RESULT_EXPLAIN = ?, NM_DELIVERY = ?, ST_SATISFACTION = ?, ST_SPECIAL_TYPE = ?, ST_SPECIAL_NAME = ?, ST_SPECIAL_REASON = ?, DT_CREATE = ?, DT_UPDATE = ? where ST_NODE_TRACK_ID = ?";
        Object[] obj = {
            info.getStTrackId(),
            info.getStApplyId(),
            info.getStOpDepart(),
            info.getStOpNode(),
            info.getStOpUser(),
            info.getStOpType(),
            info.getStOpDesc(),
            info.getStOpResult(),
            info.getDtOpTime(),
            info.getDtStart(),
            info.getDtEnd(),
            info.getStCertNo(),
            info.getStResultExplain(),
            info.getNmDelivery(),
            info.getStSatisfaction(),
            info.getStSpecialType(),
            info.getStSpecialName(),
            info.getStSpecialReason(),
            info.getDtCreate(),
            info.getDtUpdate(),
            info.getStNodeTrackId()        	
        };
        if (con == null) {
            SQL.execute(sql, obj);
        } else {
            SQL.execute(con, sql, obj);
        }
    }

    public int update(Map<String, Object> map, Conditions conds) {
        String sql = "update UAC_UAPPLY_NODE_TRACK set ";
        List<Object> list = new ArrayList<Object>();
        int i = 0;
        for (String field : map.keySet()) {
            if (i++ > 0) {
                sql += ", ";
            }
            sql += field + " = ?";
            list.add(map.get(field));
        }
        String subsql = conds != null ? conds.toString() : "";
        if ("".equals(subsql)) {
            if (con == null) {
                return SQL.execute(sql).TOTAL_RECORD_COUNT;
            } else {
                return SQL.execute(con, sql).TOTAL_RECORD_COUNT;
            }
        } else {
            sql += " where " + subsql;
            list.addAll(conds.getObjectList());
            if (con == null) {
                return SQL.execute(sql, list.toArray()).TOTAL_RECORD_COUNT;
            } else {
                return SQL.execute(con, sql, list.toArray()).TOTAL_RECORD_COUNT;
            }
        }
    }
    
    public int delete(Conditions conds) {
        String sql = "delete from UAC_UAPPLY_NODE_TRACK";
        String subsql = conds != null ? conds.toString() : "";
        if ("".equals(subsql)) {
            if (con == null) {
                return SQL.execute(sql).TOTAL_RECORD_COUNT;
            } else {
                return SQL.execute(con, sql).TOTAL_RECORD_COUNT;
            }
        } else {
            sql += " where " + subsql;
            if (con == null) {
                return SQL.execute(sql, conds.getObjectArray()).TOTAL_RECORD_COUNT;
            } else {
                return SQL.execute(con, sql, conds.getObjectArray()).TOTAL_RECORD_COUNT;
            }
        }
    }

	public void delete(String[] stNodeTrackId) {
        Conditions conds = Conditions.newOrConditions();
        for (int i = 0; i < stNodeTrackId.length; i++) {
            Conditions subconds = Conditions.newAndConditions();
            subconds.add(new Condition("ST_NODE_TRACK_ID", Condition.OT_EQUAL, stNodeTrackId[i]));
            conds.add(subconds);
        }
        delete(conds);
    }

	public void delete(String stNodeTrackId) {
        Conditions conds = Conditions.newAndConditions();
        conds.add(new Condition("ST_NODE_TRACK_ID", Condition.OT_EQUAL, stNodeTrackId));
        delete(conds);
    }

    public PaginationArrayList<UacUapplyNodeTrack> query(Conditions conds, String suffix, int pageSize, int currentPage) {
        RecordSet rs;
        if (con == null) {
            rs = SQL.query("UAC_UAPPLY_NODE_TRACK", "*", conds, suffix, pageSize, currentPage);
        } else {
            rs = SQL.query(con, "UAC_UAPPLY_NODE_TRACK", "*", conds, suffix, pageSize, currentPage);
        }
        PaginationArrayList<UacUapplyNodeTrack> pal = new PaginationArrayList<UacUapplyNodeTrack>(rs.TOTAL_RECORD_COUNT, rs.COMMON_PAGE_SIZE, rs.CURRENT_PAGE);
        while (rs.next()) {
            UacUapplyNodeTrack info = new UacUapplyNodeTrack();
            setProperties(info, rs);
            pal.add(info);
        }
        return pal;
    }

    public List<UacUapplyNodeTrack> query(Conditions conds, String suffix) {
        RecordSet rs;
        if (con == null) {
            rs = SQL.query("UAC_UAPPLY_NODE_TRACK", "*", conds, suffix);
        } else {
            rs = SQL.query(con, "UAC_UAPPLY_NODE_TRACK", "*", conds, suffix);
        }
        ArrayList<UacUapplyNodeTrack> al = new ArrayList<UacUapplyNodeTrack>();
        while (rs.next()) {
            UacUapplyNodeTrack info = new UacUapplyNodeTrack();
            setProperties(info, rs);
            al.add(info);
        }
        return al;
    }
    
    public static void setProperties(UacUapplyNodeTrack info, RecordSet rs){
        info.setStNodeTrackId(rs.getOriginalString("ST_NODE_TRACK_ID"));
        info.setStTrackId(rs.getOriginalString("ST_TRACK_ID"));
        info.setStApplyId(rs.getOriginalString("ST_APPLY_ID"));
        info.setStOpDepart(rs.getOriginalString("ST_OP_DEPART"));
        info.setStOpNode(rs.getOriginalString("ST_OP_NODE"));
        info.setStOpUser(rs.getOriginalString("ST_OP_USER"));
        info.setStOpType(rs.getOriginalString("ST_OP_TYPE"));
        info.setStOpDesc(rs.getOriginalString("ST_OP_DESC"));
        info.setStOpResult(rs.getOriginalString("ST_OP_RESULT"));
        info.setDtOpTime(rs.getTimestamp("DT_OP_TIME"));
        info.setDtStart(rs.getTimestamp("DT_START"));
        info.setDtEnd(rs.getTimestamp("DT_END"));
        info.setStCertNo(rs.getOriginalString("ST_CERT_NO"));
        info.setStResultExplain(rs.getOriginalString("ST_RESULT_EXPLAIN"));
        info.setNmDelivery(rs.getBigDecimal("NM_DELIVERY"));
        info.setStSatisfaction(rs.getOriginalString("ST_SATISFACTION"));
        info.setStSpecialType(rs.getOriginalString("ST_SPECIAL_TYPE"));
        info.setStSpecialName(rs.getOriginalString("ST_SPECIAL_NAME"));
        info.setStSpecialReason(rs.getOriginalString("ST_SPECIAL_REASON"));
        info.setDtCreate(rs.getTimestamp("DT_CREATE"));
        info.setDtUpdate(rs.getTimestamp("DT_UPDATE"));
    }

	public UacUapplyNodeTrack get(String stNodeTrackId) {
        Conditions conds = Conditions.newAndConditions();
        conds.add(new Condition("ST_NODE_TRACK_ID", Condition.OT_EQUAL, stNodeTrackId));
        List<UacUapplyNodeTrack> list = query(conds, null);
        return list.size() > 0 ? list.get(0) : null;
    }

    public UacUapplyNodeTrack getByTrackId(String stTrackId) {
        Conditions conds = Conditions.newAndConditions();
        conds.add(new Condition("ST_TRACK_ID", Condition.OT_EQUAL, stTrackId));
        List<UacUapplyNodeTrack> list = query(conds, null);
        return list.size() > 0 ? list.get(0) : null;
    }
}
