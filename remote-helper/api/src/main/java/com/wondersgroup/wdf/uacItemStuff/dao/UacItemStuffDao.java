package com.wondersgroup.wdf.uacItemStuff.dao;

import org.springframework.stereotype.Repository;
import wfc.facility.tool.autocode.PaginationArrayList;
import wfc.service.database.Condition;
import wfc.service.database.Conditions;
import wfc.service.database.RecordSet;
import wfc.service.database.SQL;

import java.sql.Connection;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

/**
 * 事项材料
 * @author generated by wfc.facility.tool.autocode.InternalDaoGenerator
 */
@Repository
public class UacItemStuffDao {

    private Connection con = null;

    public UacItemStuffDao() {
    }

    public UacItemStuffDao(Connection con) {
        this.con = con;
    }

    public void add(UacItemStuff info) {
        String sql = "insert into UAC_ITEM_STUFF(ST_ITEM_STUFF_ID, ST_STUFF_ID, ST_CITEM_ID, ST_ITEM_ID, ST_ORGAN_ID, ST_DEPART_CODE, NM_MUST, NM_ORIGINAL, NM_COPY, NM_ORDER2, NM_SAMPLE, NM_UPLOAD, ST_SHOW, ST_LAB_NAME, ST_SOURCE, NM_ORDER, NM_REMOVED) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        Object[] obj = {
            info.getStItemStuffId(),
            info.getStStuffId(),
            info.getStCitemId(),
            info.getStItemId(),
            info.getStOrganId(),
            info.getStDepartCode(),
            info.getNmMust(),
            info.getNmOriginal(),
            info.getNmCopy(),
            info.getNmOrder2(),
            info.getNmSample(),
            info.getNmUpload(),
            info.getStShow(),
            info.getStLabName(),
            info.getStSource(),
            info.getNmOrder(),
            info.getNmRemoved()        	
        };
        if (con == null) {
            SQL.execute(sql, obj);
        } else {
            SQL.execute(con, sql, obj);
        }
    }

    public void update(UacItemStuff info) {
        String sql = "update UAC_ITEM_STUFF set ST_STUFF_ID = ?, ST_CITEM_ID = ?, ST_ITEM_ID = ?, ST_ORGAN_ID = ?, ST_DEPART_CODE = ?, NM_MUST = ?, NM_ORIGINAL = ?, NM_COPY = ?, NM_ORDER2 = ?, NM_SAMPLE = ?, NM_UPLOAD = ?, ST_SHOW = ?, ST_LAB_NAME = ?, ST_SOURCE = ?, NM_ORDER = ?, NM_REMOVED = ? where ST_ITEM_STUFF_ID = ?";
        Object[] obj = {
            info.getStStuffId(),
            info.getStCitemId(),
            info.getStItemId(),
            info.getStOrganId(),
            info.getStDepartCode(),
            info.getNmMust(),
            info.getNmOriginal(),
            info.getNmCopy(),
            info.getNmOrder2(),
            info.getNmSample(),
            info.getNmUpload(),
            info.getStShow(),
            info.getStLabName(),
            info.getStSource(),
            info.getNmOrder(),
            info.getNmRemoved(),
            info.getStItemStuffId()        	
        };
        if (con == null) {
            SQL.execute(sql, obj);
        } else {
            SQL.execute(con, sql, obj);
        }
    }

    public int update(Map<String, Object> map, Conditions conds) {
        String sql = "update UAC_ITEM_STUFF set ";
        List<Object> list = new ArrayList<Object>();
        int i = 0;
        for (String field : map.keySet()) {
            if (i++ > 0) {
                sql += ", ";
            }
            sql += field + " = ?";
            list.add(map.get(field));
        }
        String subsql = conds != null ? conds.toString() : "";
        if ("".equals(subsql)) {
            if (con == null) {
                return SQL.execute(sql).TOTAL_RECORD_COUNT;
            } else {
                return SQL.execute(con, sql).TOTAL_RECORD_COUNT;
            }
        } else {
            sql += " where " + subsql;
            list.addAll(conds.getObjectList());
            if (con == null) {
                return SQL.execute(sql, list.toArray()).TOTAL_RECORD_COUNT;
            } else {
                return SQL.execute(con, sql, list.toArray()).TOTAL_RECORD_COUNT;
            }
        }
    }
    
    public int delete(Conditions conds) {
        String sql = "delete from UAC_ITEM_STUFF";
        String subsql = conds != null ? conds.toString() : "";
        if ("".equals(subsql)) {
            if (con == null) {
                return SQL.execute(sql).TOTAL_RECORD_COUNT;
            } else {
                return SQL.execute(con, sql).TOTAL_RECORD_COUNT;
            }
        } else {
            sql += " where " + subsql;
            if (con == null) {
                return SQL.execute(sql, conds.getObjectArray()).TOTAL_RECORD_COUNT;
            } else {
                return SQL.execute(con, sql, conds.getObjectArray()).TOTAL_RECORD_COUNT;
            }
        }
    }

	public void delete(String[] stItemStuffId) {
        Conditions conds = Conditions.newOrConditions();
        for (int i = 0; i < stItemStuffId.length; i++) {
            Conditions subconds = Conditions.newAndConditions();
            subconds.add(new Condition("ST_ITEM_STUFF_ID", Condition.OT_EQUAL, stItemStuffId[i]));
            conds.add(subconds);
        }
        delete(conds);
    }

	public void delete(String stItemStuffId) {
        Conditions conds = Conditions.newAndConditions();
        conds.add(new Condition("ST_ITEM_STUFF_ID", Condition.OT_EQUAL, stItemStuffId));
        delete(conds);
    }

    public PaginationArrayList<UacItemStuff> query(Conditions conds, String suffix, int pageSize, int currentPage) {
        RecordSet rs;
        if (con == null) {
            rs = SQL.query("UAC_ITEM_STUFF", "*", conds, suffix, pageSize, currentPage);
        } else {
            rs = SQL.query(con, "UAC_ITEM_STUFF", "*", conds, suffix, pageSize, currentPage);
        }
        PaginationArrayList<UacItemStuff> pal = new PaginationArrayList<UacItemStuff>(rs.TOTAL_RECORD_COUNT, rs.COMMON_PAGE_SIZE, rs.CURRENT_PAGE);
        while (rs.next()) {
            UacItemStuff info = new UacItemStuff();
            setProperties(info, rs);
            pal.add(info);
        }
        return pal;
    }

    public List<UacItemStuff> query(Conditions conds, String suffix) {
        RecordSet rs;
        if (con == null) {
            rs = SQL.query("UAC_ITEM_STUFF", "*", conds, suffix);
        } else {
            rs = SQL.query(con, "UAC_ITEM_STUFF", "*", conds, suffix);
        }
        ArrayList<UacItemStuff> al = new ArrayList<UacItemStuff>();
        while (rs.next()) {
            UacItemStuff info = new UacItemStuff();
            setProperties(info, rs);
            al.add(info);
        }
        return al;
    }
    
    public static void setProperties(UacItemStuff info, RecordSet rs){
        info.setStItemStuffId(rs.getOriginalString("ST_ITEM_STUFF_ID"));
        info.setStStuffId(rs.getOriginalString("ST_STUFF_ID"));
        info.setStCitemId(rs.getOriginalString("ST_CITEM_ID"));
        info.setStItemId(rs.getOriginalString("ST_ITEM_ID"));
        info.setStOrganId(rs.getOriginalString("ST_ORGAN_ID"));
        info.setStDepartCode(rs.getOriginalString("ST_DEPART_CODE"));
        info.setNmMust(rs.getBigDecimal("NM_MUST"));
        info.setNmOriginal(rs.getBigDecimal("NM_ORIGINAL"));
        info.setNmCopy(rs.getBigDecimal("NM_COPY"));
        info.setNmOrder2(rs.getBigDecimal("NM_ORDER2"));
        info.setNmSample(rs.getBigDecimal("NM_SAMPLE"));
        info.setNmUpload(rs.getBigDecimal("NM_UPLOAD"));
        info.setStShow(rs.getOriginalString("ST_SHOW"));
        info.setStLabName(rs.getOriginalString("ST_LAB_NAME"));
        info.setStSource(rs.getOriginalString("ST_SOURCE"));
        info.setNmOrder(rs.getBigDecimal("NM_ORDER"));
        info.setNmRemoved(rs.getBigDecimal("NM_REMOVED"));
    }

	public UacItemStuff get(String stItemStuffId) {
        Conditions conds = Conditions.newAndConditions();
        conds.add(new Condition("ST_ITEM_STUFF_ID", Condition.OT_EQUAL, stItemStuffId));
        List<UacItemStuff> list = query(conds, null);
        return list.size() > 0 ? list.get(0) : null;
    }

    /**
     * 通过事项id 查询事项材料
     * @param stItemId
     * @return
     */
    public List<UacItemStuff> getByst_item_id(String stItemId) {
        Conditions conds = Conditions.newAndConditions();
        conds.add(new Condition("ST_ITEM_ID", Condition.OT_EQUAL, stItemId));
        List<UacItemStuff> list = query(conds, null);
        return list;
    }

}
