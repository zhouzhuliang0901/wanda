package com.wondersgroup.wdf.dao;

import java.math.*;
import java.sql.*;
import java.util.*;
import wfc.facility.tool.autocode.*;
import wfc.service.database.*;
import org.springframework.stereotype.Repository;

/**
 * 综合受理一表式
 * @author generated by wfc.facility.tool.autocode.InternalDaoGenerator
 */
@Repository
public class UacUapplyBasicDao {

    private Connection con = null;

    public UacUapplyBasicDao() {
    }

    public UacUapplyBasicDao(Connection con) {
        this.con = con;
    }

    public void add(UacUapplyBasic info) {
        String sql = "insert into UAC_UAPPLY_BASIC(ST_APPLY_ID, ST_QUERY1, ST_QUERY2, ST_QUERY3, ST_QUERY4, ST_QUERY5, ST_QUERY6, DT_DATE1, DT_DATE2, DT_DATE3, DT_DATE4, DT_DATE5, NM_DIGITAL1, NM_DIGITAL2, NM_DIGITAL3, NM_DIGITAL4, NM_DIGITAL5, ST_EXT1, ST_EXT2, ST_EXT3, ST_EXT4, ST_EXT5, ST_CONTENT_DESC, ST_ZIP_CODE, ST_ADDRESS, ST_LRECEIVOR, ST_LRECEIVE_PHONE, ST_RECEIVER_PROVINCE, ST_RECEIVER_CITY, ST_RECEIVER_AREA, ST_LRECEIVE_ADDRESS, ST_SHIP_COMPANY, ST_SUBMIT_TYPE, ST_OTHER_EXT, ST_CONTENT_ID, ST_RESULT_ID) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        Object[] obj = {
                info.getStApplyId(),
                info.getStQuery1(),
                info.getStQuery2(),
                info.getStQuery3(),
                info.getStQuery4(),
                info.getStQuery5(),
                info.getStQuery6(),
                info.getDtDate1(),
                info.getDtDate2(),
                info.getDtDate3(),
                info.getDtDate4(),
                info.getDtDate5(),
                info.getNmDigital1(),
                info.getNmDigital2(),
                info.getNmDigital3(),
                info.getNmDigital4(),
                info.getNmDigital5(),
                info.getStExt1(),
                info.getStExt2(),
                info.getStExt3(),
                info.getStExt4(),
                info.getStExt5(),
                info.getStContentDesc(),
                info.getStZipCode(),
                info.getStAddress(),
                info.getStLreceivor(),
                info.getStLreceivePhone(),
                info.getStReceiverProvince(),
                info.getStReceiverCity(),
                info.getStReceiverArea(),
                info.getStLreceiveAddress(),
                info.getStShipCompany(),
                info.getStSubmitType(),
                info.getStOtherExt(),
                info.getStContentId(),
                info.getStResultId()
        };
        if (con == null) {
            SQL.execute(sql, obj);
        } else {
            SQL.execute(con, sql, obj);
        }
    }

    public void update(UacUapplyBasic info) {
        String sql = "update UAC_UAPPLY_BASIC set ST_QUERY1 = ?, ST_QUERY2 = ?, ST_QUERY3 = ?, ST_QUERY4 = ?, ST_QUERY5 = ?, ST_QUERY6 = ?, DT_DATE1 = ?, DT_DATE2 = ?, DT_DATE3 = ?, DT_DATE4 = ?, DT_DATE5 = ?, NM_DIGITAL1 = ?, NM_DIGITAL2 = ?, NM_DIGITAL3 = ?, NM_DIGITAL4 = ?, NM_DIGITAL5 = ?, ST_EXT1 = ?, ST_EXT2 = ?, ST_EXT3 = ?, ST_EXT4 = ?, ST_EXT5 = ?, ST_CONTENT_DESC = ?, ST_ZIP_CODE = ?, ST_ADDRESS = ?, ST_LRECEIVOR = ?, ST_LRECEIVE_PHONE = ?, ST_RECEIVER_PROVINCE = ?, ST_RECEIVER_CITY = ?, ST_RECEIVER_AREA = ?, ST_LRECEIVE_ADDRESS = ?, ST_SHIP_COMPANY = ?, ST_SUBMIT_TYPE = ?, ST_OTHER_EXT = ?, ST_CONTENT_ID = ?, ST_RESULT_ID = ? where ST_APPLY_ID = ?";
        Object[] obj = {
                info.getStQuery1(),
                info.getStQuery2(),
                info.getStQuery3(),
                info.getStQuery4(),
                info.getStQuery5(),
                info.getStQuery6(),
                info.getDtDate1(),
                info.getDtDate2(),
                info.getDtDate3(),
                info.getDtDate4(),
                info.getDtDate5(),
                info.getNmDigital1(),
                info.getNmDigital2(),
                info.getNmDigital3(),
                info.getNmDigital4(),
                info.getNmDigital5(),
                info.getStExt1(),
                info.getStExt2(),
                info.getStExt3(),
                info.getStExt4(),
                info.getStExt5(),
                info.getStContentDesc(),
                info.getStZipCode(),
                info.getStAddress(),
                info.getStLreceivor(),
                info.getStLreceivePhone(),
                info.getStReceiverProvince(),
                info.getStReceiverCity(),
                info.getStReceiverArea(),
                info.getStLreceiveAddress(),
                info.getStShipCompany(),
                info.getStSubmitType(),
                info.getStOtherExt(),
                info.getStContentId(),
                info.getStResultId(),
                info.getStApplyId()
        };
        if (con == null) {
            SQL.execute(sql, obj);
        } else {
            SQL.execute(con, sql, obj);
        }
    }

    public int update(Map<String, Object> map, Conditions conds) {
        String sql = "update UAC_UAPPLY_BASIC set ";
        List<Object> list = new ArrayList<Object>();
        int i = 0;
        for (String field : map.keySet()) {
            if (i++ > 0) {
                sql += ", ";
            }
            sql += field + " = ?";
            list.add(map.get(field));
        }
        String subsql = conds != null ? conds.toString() : "";
        if ("".equals(subsql)) {
            if (con == null) {
                return SQL.execute(sql).TOTAL_RECORD_COUNT;
            } else {
                return SQL.execute(con, sql).TOTAL_RECORD_COUNT;
            }
        } else {
            sql += " where " + subsql;
            list.addAll(conds.getObjectList());
            if (con == null) {
                return SQL.execute(sql, list.toArray()).TOTAL_RECORD_COUNT;
            } else {
                return SQL.execute(con, sql, list.toArray()).TOTAL_RECORD_COUNT;
            }
        }
    }

    public int delete(Conditions conds) {
        String sql = "delete from UAC_UAPPLY_BASIC";
        String subsql = conds != null ? conds.toString() : "";
        if ("".equals(subsql)) {
            if (con == null) {
                return SQL.execute(sql).TOTAL_RECORD_COUNT;
            } else {
                return SQL.execute(con, sql).TOTAL_RECORD_COUNT;
            }
        } else {
            sql += " where " + subsql;
            if (con == null) {
                return SQL.execute(sql, conds.getObjectArray()).TOTAL_RECORD_COUNT;
            } else {
                return SQL.execute(con, sql, conds.getObjectArray()).TOTAL_RECORD_COUNT;
            }
        }
    }

    public void delete(String[] stApplyId) {
        Conditions conds = Conditions.newOrConditions();
        for (int i = 0; i < stApplyId.length; i++) {
            Conditions subconds = Conditions.newAndConditions();
            subconds.add(new Condition("ST_APPLY_ID", Condition.OT_EQUAL, stApplyId[i]));
            conds.add(subconds);
        }
        delete(conds);
    }

    public void delete(String stApplyId) {
        Conditions conds = Conditions.newAndConditions();
        conds.add(new Condition("ST_APPLY_ID", Condition.OT_EQUAL, stApplyId));
        delete(conds);
    }

    public PaginationArrayList<UacUapplyBasic> query(Conditions conds, String suffix, int pageSize, int currentPage) {
        RecordSet rs;
        if (con == null) {
            rs = SQL.query("UAC_UAPPLY_BASIC", "*", conds, suffix, pageSize, currentPage);
        } else {
            rs = SQL.query(con, "UAC_UAPPLY_BASIC", "*", conds, suffix, pageSize, currentPage);
        }
        PaginationArrayList<UacUapplyBasic> pal = new PaginationArrayList<UacUapplyBasic>(rs.TOTAL_RECORD_COUNT, rs.COMMON_PAGE_SIZE, rs.CURRENT_PAGE);
        while (rs.next()) {
            UacUapplyBasic info = new UacUapplyBasic();
            setProperties(info, rs);
            pal.add(info);
        }
        return pal;
    }

    public List<UacUapplyBasic> query(Conditions conds, String suffix) {
        RecordSet rs;
        if (con == null) {
            rs = SQL.query("UAC_UAPPLY_BASIC", "*", conds, suffix);
        } else {
            rs = SQL.query(con, "UAC_UAPPLY_BASIC", "*", conds, suffix);
        }
        ArrayList<UacUapplyBasic> al = new ArrayList<UacUapplyBasic>();
        while (rs.next()) {
            UacUapplyBasic info = new UacUapplyBasic();
            setProperties(info, rs);
            al.add(info);
        }
        return al;
    }

    public static void setProperties(UacUapplyBasic info, RecordSet rs){
        info.setStApplyId(rs.getOriginalString("ST_APPLY_ID"));
        info.setStQuery1(rs.getOriginalString("ST_QUERY1"));
        info.setStQuery2(rs.getOriginalString("ST_QUERY2"));
        info.setStQuery3(rs.getOriginalString("ST_QUERY3"));
        info.setStQuery4(rs.getOriginalString("ST_QUERY4"));
        info.setStQuery5(rs.getOriginalString("ST_QUERY5"));
        info.setStQuery6(rs.getOriginalString("ST_QUERY6"));
        info.setDtDate1(rs.getTimestamp("DT_DATE1"));
        info.setDtDate2(rs.getTimestamp("DT_DATE2"));
        info.setDtDate3(rs.getTimestamp("DT_DATE3"));
        info.setDtDate4(rs.getTimestamp("DT_DATE4"));
        info.setDtDate5(rs.getTimestamp("DT_DATE5"));
        info.setNmDigital1(rs.getBigDecimal("NM_DIGITAL1"));
        info.setNmDigital2(rs.getBigDecimal("NM_DIGITAL2"));
        info.setNmDigital3(rs.getBigDecimal("NM_DIGITAL3"));
        info.setNmDigital4(rs.getBigDecimal("NM_DIGITAL4"));
        info.setNmDigital5(rs.getBigDecimal("NM_DIGITAL5"));
        info.setStExt1(rs.getOriginalString("ST_EXT1"));
        info.setStExt2(rs.getOriginalString("ST_EXT2"));
        info.setStExt3(rs.getOriginalString("ST_EXT3"));
        info.setStExt4(rs.getOriginalString("ST_EXT4"));
        info.setStExt5(rs.getOriginalString("ST_EXT5"));
        info.setStContentDesc(rs.getOriginalString("ST_CONTENT_DESC"));
        info.setStZipCode(rs.getOriginalString("ST_ZIP_CODE"));
        info.setStAddress(rs.getOriginalString("ST_ADDRESS"));
        info.setStLreceivor(rs.getOriginalString("ST_LRECEIVOR"));
        info.setStLreceivePhone(rs.getOriginalString("ST_LRECEIVE_PHONE"));
        info.setStReceiverProvince(rs.getOriginalString("ST_RECEIVER_PROVINCE"));
        info.setStReceiverCity(rs.getOriginalString("ST_RECEIVER_CITY"));
        info.setStReceiverArea(rs.getOriginalString("ST_RECEIVER_AREA"));
        info.setStLreceiveAddress(rs.getOriginalString("ST_LRECEIVE_ADDRESS"));
        info.setStShipCompany(rs.getOriginalString("ST_SHIP_COMPANY"));
        info.setStSubmitType(rs.getOriginalString("ST_SUBMIT_TYPE"));
        info.setStOtherExt(rs.getOriginalString("ST_OTHER_EXT"));
        info.setStContentId(rs.getOriginalString("ST_CONTENT_ID"));
        info.setStResultId(rs.getOriginalString("ST_RESULT_ID"));
    }

    public UacUapplyBasic get(String stApplyId) {
        Conditions conds = Conditions.newAndConditions();
        conds.add(new Condition("ST_APPLY_ID", Condition.OT_EQUAL, stApplyId));
        List<UacUapplyBasic> list = query(conds, null);
        return list.size() > 0 ? list.get(0) : null;
    }

}
