package com.wondersgroup.wdf.dao;

import org.springframework.stereotype.Repository;
import wfc.facility.tool.autocode.PaginationArrayList;
import wfc.service.database.Condition;
import wfc.service.database.Conditions;
import wfc.service.database.RecordSet;
import wfc.service.database.SQL;

import java.sql.Connection;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

/**
 * 综合办件跟踪信息
 * @author generated by wfc.facility.tool.autocode.InternalDaoGenerator
 */
@Repository
public class UacUapplyTrackDao {

    private Connection con = null;

    public UacUapplyTrackDao() {
    }

    public UacUapplyTrackDao(Connection con) {
        this.con = con;
    }

    public void add(UacUapplyTrack info) {
        String sql = "insert into UAC_UAPPLY_TRACK(ST_TRACK_ID, ST_FEEDBACK_ID, ST_APPLY_ID, ST_OP, ST_OP_RESULT, DT_OP_TIME, ST_BTYPE, NM_FROM_TYPE, ST_UNION_LOGISTICS_ID, DT_CREATE, DT_UPDATE) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        Object[] obj = {
            info.getStTrackId(),
            info.getStFeedbackId(),
            info.getStApplyId(),
            info.getStOp(),
            info.getStOpResult(),
            info.getDtOpTime(),
            info.getStBtype(),
            info.getNmFromType(),
            info.getStUnionLogisticsId(),
            info.getDtCreate(),
            info.getDtUpdate()        	
        };
        if (con == null) {
            SQL.execute(sql, obj);
        } else {
            SQL.execute(con, sql, obj);
        }
    }

    public void update(UacUapplyTrack info) {
        String sql = "update UAC_UAPPLY_TRACK set ST_FEEDBACK_ID = ?, ST_APPLY_ID = ?, ST_OP = ?, ST_OP_RESULT = ?, DT_OP_TIME = ?, ST_BTYPE = ?, NM_FROM_TYPE = ?, ST_UNION_LOGISTICS_ID = ?, DT_CREATE = ?, DT_UPDATE = ? where ST_TRACK_ID = ?";
        Object[] obj = {
            info.getStFeedbackId(),
            info.getStApplyId(),
            info.getStOp(),
            info.getStOpResult(),
            info.getDtOpTime(),
            info.getStBtype(),
            info.getNmFromType(),
            info.getStUnionLogisticsId(),
            info.getDtCreate(),
            info.getDtUpdate(),
            info.getStTrackId()        	
        };
        if (con == null) {
            SQL.execute(sql, obj);
        } else {
            SQL.execute(con, sql, obj);
        }
    }

    public int update(Map<String, Object> map, Conditions conds) {
        String sql = "update UAC_UAPPLY_TRACK set ";
        List<Object> list = new ArrayList<Object>();
        int i = 0;
        for (String field : map.keySet()) {
            if (i++ > 0) {
                sql += ", ";
            }
            sql += field + " = ?";
            list.add(map.get(field));
        }
        String subsql = conds != null ? conds.toString() : "";
        if ("".equals(subsql)) {
            if (con == null) {
                return SQL.execute(sql).TOTAL_RECORD_COUNT;
            } else {
                return SQL.execute(con, sql).TOTAL_RECORD_COUNT;
            }
        } else {
            sql += " where " + subsql;
            list.addAll(conds.getObjectList());
            if (con == null) {
                return SQL.execute(sql, list.toArray()).TOTAL_RECORD_COUNT;
            } else {
                return SQL.execute(con, sql, list.toArray()).TOTAL_RECORD_COUNT;
            }
        }
    }
    
    public int delete(Conditions conds) {
        String sql = "delete from UAC_UAPPLY_TRACK";
        String subsql = conds != null ? conds.toString() : "";
        if ("".equals(subsql)) {
            if (con == null) {
                return SQL.execute(sql).TOTAL_RECORD_COUNT;
            } else {
                return SQL.execute(con, sql).TOTAL_RECORD_COUNT;
            }
        } else {
            sql += " where " + subsql;
            if (con == null) {
                return SQL.execute(sql, conds.getObjectArray()).TOTAL_RECORD_COUNT;
            } else {
                return SQL.execute(con, sql, conds.getObjectArray()).TOTAL_RECORD_COUNT;
            }
        }
    }

	public void delete(String[] stTrackId) {
        Conditions conds = Conditions.newOrConditions();
        for (int i = 0; i < stTrackId.length; i++) {
            Conditions subconds = Conditions.newAndConditions();
            subconds.add(new Condition("ST_TRACK_ID", Condition.OT_EQUAL, stTrackId[i]));
            conds.add(subconds);
        }
        delete(conds);
    }

	public void delete(String stTrackId) {
        Conditions conds = Conditions.newAndConditions();
        conds.add(new Condition("ST_TRACK_ID", Condition.OT_EQUAL, stTrackId));
        delete(conds);
    }

    public PaginationArrayList<UacUapplyTrack> query(Conditions conds, String suffix, int pageSize, int currentPage) {
        RecordSet rs;
        if (con == null) {
            rs = SQL.query("UAC_UAPPLY_TRACK", "*", conds, suffix, pageSize, currentPage);
        } else {
            rs = SQL.query(con, "UAC_UAPPLY_TRACK", "*", conds, suffix, pageSize, currentPage);
        }
        PaginationArrayList<UacUapplyTrack> pal = new PaginationArrayList<UacUapplyTrack>(rs.TOTAL_RECORD_COUNT, rs.COMMON_PAGE_SIZE, rs.CURRENT_PAGE);
        while (rs.next()) {
            UacUapplyTrack info = new UacUapplyTrack();
            setProperties(info, rs);
            pal.add(info);
        }
        return pal;
    }

    public List<UacUapplyTrack> query(Conditions conds, String suffix) {
        RecordSet rs;
        if (con == null) {
            rs = SQL.query("UAC_UAPPLY_TRACK", "*", conds, suffix);
        } else {
            rs = SQL.query(con, "UAC_UAPPLY_TRACK", "*", conds, suffix);
        }
        ArrayList<UacUapplyTrack> al = new ArrayList<UacUapplyTrack>();
        while (rs.next()) {
            UacUapplyTrack info = new UacUapplyTrack();
            setProperties(info, rs);
            al.add(info);
        }
        return al;
    }
    
    public static void setProperties(UacUapplyTrack info, RecordSet rs){
        info.setStTrackId(rs.getOriginalString("ST_TRACK_ID"));
        info.setStFeedbackId(rs.getOriginalString("ST_FEEDBACK_ID"));
        info.setStApplyId(rs.getOriginalString("ST_APPLY_ID"));
        info.setStOp(rs.getOriginalString("ST_OP"));
        info.setStOpResult(rs.getOriginalString("ST_OP_RESULT"));
        info.setDtOpTime(rs.getTimestamp("DT_OP_TIME"));
        info.setStBtype(rs.getOriginalString("ST_BTYPE"));
        info.setNmFromType(rs.getBigDecimal("NM_FROM_TYPE"));
        info.setStUnionLogisticsId(rs.getOriginalString("ST_UNION_LOGISTICS_ID"));
        info.setDtCreate(rs.getTimestamp("DT_CREATE"));
        info.setDtUpdate(rs.getTimestamp("DT_UPDATE"));
    }

	public UacUapplyTrack get(String stTrackId) {
        Conditions conds = Conditions.newAndConditions();
        conds.add(new Condition("ST_TRACK_ID", Condition.OT_EQUAL, stTrackId));
        List<UacUapplyTrack> list = query(conds, null);
        return list.size() > 0 ? list.get(0) : null;
    }

}
