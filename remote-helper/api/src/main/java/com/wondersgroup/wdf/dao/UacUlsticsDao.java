package com.wondersgroup.wdf.dao;

import org.springframework.stereotype.Repository;
import wfc.facility.tool.autocode.PaginationArrayList;
import wfc.service.database.Condition;
import wfc.service.database.Conditions;
import wfc.service.database.RecordSet;
import wfc.service.database.SQL;

import java.sql.Connection;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

/**
 * 办件物流
 * @author generated by wfc.facility.tool.autocode.InternalDaoGenerator
 */
@Repository
public class UacUlsticsDao {

    private Connection con = null;

    public UacUlsticsDao() {
    }

    public UacUlsticsDao(Connection con) {
        this.con = con;
    }

    public void add(UacUlstics info) {
        String sql = "insert into UAC_ULSTICS(ST_UNION_LOGISTICS_ID, ST_RECEIVER, ST_RECEIVER_PHONE, ST_RECEIVER_ZIPCODE, ST_RECEIVER_PROVINCE, ST_RECEIVER_CITY, ST_RECEIVER_AREA, ST_RECEIVER_ADDRESS, ST_SENDER, ST_SENDER_PHONE, ST_SENDER_ZIPCODE, ST_SENDER_PROVINCE, ST_SENDER_CITY, ST_SENDER_AREA, ST_SENDER_ADDRESS, ST_SHIP_COMPANY, NM_TYPE, NM_LOGISTICS_TYPE, ST_LOGISTICS_NO, ST_ORDER_ID, ST_AREA_ID, ST_DEPART_CODE, ST_DEPART_NAME, ST_USER_ID, DT_PORDER, DT_CREATE, DT_UPDATE, ST_EXT1, ST_EXT2) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        Object[] obj = {
            info.getStUnionLogisticsId(),
            info.getStReceiver(),
            info.getStReceiverPhone(),
            info.getStReceiverZipcode(),
            info.getStReceiverProvince(),
            info.getStReceiverCity(),
            info.getStReceiverArea(),
            info.getStReceiverAddress(),
            info.getStSender(),
            info.getStSenderPhone(),
            info.getStSenderZipcode(),
            info.getStSenderProvince(),
            info.getStSenderCity(),
            info.getStSenderArea(),
            info.getStSenderAddress(),
            info.getStShipCompany(),
            info.getNmType(),
            info.getNmLogisticsType(),
            info.getStLogisticsNo(),
            info.getStOrderId(),
            info.getStAreaId(),
            info.getStDepartCode(),
            info.getStDepartName(),
            info.getStUserId(),
            info.getDtPorder(),
            info.getDtCreate(),
            info.getDtUpdate(),
            info.getStExt1(),
            info.getStExt2()        	
        };
        if (con == null) {
            SQL.execute(sql, obj);
        } else {
            SQL.execute(con, sql, obj);
        }
    }

    public void update(UacUlstics info) {
        String sql = "update UAC_ULSTICS set ST_RECEIVER = ?, ST_RECEIVER_PHONE = ?, ST_RECEIVER_ZIPCODE = ?, ST_RECEIVER_PROVINCE = ?, ST_RECEIVER_CITY = ?, ST_RECEIVER_AREA = ?, ST_RECEIVER_ADDRESS = ?, ST_SENDER = ?, ST_SENDER_PHONE = ?, ST_SENDER_ZIPCODE = ?, ST_SENDER_PROVINCE = ?, ST_SENDER_CITY = ?, ST_SENDER_AREA = ?, ST_SENDER_ADDRESS = ?, ST_SHIP_COMPANY = ?, NM_TYPE = ?, NM_LOGISTICS_TYPE = ?, ST_LOGISTICS_NO = ?, ST_ORDER_ID = ?, ST_AREA_ID = ?, ST_DEPART_CODE = ?, ST_DEPART_NAME = ?, ST_USER_ID = ?, DT_PORDER = ?, DT_CREATE = ?, DT_UPDATE = ?, ST_EXT1 = ?, ST_EXT2 = ? where ST_UNION_LOGISTICS_ID = ?";
        Object[] obj = {
            info.getStReceiver(),
            info.getStReceiverPhone(),
            info.getStReceiverZipcode(),
            info.getStReceiverProvince(),
            info.getStReceiverCity(),
            info.getStReceiverArea(),
            info.getStReceiverAddress(),
            info.getStSender(),
            info.getStSenderPhone(),
            info.getStSenderZipcode(),
            info.getStSenderProvince(),
            info.getStSenderCity(),
            info.getStSenderArea(),
            info.getStSenderAddress(),
            info.getStShipCompany(),
            info.getNmType(),
            info.getNmLogisticsType(),
            info.getStLogisticsNo(),
            info.getStOrderId(),
            info.getStAreaId(),
            info.getStDepartCode(),
            info.getStDepartName(),
            info.getStUserId(),
            info.getDtPorder(),
            info.getDtCreate(),
            info.getDtUpdate(),
            info.getStExt1(),
            info.getStExt2(),
            info.getStUnionLogisticsId()        	
        };
        if (con == null) {
            SQL.execute(sql, obj);
        } else {
            SQL.execute(con, sql, obj);
        }
    }

    public int update(Map<String, Object> map, Conditions conds) {
        String sql = "update UAC_ULSTICS set ";
        List<Object> list = new ArrayList<Object>();
        int i = 0;
        for (String field : map.keySet()) {
            if (i++ > 0) {
                sql += ", ";
            }
            sql += field + " = ?";
            list.add(map.get(field));
        }
        String subsql = conds != null ? conds.toString() : "";
        if ("".equals(subsql)) {
            if (con == null) {
                return SQL.execute(sql).TOTAL_RECORD_COUNT;
            } else {
                return SQL.execute(con, sql).TOTAL_RECORD_COUNT;
            }
        } else {
            sql += " where " + subsql;
            list.addAll(conds.getObjectList());
            if (con == null) {
                return SQL.execute(sql, list.toArray()).TOTAL_RECORD_COUNT;
            } else {
                return SQL.execute(con, sql, list.toArray()).TOTAL_RECORD_COUNT;
            }
        }
    }
    
    public int delete(Conditions conds) {
        String sql = "delete from UAC_ULSTICS";
        String subsql = conds != null ? conds.toString() : "";
        if ("".equals(subsql)) {
            if (con == null) {
                return SQL.execute(sql).TOTAL_RECORD_COUNT;
            } else {
                return SQL.execute(con, sql).TOTAL_RECORD_COUNT;
            }
        } else {
            sql += " where " + subsql;
            if (con == null) {
                return SQL.execute(sql, conds.getObjectArray()).TOTAL_RECORD_COUNT;
            } else {
                return SQL.execute(con, sql, conds.getObjectArray()).TOTAL_RECORD_COUNT;
            }
        }
    }

	public void delete(String[] stUnionLogisticsId) {
        Conditions conds = Conditions.newOrConditions();
        for (int i = 0; i < stUnionLogisticsId.length; i++) {
            Conditions subconds = Conditions.newAndConditions();
            subconds.add(new Condition("ST_UNION_LOGISTICS_ID", Condition.OT_EQUAL, stUnionLogisticsId[i]));
            conds.add(subconds);
        }
        delete(conds);
    }

	public void delete(String stUnionLogisticsId) {
        Conditions conds = Conditions.newAndConditions();
        conds.add(new Condition("ST_UNION_LOGISTICS_ID", Condition.OT_EQUAL, stUnionLogisticsId));
        delete(conds);
    }

    public PaginationArrayList<UacUlstics> query(Conditions conds, String suffix, int pageSize, int currentPage) {
        RecordSet rs;
        if (con == null) {
            rs = SQL.query("UAC_ULSTICS", "*", conds, suffix, pageSize, currentPage);
        } else {
            rs = SQL.query(con, "UAC_ULSTICS", "*", conds, suffix, pageSize, currentPage);
        }
        PaginationArrayList<UacUlstics> pal = new PaginationArrayList<UacUlstics>(rs.TOTAL_RECORD_COUNT, rs.COMMON_PAGE_SIZE, rs.CURRENT_PAGE);
        while (rs.next()) {
            UacUlstics info = new UacUlstics();
            setProperties(info, rs);
            pal.add(info);
        }
        return pal;
    }

    public List<UacUlstics> query(Conditions conds, String suffix) {
        RecordSet rs;
        if (con == null) {
            rs = SQL.query("UAC_ULSTICS", "*", conds, suffix);
        } else {
            rs = SQL.query(con, "UAC_ULSTICS", "*", conds, suffix);
        }
        ArrayList<UacUlstics> al = new ArrayList<UacUlstics>();
        while (rs.next()) {
            UacUlstics info = new UacUlstics();
            setProperties(info, rs);
            al.add(info);
        }
        return al;
    }
    
    public static void setProperties(UacUlstics info, RecordSet rs){
        info.setStUnionLogisticsId(rs.getOriginalString("ST_UNION_LOGISTICS_ID"));
        info.setStReceiver(rs.getOriginalString("ST_RECEIVER"));
        info.setStReceiverPhone(rs.getOriginalString("ST_RECEIVER_PHONE"));
        info.setStReceiverZipcode(rs.getOriginalString("ST_RECEIVER_ZIPCODE"));
        info.setStReceiverProvince(rs.getOriginalString("ST_RECEIVER_PROVINCE"));
        info.setStReceiverCity(rs.getOriginalString("ST_RECEIVER_CITY"));
        info.setStReceiverArea(rs.getOriginalString("ST_RECEIVER_AREA"));
        info.setStReceiverAddress(rs.getOriginalString("ST_RECEIVER_ADDRESS"));
        info.setStSender(rs.getOriginalString("ST_SENDER"));
        info.setStSenderPhone(rs.getOriginalString("ST_SENDER_PHONE"));
        info.setStSenderZipcode(rs.getOriginalString("ST_SENDER_ZIPCODE"));
        info.setStSenderProvince(rs.getOriginalString("ST_SENDER_PROVINCE"));
        info.setStSenderCity(rs.getOriginalString("ST_SENDER_CITY"));
        info.setStSenderArea(rs.getOriginalString("ST_SENDER_AREA"));
        info.setStSenderAddress(rs.getOriginalString("ST_SENDER_ADDRESS"));
        info.setStShipCompany(rs.getOriginalString("ST_SHIP_COMPANY"));
        info.setNmType(rs.getBigDecimal("NM_TYPE"));
        info.setNmLogisticsType(rs.getBigDecimal("NM_LOGISTICS_TYPE"));
        info.setStLogisticsNo(rs.getOriginalString("ST_LOGISTICS_NO"));
        info.setStOrderId(rs.getOriginalString("ST_ORDER_ID"));
        info.setStAreaId(rs.getOriginalString("ST_AREA_ID"));
        info.setStDepartCode(rs.getOriginalString("ST_DEPART_CODE"));
        info.setStDepartName(rs.getOriginalString("ST_DEPART_NAME"));
        info.setStUserId(rs.getOriginalString("ST_USER_ID"));
        info.setDtPorder(rs.getTimestamp("DT_PORDER"));
        info.setDtCreate(rs.getTimestamp("DT_CREATE"));
        info.setDtUpdate(rs.getTimestamp("DT_UPDATE"));
        info.setStExt1(rs.getOriginalString("ST_EXT1"));
        info.setStExt2(rs.getOriginalString("ST_EXT2"));
    }

	public UacUlstics get(String stUnionLogisticsId) {
        Conditions conds = Conditions.newAndConditions();
        conds.add(new Condition("ST_UNION_LOGISTICS_ID", Condition.OT_EQUAL, stUnionLogisticsId));
        List<UacUlstics> list = query(conds, null);
        return list.size() > 0 ? list.get(0) : null;
    }

}
