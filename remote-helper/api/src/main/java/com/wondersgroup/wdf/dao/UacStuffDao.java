package com.wondersgroup.wdf.dao;

import java.math.*;
import java.sql.*;
import java.util.*;
import wfc.facility.tool.autocode.*;
import wfc.service.database.*;
import org.springframework.stereotype.Repository;

/**
 * 材料信息
 * @author generated by wfc.facility.tool.autocode.InternalDaoGenerator
 */
@Repository
public class UacStuffDao {

    private Connection con = null;

    public UacStuffDao() {
    }

    public UacStuffDao(Connection con) {
        this.con = con;
    }

    public void add(UacStuff info) {
        String sql = "insert into UAC_STUFF(ST_STUFF_ID, ST_STUFF_CODE, ST_STUFF_NAME, ST_AREA_ID, ST_ALIAS, ST_SOURCE, ST_FORMAL_ID, NM_TYPE, ST_SAMPLE_ID, ST_EMPTY_ID, ST_ATTACH_TMPID, DT_CREATE, DT_UPDATE, NM_REMOVED, ST_EXT1, ST_EXT2) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        Object[] obj = {
            info.getStStuffId(),
            info.getStStuffCode(),
            info.getStStuffName(),
            info.getStAreaId(),
            info.getStAlias(),
            info.getStSource(),
            info.getStFormalId(),
            info.getNmType(),
            info.getStSampleId(),
            info.getStEmptyId(),
            info.getStAttachTmpid(),
            info.getDtCreate(),
            info.getDtUpdate(),
            info.getNmRemoved(),
            info.getStExt1(),
            info.getStExt2()        	
        };
        if (con == null) {
            SQL.execute(sql, obj);
        } else {
            SQL.execute(con, sql, obj);
        }
    }

    public void update(UacStuff info) {
        String sql = "update UAC_STUFF set ST_STUFF_CODE = ?, ST_STUFF_NAME = ?, ST_AREA_ID = ?, ST_ALIAS = ?, ST_SOURCE = ?, ST_FORMAL_ID = ?, NM_TYPE = ?, ST_SAMPLE_ID = ?, ST_EMPTY_ID = ?, ST_ATTACH_TMPID = ?, DT_CREATE = ?, DT_UPDATE = ?, NM_REMOVED = ?, ST_EXT1 = ?, ST_EXT2 = ? where ST_STUFF_ID = ?";
        Object[] obj = {
            info.getStStuffCode(),
            info.getStStuffName(),
            info.getStAreaId(),
            info.getStAlias(),
            info.getStSource(),
            info.getStFormalId(),
            info.getNmType(),
            info.getStSampleId(),
            info.getStEmptyId(),
            info.getStAttachTmpid(),
            info.getDtCreate(),
            info.getDtUpdate(),
            info.getNmRemoved(),
            info.getStExt1(),
            info.getStExt2(),
            info.getStStuffId()        	
        };
        if (con == null) {
            SQL.execute(sql, obj);
        } else {
            SQL.execute(con, sql, obj);
        }
    }

    public int update(Map<String, Object> map, Conditions conds) {
        String sql = "update UAC_STUFF set ";
        List<Object> list = new ArrayList<Object>();
        int i = 0;
        for (String field : map.keySet()) {
            if (i++ > 0) {
                sql += ", ";
            }
            sql += field + " = ?";
            list.add(map.get(field));
        }
        String subsql = conds != null ? conds.toString() : "";
        if ("".equals(subsql)) {
            if (con == null) {
                return SQL.execute(sql).TOTAL_RECORD_COUNT;
            } else {
                return SQL.execute(con, sql).TOTAL_RECORD_COUNT;
            }
        } else {
            sql += " where " + subsql;
            list.addAll(conds.getObjectList());
            if (con == null) {
                return SQL.execute(sql, list.toArray()).TOTAL_RECORD_COUNT;
            } else {
                return SQL.execute(con, sql, list.toArray()).TOTAL_RECORD_COUNT;
            }
        }
    }
    
    public int delete(Conditions conds) {
        String sql = "delete from UAC_STUFF";
        String subsql = conds != null ? conds.toString() : "";
        if ("".equals(subsql)) {
            if (con == null) {
                return SQL.execute(sql).TOTAL_RECORD_COUNT;
            } else {
                return SQL.execute(con, sql).TOTAL_RECORD_COUNT;
            }
        } else {
            sql += " where " + subsql;
            if (con == null) {
                return SQL.execute(sql, conds.getObjectArray()).TOTAL_RECORD_COUNT;
            } else {
                return SQL.execute(con, sql, conds.getObjectArray()).TOTAL_RECORD_COUNT;
            }
        }
    }

	public void delete(String[] stStuffId) {
        Conditions conds = Conditions.newOrConditions();
        for (int i = 0; i < stStuffId.length; i++) {
            Conditions subconds = Conditions.newAndConditions();
            subconds.add(new Condition("ST_STUFF_ID", Condition.OT_EQUAL, stStuffId[i]));
            conds.add(subconds);
        }
        delete(conds);
    }

	public void delete(String stStuffId) {
        Conditions conds = Conditions.newAndConditions();
        conds.add(new Condition("ST_STUFF_ID", Condition.OT_EQUAL, stStuffId));
        delete(conds);
    }

    public PaginationArrayList<UacStuff> query(Conditions conds, String suffix, int pageSize, int currentPage) {
        RecordSet rs;
        if (con == null) {
            rs = SQL.query("UAC_STUFF", "*", conds, suffix, pageSize, currentPage);
        } else {
            rs = SQL.query(con, "UAC_STUFF", "*", conds, suffix, pageSize, currentPage);
        }
        PaginationArrayList<UacStuff> pal = new PaginationArrayList<UacStuff>(rs.TOTAL_RECORD_COUNT, rs.COMMON_PAGE_SIZE, rs.CURRENT_PAGE);
        while (rs.next()) {
            UacStuff info = new UacStuff();
            setProperties(info, rs);
            pal.add(info);
        }
        return pal;
    }

    public List<UacStuff> query(Conditions conds, String suffix) {
        RecordSet rs;
        if (con == null) {
            rs = SQL.query("UAC_STUFF", "*", conds, suffix);
        } else {
            rs = SQL.query(con, "UAC_STUFF", "*", conds, suffix);
        }
        ArrayList<UacStuff> al = new ArrayList<UacStuff>();
        while (rs.next()) {
            UacStuff info = new UacStuff();
            setProperties(info, rs);
            al.add(info);
        }
        return al;
    }
    
    public static void setProperties(UacStuff info, RecordSet rs){
        info.setStStuffId(rs.getOriginalString("ST_STUFF_ID"));
        info.setStStuffCode(rs.getOriginalString("ST_STUFF_CODE"));
        info.setStStuffName(rs.getOriginalString("ST_STUFF_NAME"));
        info.setStAreaId(rs.getOriginalString("ST_AREA_ID"));
        info.setStAlias(rs.getOriginalString("ST_ALIAS"));
        info.setStSource(rs.getOriginalString("ST_SOURCE"));
        info.setStFormalId(rs.getOriginalString("ST_FORMAL_ID"));
        info.setNmType(rs.getBigDecimal("NM_TYPE"));
        info.setStSampleId(rs.getOriginalString("ST_SAMPLE_ID"));
        info.setStEmptyId(rs.getOriginalString("ST_EMPTY_ID"));
        info.setStAttachTmpid(rs.getOriginalString("ST_ATTACH_TMPID"));
        info.setDtCreate(rs.getTimestamp("DT_CREATE"));
        info.setDtUpdate(rs.getTimestamp("DT_UPDATE"));
        info.setNmRemoved(rs.getBigDecimal("NM_REMOVED"));
        info.setStExt1(rs.getOriginalString("ST_EXT1"));
        info.setStExt2(rs.getOriginalString("ST_EXT2"));
    }

	public UacStuff get(String stStuffId) {
        Conditions conds = Conditions.newAndConditions();
        conds.add(new Condition("ST_STUFF_ID", Condition.OT_EQUAL, stStuffId));
        List<UacStuff> list = query(conds, null);
        return list.size() > 0 ? list.get(0) : null;
    }


    public int update(Conditions conds) {
        String sql = "update UAC_STUFF set NM_REMOVED = '1'";
        String subsql = conds != null ? conds.toString() : "";
        if ("".equals(subsql)) {
            if (con == null) {
                return SQL.execute(sql).TOTAL_RECORD_COUNT;
            } else {
                return SQL.execute(con, sql).TOTAL_RECORD_COUNT;
            }
        } else {
            sql += " where " + subsql;
            if (con == null) {
                return SQL.execute(sql, conds.getObjectArray()).TOTAL_RECORD_COUNT;
            } else {
                return SQL.execute(con, sql, conds.getObjectArray()).TOTAL_RECORD_COUNT;
            }
        }
    }

    public void logicDelete(String[] stStuffId) {
        Conditions conds = Conditions.newOrConditions();
        for (int i = 0; i < stStuffId.length; i++) {
            Conditions subconds = Conditions.newAndConditions();
            subconds.add(new Condition("ST_STUFF_ID", Condition.OT_EQUAL, stStuffId[i]));
            conds.add(subconds);
        }
        update(conds);
    }

}
