package com.wondersgroup.wdf.dao;

import org.springframework.stereotype.Repository;
import wfc.facility.tool.autocode.PaginationArrayList;
import wfc.service.database.Condition;
import wfc.service.database.Conditions;
import wfc.service.database.RecordSet;
import wfc.service.database.SQL;

import java.sql.Connection;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

/**
 * 事项材料
 * @author generated by wfc.facility.tool.autocode.InternalDaoGenerator
 */
@Repository
public class UacItemStuffTwoDao {

    private Connection con = null;

    public UacItemStuffTwoDao() {
    }

    public UacItemStuffTwoDao(Connection con) {
        this.con = con;
    }

    public void add(UacItemStuffTwo info) {
        String sql = "insert into UAC_ITEM_STUFF(ST_ITEM_STUFF_ID, ST_STUFF_ID, ST_CITEM_ID, ST_ITEM_ID, ST_ORGAN_ID, ST_DEPART_CODE, ST_DEPART_NAME, NM_MUST, NM_ORIGINAL, NM_COPY, NM_ORDER2, NM_OVER, NM_SAMPLE, NM_UPLOAD, ST_SHOW, ST_NTYPE, ST_LAB_NAME, ST_SOURCE, ST_REMARK, NM_ORDER, NM_REMOVED) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        Object[] obj = {
                info.getStItemStuffId(),
                info.getStStuffId(),
                info.getStCitemId(),
                info.getStItemId(),
                info.getStOrganId(),
                info.getStDepartCode(),
                info.getStDepartName(),
                info.getNmMust(),
                info.getNmOriginal(),
                info.getNmCopy(),
                info.getNmOrder2(),
                info.getNmOver(),
                info.getNmSample(),
                info.getNmUpload(),
                info.getStShow(),
                info.getStNtype(),
                info.getStLabName(),
                info.getStSource(),
                info.getStRemark(),
                info.getNmOrder(),
                info.getNmRemoved()
        };
        if (con == null) {
            SQL.execute(sql, obj);
        } else {
            SQL.execute(con, sql, obj);
        }
    }

    public void update(UacItemStuffTwo info) {
        String sql = "update UAC_ITEM_STUFF set ST_STUFF_ID = ?, ST_CITEM_ID = ?, ST_ITEM_ID = ?, ST_ORGAN_ID = ?, ST_DEPART_CODE = ?, ST_DEPART_NAME = ?, NM_MUST = ?, NM_ORIGINAL = ?, NM_COPY = ?, NM_ORDER2 = ?, NM_OVER = ?, NM_SAMPLE = ?, NM_UPLOAD = ?, ST_SHOW = ?, ST_NTYPE = ?, ST_LAB_NAME = ?, ST_SOURCE = ?, ST_REMARK = ?, NM_ORDER = ?, NM_REMOVED = ? where ST_ITEM_STUFF_ID = ?";
        Object[] obj = {
                info.getStStuffId(),
                info.getStCitemId(),
                info.getStItemId(),
                info.getStOrganId(),
                info.getStDepartCode(),
                info.getStDepartName(),
                info.getNmMust(),
                info.getNmOriginal(),
                info.getNmCopy(),
                info.getNmOrder2(),
                info.getNmOver(),
                info.getNmSample(),
                info.getNmUpload(),
                info.getStShow(),
                info.getStNtype(),
                info.getStLabName(),
                info.getStSource(),
                info.getStRemark(),
                info.getNmOrder(),
                info.getNmRemoved(),
                info.getStItemStuffId()
        };
        if (con == null) {
            SQL.execute(sql, obj);
        } else {
            SQL.execute(con, sql, obj);
        }
    }

    public int update(Map<String, Object> map, Conditions conds) {
        String sql = "update UAC_ITEM_STUFF set ";
        List<Object> list = new ArrayList<Object>();
        int i = 0;
        for (String field : map.keySet()) {
            if (i++ > 0) {
                sql += ", ";
            }
            sql += field + " = ?";
            list.add(map.get(field));
        }
        String subsql = conds != null ? conds.toString() : "";
        if ("".equals(subsql)) {
            if (con == null) {
                return SQL.execute(sql).TOTAL_RECORD_COUNT;
            } else {
                return SQL.execute(con, sql).TOTAL_RECORD_COUNT;
            }
        } else {
            sql += " where " + subsql;
            list.addAll(conds.getObjectList());
            if (con == null) {
                return SQL.execute(sql, list.toArray()).TOTAL_RECORD_COUNT;
            } else {
                return SQL.execute(con, sql, list.toArray()).TOTAL_RECORD_COUNT;
            }
        }
    }

    public int delete(Conditions conds) {
        String sql = "delete from UAC_ITEM_STUFF";
        String subsql = conds != null ? conds.toString() : "";
        if ("".equals(subsql)) {
            if (con == null) {
                return SQL.execute(sql).TOTAL_RECORD_COUNT;
            } else {
                return SQL.execute(con, sql).TOTAL_RECORD_COUNT;
            }
        } else {
            sql += " where " + subsql;
            if (con == null) {
                return SQL.execute(sql, conds.getObjectArray()).TOTAL_RECORD_COUNT;
            } else {
                return SQL.execute(con, sql, conds.getObjectArray()).TOTAL_RECORD_COUNT;
            }
        }
    }

    public void delete(String[] stItemStuffId) {
        Conditions conds = Conditions.newOrConditions();
        for (int i = 0; i < stItemStuffId.length; i++) {
            Conditions subconds = Conditions.newAndConditions();
            subconds.add(new Condition("ST_ITEM_STUFF_ID", Condition.OT_EQUAL, stItemStuffId[i]));
            conds.add(subconds);
        }
        delete(conds);
    }

    public void delete(String stItemStuffId) {
        Conditions conds = Conditions.newAndConditions();
        conds.add(new Condition("ST_ITEM_STUFF_ID", Condition.OT_EQUAL, stItemStuffId));
        delete(conds);
    }

    public PaginationArrayList<UacItemStuffTwo> query(Conditions conds, String suffix, int pageSize, int currentPage) {
        RecordSet rs;
        if (con == null) {
            rs = SQL.query("UAC_ITEM_STUFF", "*", conds, suffix, pageSize, currentPage);
        } else {
            rs = SQL.query(con, "UAC_ITEM_STUFF", "*", conds, suffix, pageSize, currentPage);
        }
        PaginationArrayList<UacItemStuffTwo> pal = new PaginationArrayList<UacItemStuffTwo>(rs.TOTAL_RECORD_COUNT, rs.COMMON_PAGE_SIZE, rs.CURRENT_PAGE);
        while (rs.next()) {
            UacItemStuffTwo info = new UacItemStuffTwo();
            setProperties(info, rs);
            pal.add(info);
        }
        return pal;
    }

    public List<UacItemStuffTwo> query(Conditions conds, String suffix) {
        RecordSet rs;
        if (con == null) {
            rs = SQL.query("UAC_ITEM_STUFF", "*", conds, suffix);
        } else {
            rs = SQL.query(con, "UAC_ITEM_STUFF", "*", conds, suffix);
        }
        ArrayList<UacItemStuffTwo> al = new ArrayList<UacItemStuffTwo>();
        while (rs.next()) {
            UacItemStuffTwo info = new UacItemStuffTwo();
            setProperties(info, rs);
            al.add(info);
        }
        return al;
    }

    public static void setProperties(UacItemStuffTwo info, RecordSet rs){
        info.setStItemStuffId(rs.getOriginalString("ST_ITEM_STUFF_ID"));
        info.setStStuffId(rs.getOriginalString("ST_STUFF_ID"));
        info.setStCitemId(rs.getOriginalString("ST_CITEM_ID"));
        info.setStItemId(rs.getOriginalString("ST_ITEM_ID"));
        info.setStOrganId(rs.getOriginalString("ST_ORGAN_ID"));
        info.setStDepartCode(rs.getOriginalString("ST_DEPART_CODE"));
        info.setStDepartName(rs.getOriginalString("ST_DEPART_NAME"));
        info.setNmMust(rs.getBigDecimal("NM_MUST"));
        info.setNmOriginal(rs.getBigDecimal("NM_ORIGINAL"));
        info.setNmCopy(rs.getBigDecimal("NM_COPY"));
        info.setNmOrder2(rs.getBigDecimal("NM_ORDER2"));
        info.setNmOver(rs.getBigDecimal("NM_OVER"));
        info.setNmSample(rs.getBigDecimal("NM_SAMPLE"));
        info.setNmUpload(rs.getBigDecimal("NM_UPLOAD"));
        info.setStShow(rs.getOriginalString("ST_SHOW"));
        info.setStNtype(rs.getOriginalString("ST_NTYPE"));
        info.setStLabName(rs.getOriginalString("ST_LAB_NAME"));
        info.setStSource(rs.getOriginalString("ST_SOURCE"));
        info.setStRemark(rs.getOriginalString("ST_REMARK"));
        info.setNmOrder(rs.getBigDecimal("NM_ORDER"));
        info.setNmRemoved(rs.getBigDecimal("NM_REMOVED"));
    }

    public UacItemStuffTwo get(String stItemStuffId) {
        Conditions conds = Conditions.newAndConditions();
        conds.add(new Condition("ST_ITEM_STUFF_ID", Condition.OT_EQUAL, stItemStuffId));
        List<UacItemStuffTwo> list = query(conds, null);
        return list.size() > 0 ? list.get(0) : null;
    }

    public UacItemStuffTwo getStuffId(String stItemStuffId) {
        Conditions conds = Conditions.newAndConditions();
        conds.add(new Condition("ST_STUFF_ID", Condition.OT_EQUAL, stItemStuffId));
        List<UacItemStuffTwo> list = query(conds, null);
        return list.size() > 0 ? list.get(0) : null;
    }
    public int update(Conditions conds) {
        String sql = "update UAC_ITEM_STUFF set NM_REMOVED = '1'";
        String subsql = conds != null ? conds.toString() : "";
        if ("".equals(subsql)) {
            if (con == null) {
                return SQL.execute(sql).TOTAL_RECORD_COUNT;
            } else {
                return SQL.execute(con, sql).TOTAL_RECORD_COUNT;
            }
        } else {
            sql += " where " + subsql;
            if (con == null) {
                return SQL.execute(sql, conds.getObjectArray()).TOTAL_RECORD_COUNT;
            } else {
                return SQL.execute(con, sql, conds.getObjectArray()).TOTAL_RECORD_COUNT;
            }
        }
    }

    public void logicDelete(String[] stItemStuffId) {
        Conditions conds = Conditions.newOrConditions();
        for (int i = 0; i < stItemStuffId.length; i++) {
            Conditions subconds = Conditions.newAndConditions();
            subconds.add(new Condition("ST_ITEM_STUFF_ID", Condition.OT_EQUAL, stItemStuffId[i]));
            conds.add(subconds);
        }
        update(conds);
    }

}
