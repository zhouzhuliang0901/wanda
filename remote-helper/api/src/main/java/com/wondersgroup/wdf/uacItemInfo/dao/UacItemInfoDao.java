package com.wondersgroup.wdf.uacItemInfo.dao;

import org.springframework.stereotype.Repository;
import wfc.facility.tool.autocode.PaginationArrayList;
import wfc.service.database.Condition;
import wfc.service.database.Conditions;
import wfc.service.database.RecordSet;
import wfc.service.database.SQL;

import java.sql.Connection;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

/**
 * 事项信息
 * @author generated by wfc.facility.tool.autocode.InternalDaoGenerator
 */
@Repository
public class UacItemInfoDao {

    private Connection con = null;

    public UacItemInfoDao() {
    }

    public UacItemInfoDao(Connection con) {
        this.con = con;
    }

    public List<UacItemInfo> queryItems(Conditions conds, String suffix) {
        RecordSet rs;
        suffix = "order by NM_ORDER desc";
        if (con == null) {
            rs = SQL.query("UAC_ITEM_INFO", "top(10) *", conds, suffix);
        } else {
            rs = SQL.query(con, "UAC_ITEM_INFO", "top(10) *", conds, suffix);
        }
        ArrayList<UacItemInfo> al = new ArrayList<UacItemInfo>();
        while (rs.next()) {
            UacItemInfo info = new UacItemInfo();
            setProperties(info, rs);
            al.add(info);
        }
        return al;
    }

    public List<UacItemInfo> queryBig(Conditions conds, String suffix,String fieldName) {
        RecordSet rs;
        if (con == null) {
            rs = SQL.query("\tUAC_ITEM_INFO uii\n" +
                    "\tLEFT JOIN UAC_ITEM_GROUP_LINK uigl ON uii.ST_ITEM_ID = uigl.ST_ITEM_ID\n" +
                    "\tLEFT JOIN UAC_USER_GROUP_LINK uugl ON uugl.ST_GROUP_ID = uigl.ST_GROUP_ID\n", fieldName, conds, suffix);
        } else {
            rs = SQL.query(con, "\tUAC_ITEM_INFO uii\n" +
                    "\tLEFT JOIN UAC_ITEM_GROUP_LINK uigl ON uii.ST_ITEM_ID = uigl.ST_ITEM_ID\n" +
                    "\tLEFT JOIN UAC_USER_GROUP_LINK uugl ON uugl.ST_GROUP_ID = uigl.ST_GROUP_ID\n", fieldName, conds, suffix);
        }
        ArrayList<UacItemInfo> al = new ArrayList<UacItemInfo>();
        while (rs.next()) {
            UacItemInfo info = new UacItemInfo();
            setProperties(info, rs);
            al.add(info);
        }
        return al;
    }

    public List<UacItemInfo> querySmall(Conditions conds, String s) {
        RecordSet rs;
        if (con == null) {
            rs = SQL.query("UAC_ITEM_INFO", "*", conds, s);
        } else {
            rs = SQL.query(con, "UAC_ITEM_INFO", "*", conds, s);
        }
        ArrayList<UacItemInfo> al = new ArrayList<UacItemInfo>();
        while (rs.next()) {
            UacItemInfo info = new UacItemInfo();
            setProperties(info, rs);
            al.add(info);
        }
        return al;
    }

    public void add(UacItemInfo info) {
        String sql = "insert into UAC_ITEM_INFO(ST_ITEM_ID, ST_ITEM_CODE, ST_ITEM_NAME, ST_INNER_NO, ST_INHERIT_ID, ST_AREA_ID, ST_AREA_CODE, ST_ORGAN_ID, ST_DEPART_CODE, ST_DEPART_NAME, NM_ORDER, ST_PARENT_ID, NM_SMS, NM_ALL_ONLINE, NM_INHERIT_TYPE, ST_TYPE, ST_ECERT_CODE, ST_ECERT_NAME, NM_REMOVED, ST_EXT1, ST_EXT2, ST_IMT) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        Object[] obj = {
            info.getStItemId(),
            info.getStItemCode(),
            info.getStItemName(),
            info.getStInnerNo(),
            info.getStInheritId(),
            info.getStAreaId(),
            info.getStAreaCode(),
            info.getStOrganId(),
            info.getStDepartCode(),
            info.getStDepartName(),
            info.getNmOrder(),
            info.getStParentId(),
            info.getNmSms(),
            info.getNmAllOnline(),
            info.getNmInheritType(),
            info.getStType(),
            info.getStEcertCode(),
            info.getStEcertName(),
            info.getNmRemoved(),
            info.getStExt1(),
            info.getStExt2(),
            info.getNmImt()
        };
        if (con == null) {
            SQL.execute(sql, obj);
        } else {
            SQL.execute(con, sql, obj);
        }
    }

    public void update(UacItemInfo info) {
        String sql = "update UAC_ITEM_INFO set ST_ITEM_CODE = ?, ST_ITEM_NAME = ?, ST_INNER_NO = ?, ST_INHERIT_ID = ?, ST_AREA_ID = ?, ST_AREA_CODE = ?, ST_ORGAN_ID = ?, ST_DEPART_CODE = ?, ST_DEPART_NAME = ?, NM_ORDER = ?, ST_PARENT_ID = ?, NM_SMS = ?, NM_ALL_ONLINE = ?, NM_INHERIT_TYPE = ?, ST_TYPE = ?, ST_ECERT_CODE = ?, ST_ECERT_NAME = ?, NM_REMOVED = ?, ST_EXT1 = ?, ST_EXT2 = ?, NM_IMT = ? where ST_ITEM_ID = ?";
        Object[] obj = {
            info.getStItemCode(),
            info.getStItemName(),
            info.getStInnerNo(),
            info.getStInheritId(),
            info.getStAreaId(),
            info.getStAreaCode(),
            info.getStOrganId(),
            info.getStDepartCode(),
            info.getStDepartName(),
            info.getNmOrder(),
            info.getStParentId(),
            info.getNmSms(),
            info.getNmAllOnline(),
            info.getNmInheritType(),
            info.getStType(),
            info.getStEcertCode(),
            info.getStEcertName(),
            info.getNmRemoved(),
            info.getStExt1(),
            info.getStExt2(),
            info.getNmImt(),
            info.getStItemId()        	
        };
        if (con == null) {
            SQL.execute(sql, obj);
        } else {
            SQL.execute(con, sql, obj);
        }
    }

    public int update(Map<String, Object> map, Conditions conds) {
        String sql = "update UAC_ITEM_INFO set ";
        List<Object> list = new ArrayList<Object>();
        int i = 0;
        for (String field : map.keySet()) {
            if (i++ > 0) {
                sql += ", ";
            }
            sql += field + " = ?";
            list.add(map.get(field));
        }
        String subsql = conds != null ? conds.toString() : "";
        if ("".equals(subsql)) {
            if (con == null) {
                return SQL.execute(sql).TOTAL_RECORD_COUNT;
            } else {
                return SQL.execute(con, sql).TOTAL_RECORD_COUNT;
            }
        } else {
            sql += " where " + subsql;
            list.addAll(conds.getObjectList());
            if (con == null) {
                return SQL.execute(sql, list.toArray()).TOTAL_RECORD_COUNT;
            } else {
                return SQL.execute(con, sql, list.toArray()).TOTAL_RECORD_COUNT;
            }
        }
    }
    
    public int delete(Conditions conds) {
        String sql = "delete from UAC_ITEM_INFO";
        String subsql = conds != null ? conds.toString() : "";
        if ("".equals(subsql)) {
            if (con == null) {
                return SQL.execute(sql).TOTAL_RECORD_COUNT;
            } else {
                return SQL.execute(con, sql).TOTAL_RECORD_COUNT;
            }
        } else {
            sql += " where " + subsql;
            if (con == null) {
                return SQL.execute(sql, conds.getObjectArray()).TOTAL_RECORD_COUNT;
            } else {
                return SQL.execute(con, sql, conds.getObjectArray()).TOTAL_RECORD_COUNT;
            }
        }
    }

	public void delete(String[] stItemId) {
        Conditions conds = Conditions.newOrConditions();
        for (int i = 0; i < stItemId.length; i++) {
            Conditions subconds = Conditions.newAndConditions();
            subconds.add(new Condition("ST_ITEM_ID", Condition.OT_EQUAL, stItemId[i]));
            conds.add(subconds);
        }
        delete(conds);
    }

	public void delete(String stItemId) {
        Conditions conds = Conditions.newAndConditions();
        conds.add(new Condition("ST_ITEM_ID", Condition.OT_EQUAL, stItemId));
        delete(conds);
    }

    public PaginationArrayList<UacItemInfo> query(Conditions conds, String suffix, int pageSize, int currentPage) {
        RecordSet rs;
        if (con == null) {
            rs = SQL.query("UAC_ITEM_INFO", "*", conds, suffix, pageSize, currentPage);
        } else {
            rs = SQL.query(con, "UAC_ITEM_INFO", "*", conds, suffix, pageSize, currentPage);
        }
        PaginationArrayList<UacItemInfo> pal = new PaginationArrayList<UacItemInfo>(rs.TOTAL_RECORD_COUNT, rs.COMMON_PAGE_SIZE, rs.CURRENT_PAGE);
        while (rs.next()) {
            UacItemInfo info = new UacItemInfo();
            setProperties(info, rs);
            pal.add(info);
        }
        return pal;
    }

    public List<UacItemInfo> query(Conditions conds, String suffix) {
        RecordSet rs;
        if (con == null) {
            rs = SQL.query("UAC_ITEM_INFO", "*", conds, suffix);
        } else {
            rs = SQL.query(con, "UAC_ITEM_INFO", "*", conds, suffix);
        }
        ArrayList<UacItemInfo> al = new ArrayList<UacItemInfo>();
        while (rs.next()) {
            UacItemInfo info = new UacItemInfo();
            setProperties(info, rs);
            al.add(info);
        }
        return al;
    }
    
    public static void setProperties(UacItemInfo info, RecordSet rs){
        info.setStItemId(rs.getOriginalString("ST_ITEM_ID"));
        info.setStItemCode(rs.getOriginalString("ST_ITEM_CODE"));
        info.setStItemName(rs.getOriginalString("ST_ITEM_NAME"));
        info.setStInnerNo(rs.getOriginalString("ST_INNER_NO"));
        info.setStInheritId(rs.getOriginalString("ST_INHERIT_ID"));
        info.setStAreaId(rs.getOriginalString("ST_AREA_ID"));
        info.setStAreaCode(rs.getOriginalString("ST_AREA_CODE"));
        info.setStOrganId(rs.getOriginalString("ST_ORGAN_ID"));
        info.setStDepartCode(rs.getOriginalString("ST_DEPART_CODE"));
        info.setStDepartName(rs.getOriginalString("ST_DEPART_NAME"));
        info.setNmOrder(rs.getBigDecimal("NM_ORDER"));
        info.setStParentId(rs.getOriginalString("ST_PARENT_ID"));
        info.setNmSms(rs.getBigDecimal("NM_SMS"));
        info.setNmAllOnline(rs.getBigDecimal("NM_ALL_ONLINE"));
        info.setNmInheritType(rs.getBigDecimal("NM_INHERIT_TYPE"));
        info.setStType(rs.getOriginalString("ST_TYPE"));
        info.setStEcertCode(rs.getOriginalString("ST_ECERT_CODE"));
        info.setStEcertName(rs.getOriginalString("ST_ECERT_NAME"));
        info.setNmRemoved(rs.getBigDecimal("NM_REMOVED"));
        info.setStExt1(rs.getOriginalString("ST_EXT1"));
        info.setStExt2(rs.getOriginalString("ST_EXT2"));
        info.setStTransactName(rs.getOriginalString("ST_TRANSACT_NAME"));
        info.setStFurl(rs.getOriginalString("ST_FURL"));
        info.setNmImt(rs.getBigDecimal("NM_IMT"));

    }

	public UacItemInfo get(String stItemId) {
        Conditions conds = Conditions.newAndConditions();
        conds.add(new Condition("ST_ITEM_ID", Condition.OT_EQUAL, stItemId));
        List<UacItemInfo> list = query(conds, null);
        return list.size() > 0 ? list.get(0) : null;
    }


}
