package com.wondersgroup.wdf.dao;

import org.springframework.stereotype.Repository;
import wfc.facility.tool.autocode.PaginationArrayList;
import wfc.service.database.Condition;
import wfc.service.database.Conditions;
import wfc.service.database.RecordSet;
import wfc.service.database.SQL;

import java.sql.Connection;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

/**
 * 企业信息表
 * @author generated by wfc.facility.tool.autocode.InternalDaoGenerator
 */
@Repository
public class UacBusinessDao {

    private Connection con = null;

    public UacBusinessDao() {
    }

    public UacBusinessDao(Connection con) {
        this.con = con;
    }

    public void add(UacBusiness info) {
        String sql = "insert into UAC_BUSINESS(ST_BUSINESS_ID, ST_BUSINESS_NAME, ST_CORPORATION_ORGID, ST_LEGAL_NAME, ST_BUSINESS_ADDRESS, ST_APPLY_USER_NAME, ST_APPLY_USER_PHONE, ST_APPLY_USER_IDCARD, ST_LEGAL_PHONE, ST_LEGAL_IDCARD) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        Object[] obj = {
            info.getStBusinessId(),
            info.getStBusinessName(),
            info.getStCorporationOrgid(),
            info.getStLegalName(),
            info.getStBusinessAddress(),
            info.getStApplyUserName(),
            info.getStApplyUserPhone(),
            info.getStApplyUserIdcard(),
            info.getStLegalPhone(),
            info.getStLegalIdcard()        	
        };
        if (con == null) {
            SQL.execute(sql, obj);
        } else {
            SQL.execute(con, sql, obj);
        }
    }

    public void update(UacBusiness info) {
        String sql = "update UAC_BUSINESS set ST_BUSINESS_NAME = ?, ST_CORPORATION_ORGID = ?, ST_LEGAL_NAME = ?, ST_BUSINESS_ADDRESS = ?, ST_APPLY_USER_NAME = ?, ST_APPLY_USER_PHONE = ?, ST_APPLY_USER_IDCARD = ?, ST_LEGAL_PHONE = ?, ST_LEGAL_IDCARD = ? where ST_BUSINESS_ID = ?";
        Object[] obj = {
            info.getStBusinessName(),
            info.getStCorporationOrgid(),
            info.getStLegalName(),
            info.getStBusinessAddress(),
            info.getStApplyUserName(),
            info.getStApplyUserPhone(),
            info.getStApplyUserIdcard(),
            info.getStLegalPhone(),
            info.getStLegalIdcard(),
            info.getStBusinessId()        	
        };
        if (con == null) {
            SQL.execute(sql, obj);
        } else {
            SQL.execute(con, sql, obj);
        }
    }

    public int update(Map<String, Object> map, Conditions conds) {
        String sql = "update UAC_BUSINESS set ";
        List<Object> list = new ArrayList<Object>();
        int i = 0;
        for (String field : map.keySet()) {
            if (i++ > 0) {
                sql += ", ";
            }
            sql += field + " = ?";
            list.add(map.get(field));
        }
        String subsql = conds != null ? conds.toString() : "";
        if ("".equals(subsql)) {
            if (con == null) {
                return SQL.execute(sql).TOTAL_RECORD_COUNT;
            } else {
                return SQL.execute(con, sql).TOTAL_RECORD_COUNT;
            }
        } else {
            sql += " where " + subsql;
            list.addAll(conds.getObjectList());
            if (con == null) {
                return SQL.execute(sql, list.toArray()).TOTAL_RECORD_COUNT;
            } else {
                return SQL.execute(con, sql, list.toArray()).TOTAL_RECORD_COUNT;
            }
        }
    }
    
    public int delete(Conditions conds) {
        String sql = "delete from UAC_BUSINESS";
        String subsql = conds != null ? conds.toString() : "";
        if ("".equals(subsql)) {
            if (con == null) {
                return SQL.execute(sql).TOTAL_RECORD_COUNT;
            } else {
                return SQL.execute(con, sql).TOTAL_RECORD_COUNT;
            }
        } else {
            sql += " where " + subsql;
            if (con == null) {
                return SQL.execute(sql, conds.getObjectArray()).TOTAL_RECORD_COUNT;
            } else {
                return SQL.execute(con, sql, conds.getObjectArray()).TOTAL_RECORD_COUNT;
            }
        }
    }

	public void delete(String[] stBusinessId) {
        Conditions conds = Conditions.newOrConditions();
        for (int i = 0; i < stBusinessId.length; i++) {
            Conditions subconds = Conditions.newAndConditions();
            subconds.add(new Condition("ST_BUSINESS_ID", Condition.OT_EQUAL, stBusinessId[i]));
            conds.add(subconds);
        }
        delete(conds);
    }

	public void delete(String stBusinessId) {
        Conditions conds = Conditions.newAndConditions();
        conds.add(new Condition("ST_BUSINESS_ID", Condition.OT_EQUAL, stBusinessId));
        delete(conds);
    }

    public PaginationArrayList<UacBusiness> query(Conditions conds, String suffix, int pageSize, int currentPage) {
        RecordSet rs;
        if (con == null) {
            rs = SQL.query("UAC_BUSINESS", "*", conds, suffix, pageSize, currentPage);
        } else {
            rs = SQL.query(con, "UAC_BUSINESS", "*", conds, suffix, pageSize, currentPage);
        }
        PaginationArrayList<UacBusiness> pal = new PaginationArrayList<UacBusiness>(rs.TOTAL_RECORD_COUNT, rs.COMMON_PAGE_SIZE, rs.CURRENT_PAGE);
        while (rs.next()) {
            UacBusiness info = new UacBusiness();
            setProperties(info, rs);
            pal.add(info);
        }
        return pal;
    }

    public List<UacBusiness> query(Conditions conds, String suffix) {
        RecordSet rs;
        if (con == null) {
            rs = SQL.query("UAC_BUSINESS", "*", conds, suffix);
        } else {
            rs = SQL.query(con, "UAC_BUSINESS", "*", conds, suffix);
        }
        ArrayList<UacBusiness> al = new ArrayList<UacBusiness>();
        while (rs.next()) {
            UacBusiness info = new UacBusiness();
            setProperties(info, rs);
            al.add(info);
        }
        return al;
    }
    
    public static void setProperties(UacBusiness info, RecordSet rs){
        info.setStBusinessId(rs.getOriginalString("ST_BUSINESS_ID"));
        info.setStBusinessName(rs.getOriginalString("ST_BUSINESS_NAME"));
        info.setStCorporationOrgid(rs.getOriginalString("ST_CORPORATION_ORGID"));
        info.setStLegalName(rs.getOriginalString("ST_LEGAL_NAME"));
        info.setStBusinessAddress(rs.getOriginalString("ST_BUSINESS_ADDRESS"));
        info.setStApplyUserName(rs.getOriginalString("ST_APPLY_USER_NAME"));
        info.setStApplyUserPhone(rs.getOriginalString("ST_APPLY_USER_PHONE"));
        info.setStApplyUserIdcard(rs.getOriginalString("ST_APPLY_USER_IDCARD"));
        info.setStLegalPhone(rs.getOriginalString("ST_LEGAL_PHONE"));
        info.setStLegalIdcard(rs.getOriginalString("ST_LEGAL_IDCARD"));
    }

	public UacBusiness get(String stBusinessId) {
        Conditions conds = Conditions.newAndConditions();
        conds.add(new Condition("ST_BUSINESS_ID", Condition.OT_EQUAL, stBusinessId));
        List<UacBusiness> list = query(conds, null);
        return list.size() > 0 ? list.get(0) : null;
    }

}
