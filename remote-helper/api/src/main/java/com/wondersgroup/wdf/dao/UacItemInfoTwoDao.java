package com.wondersgroup.wdf.dao;

import java.sql.*;
import java.util.*;

import org.apache.commons.lang.StringUtils;
import wfc.facility.tool.autocode.*;
import wfc.service.database.*;
import org.springframework.stereotype.Repository;

/**
 * 事项信息
 * @author generated by wfc.facility.tool.autocode.InternalDaoGenerator
 */
@Repository
public class UacItemInfoTwoDao {

    private Connection con = null;

    public UacItemInfoTwoDao() {
    }

    public UacItemInfoTwoDao(Connection con) {
        this.con = con;
    }

    public void add(UacItemInfoTwo info) {
        String sql = "insert into UAC_ITEM_INFO(ST_ITEM_ID, ST_ITEM_CODE, ST_ITEM_NAME, ST_SUB_ITEM_CODE, ST_SUB_ITEM_NAME, ST_INNER_NO, ST_TRANSACT_NAME, ST_INHERIT_ID, ST_AREA_ID, ST_AREA_CODE, ST_ORGAN_ID, ST_DEPART_CODE, ST_DEPART_NAME, NM_ORDER, ST_PARENT_ID, NM_SMS, NM_ALL_ONLINE, NM_IMT, NM_FTYPE, ST_FURL, NM_INHERIT_TYPE, ST_TYPE, ST_ECERT_CODE, ST_ECERT_NAME, NM_REMOVED, ST_EXT1, ST_EXT2) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        Object[] obj = {
                info.getStItemId(),
                info.getStItemCode(),
                info.getStItemName(),
                info.getStSubItemCode(),
                info.getStSubItemName(),
                info.getStInnerNo(),
                info.getStTransactName(),
                info.getStInheritId(),
                info.getStAreaId(),
                info.getStAreaCode(),
                info.getStOrganId(),
                info.getStDepartCode(),
                info.getStDepartName(),
                info.getNmOrder(),
                info.getStParentId(),
                info.getNmSms(),
                info.getNmAllOnline(),
                info.getNmImt(),
                info.getNmFtype(),
                info.getStFurl(),
                info.getNmInheritType(),
                info.getStType(),
                info.getStEcertCode(),
                info.getStEcertName(),
                info.getNmRemoved(),
                info.getStExt1(),
                info.getStExt2()
        };
        if (con == null) {
            SQL.execute(sql, obj);
        } else {
            SQL.execute(con, sql, obj);
        }
    }

    public void update(UacItemInfoTwo info) {
        String sql = "update UAC_ITEM_INFO set ST_ITEM_CODE = ?, ST_ITEM_NAME = ?, ST_SUB_ITEM_CODE = ?, ST_SUB_ITEM_NAME = ?, ST_INNER_NO = ?, ST_TRANSACT_NAME = ?, ST_INHERIT_ID = ?, ST_AREA_ID = ?, ST_AREA_CODE = ?, ST_ORGAN_ID = ?, ST_DEPART_CODE = ?, ST_DEPART_NAME = ?, NM_ORDER = ?, ST_PARENT_ID = ?, NM_SMS = ?, NM_ALL_ONLINE = ?, NM_IMT = ?, NM_FTYPE = ?, ST_FURL = ?, NM_INHERIT_TYPE = ?, ST_TYPE = ?, ST_ECERT_CODE = ?, ST_ECERT_NAME = ?, NM_REMOVED = ?, ST_EXT1 = ?, ST_EXT2 = ? where ST_ITEM_ID = ?";
        Object[] obj = {
                info.getStItemCode(),
                info.getStItemName(),
                info.getStSubItemCode(),
                info.getStSubItemName(),
                info.getStInnerNo(),
                info.getStTransactName(),
                info.getStInheritId(),
                info.getStAreaId(),
                info.getStAreaCode(),
                info.getStOrganId(),
                info.getStDepartCode(),
                info.getStDepartName(),
                info.getNmOrder(),
                info.getStParentId(),
                info.getNmSms(),
                info.getNmAllOnline(),
                info.getNmImt(),
                info.getNmFtype(),
                info.getStFurl(),
                info.getNmInheritType(),
                info.getStType(),
                info.getStEcertCode(),
                info.getStEcertName(),
                info.getNmRemoved(),
                info.getStExt1(),
                info.getStExt2(),
                info.getStItemId()
        };
        if (con == null) {
            SQL.execute(sql, obj);
        } else {
            SQL.execute(con, sql, obj);
        }
    }

    public int update(Map<String, Object> map, Conditions conds) {
        String sql = "update UAC_ITEM_INFO set ";
        List<Object> list = new ArrayList<Object>();
        int i = 0;
        for (String field : map.keySet()) {
            if (i++ > 0) {
                sql += ", ";
            }
            sql += field + " = ?";
            list.add(map.get(field));
        }
        String subsql = conds != null ? conds.toString() : "";
        if ("".equals(subsql)) {
            if (con == null) {
                return SQL.execute(sql).TOTAL_RECORD_COUNT;
            } else {
                return SQL.execute(con, sql).TOTAL_RECORD_COUNT;
            }
        } else {
            sql += " where " + subsql;
            list.addAll(conds.getObjectList());
            if (con == null) {
                return SQL.execute(sql, list.toArray()).TOTAL_RECORD_COUNT;
            } else {
                return SQL.execute(con, sql, list.toArray()).TOTAL_RECORD_COUNT;
            }
        }
    }

    public int delete(Conditions conds) {
        String sql = "delete from UAC_ITEM_INFO";
        String subsql = conds != null ? conds.toString() : "";
        if ("".equals(subsql)) {
            if (con == null) {
                return SQL.execute(sql).TOTAL_RECORD_COUNT;
            } else {
                return SQL.execute(con, sql).TOTAL_RECORD_COUNT;
            }
        } else {
            sql += " where " + subsql;
            if (con == null) {
                return SQL.execute(sql, conds.getObjectArray()).TOTAL_RECORD_COUNT;
            } else {
                return SQL.execute(con, sql, conds.getObjectArray()).TOTAL_RECORD_COUNT;
            }
        }
    }

    public void delete(String[] stItemId) {
        Conditions conds = Conditions.newOrConditions();
        for (int i = 0; i < stItemId.length; i++) {
            Conditions subconds = Conditions.newAndConditions();
            subconds.add(new Condition("ST_ITEM_ID", Condition.OT_EQUAL, stItemId[i]));
            conds.add(subconds);
        }
        delete(conds);
    }

    public void delete(String stItemId) {
        Conditions conds = Conditions.newAndConditions();
        conds.add(new Condition("ST_ITEM_ID", Condition.OT_EQUAL, stItemId));
        delete(conds);
    }

    public PaginationArrayList<UacItemInfoTwo> query(Conditions conds, String suffix, int pageSize, int currentPage) {
        RecordSet rs;
        if (con == null) {
            rs = SQL.query("UAC_ITEM_INFO", "*", conds, suffix, pageSize, currentPage);
        } else {
            rs = SQL.query(con, "UAC_ITEM_INFO", "*", conds, suffix, pageSize, currentPage);
        }
        PaginationArrayList<UacItemInfoTwo> pal = new PaginationArrayList<UacItemInfoTwo>(rs.TOTAL_RECORD_COUNT, rs.COMMON_PAGE_SIZE, rs.CURRENT_PAGE);
        while (rs.next()) {
            UacItemInfoTwo info = new UacItemInfoTwo();
            setProperties(info, rs);
            pal.add(info);
        }
        return pal;
    }

    public List<UacItemInfoTwo> query(Conditions conds, String suffix) {
        RecordSet rs;
        if (con == null) {
            rs = SQL.query("UAC_ITEM_INFO", "*", conds, suffix);
        } else {
            rs = SQL.query(con, "UAC_ITEM_INFO", "*", conds, suffix);
        }
        ArrayList<UacItemInfoTwo> al = new ArrayList<UacItemInfoTwo>();
        while (rs.next()) {
            UacItemInfoTwo info = new UacItemInfoTwo();
            setProperties(info, rs);
            al.add(info);
        }
        return al;
    }

    public static void setProperties(UacItemInfoTwo info, RecordSet rs){
        info.setStItemId(rs.getOriginalString("ST_ITEM_ID"));
        info.setStItemCode(rs.getOriginalString("ST_ITEM_CODE"));
        info.setStItemName(rs.getOriginalString("ST_ITEM_NAME"));
        info.setStSubItemCode(rs.getOriginalString("ST_SUB_ITEM_CODE"));
        info.setStSubItemName(rs.getOriginalString("ST_SUB_ITEM_NAME"));
        info.setStInnerNo(rs.getOriginalString("ST_INNER_NO"));
        info.setStTransactName(rs.getOriginalString("ST_TRANSACT_NAME"));
        info.setStInheritId(rs.getOriginalString("ST_INHERIT_ID"));
        info.setStAreaId(rs.getOriginalString("ST_AREA_ID"));
        info.setStAreaCode(rs.getOriginalString("ST_AREA_CODE"));
        info.setStOrganId(rs.getOriginalString("ST_ORGAN_ID"));
        info.setStDepartCode(rs.getOriginalString("ST_DEPART_CODE"));
        info.setStDepartName(rs.getOriginalString("ST_DEPART_NAME"));
        info.setNmOrder(rs.getBigDecimal("NM_ORDER"));
        info.setStParentId(rs.getOriginalString("ST_PARENT_ID"));
        info.setNmSms(rs.getBigDecimal("NM_SMS"));
        info.setNmAllOnline(rs.getBigDecimal("NM_ALL_ONLINE"));
        info.setNmImt(rs.getBigDecimal("NM_IMT"));
        info.setNmFtype(rs.getBigDecimal("NM_FTYPE"));
        info.setStFurl(rs.getOriginalString("ST_FURL"));
        info.setNmInheritType(rs.getBigDecimal("NM_INHERIT_TYPE"));
        info.setStType(rs.getOriginalString("ST_TYPE"));
        info.setStEcertCode(rs.getOriginalString("ST_ECERT_CODE"));
        info.setStEcertName(rs.getOriginalString("ST_ECERT_NAME"));
        info.setNmRemoved(rs.getBigDecimal("NM_REMOVED"));
        info.setStExt1(rs.getOriginalString("ST_EXT1"));
        info.setStExt2(rs.getOriginalString("ST_EXT2"));
        info.setStGroupName(rs.getOriginalString("ST_GROUP_NAME"));
    }

    public UacItemInfoTwo get(String stItemId) {
        Conditions conds = Conditions.newAndConditions();
        conds.add(new Condition("ST_ITEM_ID", Condition.OT_EQUAL, stItemId));
        List<UacItemInfoTwo> list = query(conds, null);
        return list.size() > 0 ? list.get(0) : null;
    }
    //除去与主题关联的事项列表
    public PaginationArrayList<UacItemInfoTwo> queryNoLink(Conditions conds, String stItemsID,String stItemName, int pageSize, int currentPage) {
        RecordSet rs;
        String content = "*";
        String table;
        if (stItemName != null) {
            table = "UAC_ITEM_INFO where ST_ITEM_ID  NOT IN (SELECT uii.ST_ITEM_ID  FROM UAC_ITEMS_LINK uil JOIN UAC_ITEM_INFO uii ON uii.ST_ITEM_ID= uil.ST_ITEM_ID JOIN UAC_ITEMS ui ON ui.ST_ITEMS_ID= uil.ST_ITEMS_ID  WHERE ui.ST_ITEMS_ID= '"+stItemsID+"' ) AND ST_ITEM_NAME like '%"+stItemName+"%'";
        }else {
            table = "UAC_ITEM_INFO where ST_ITEM_ID  NOT IN (SELECT uii.ST_ITEM_ID  FROM UAC_ITEMS_LINK uil JOIN UAC_ITEM_INFO uii ON uii.ST_ITEM_ID= uil.ST_ITEM_ID JOIN UAC_ITEMS ui ON ui.ST_ITEMS_ID= uil.ST_ITEMS_ID  WHERE ui.ST_ITEMS_ID= '"+stItemsID+"' )";
        }
        String suffix = " ";
        if(con == null){
            rs = SQL.query(table,content,conds, suffix,pageSize,currentPage);
        }else{
            rs = SQL.query(con,table,content,conds, suffix,pageSize,currentPage);
        }

        PaginationArrayList<UacItemInfoTwo> pal = new PaginationArrayList<UacItemInfoTwo>(rs.TOTAL_RECORD_COUNT,rs.COMMON_PAGE_SIZE, rs.CURRENT_PAGE);
        while (rs.next()) {
            UacItemInfoTwo info = new UacItemInfoTwo();
            setProperties(info, rs);
            pal.add(info);
        }
        return pal;
    }

    public int update(Conditions conds) {
        String sql = "update UAC_ITEM_INFO set NM_REMOVED = '1'";
        String subsql = conds != null ? conds.toString() : "";
        if ("".equals(subsql)) {
            if (con == null) {
                return SQL.execute(sql).TOTAL_RECORD_COUNT;
            } else {
                return SQL.execute(con, sql).TOTAL_RECORD_COUNT;
            }
        } else {
            sql += " where " + subsql;
            if (con == null) {
                return SQL.execute(sql, conds.getObjectArray()).TOTAL_RECORD_COUNT;
            } else {
                return SQL.execute(con, sql, conds.getObjectArray()).TOTAL_RECORD_COUNT;
            }
        }
    }

    //逻辑删除
    public void logicDelete(String[] stItemId) {
        Conditions conds = Conditions.newOrConditions();
        for (int i = 0; i < stItemId.length; i++) {
            Conditions subconds = Conditions.newAndConditions();
            subconds.add(new Condition("ST_ITEM_ID", Condition.OT_EQUAL, stItemId[i]));
            conds.add(subconds);
        }
        update(conds);
    }

    //根据事项组id查关联的事项信息
    public PaginationArrayList<UacItemInfoTwo> queryBystGroupId(String stGroupId,int pageSize, int currentPage) {
        RecordSet rs;
        String sql = "SELECT uii.*,ug.ST_GROUP_NAME FROM UAC_ITEM_GROUP_LINK uigl JOIN UAC_ITEM_INFO uii ON uii.ST_ITEM_ID= uigl.ST_ITEM_ID JOIN UAC_GROUP ug ON ug.ST_GROUP_ID= uigl.ST_GROUP_ID  WHERE ug.ST_GROUP_ID = '"+stGroupId+"'";
        rs = SQL.execute(sql,pageSize,currentPage);
        PaginationArrayList<UacItemInfoTwo> pal = new PaginationArrayList<UacItemInfoTwo>(rs.TOTAL_RECORD_COUNT,rs.COMMON_PAGE_SIZE, rs.CURRENT_PAGE);
        while (rs.next()) {
            UacItemInfoTwo info = new UacItemInfoTwo();
            setProperties(info, rs);
            pal.add(info);
        }
        return pal;
    }

    //除去与事项组关联的事项列表
    public PaginationArrayList<UacItemInfoTwo> queryNoGroupLink(Conditions conds, String stGroupId,String stItemName, int pageSize, int currentPage) {
        RecordSet rs;
        String content = "*";
        String table;
        if (stItemName != null) {
            table = "UAC_ITEM_INFO where ST_ITEM_ID  NOT IN (SELECT uii.ST_ITEM_ID  FROM UAC_ITEM_GROUP_LINK uigl JOIN UAC_ITEM_INFO uii ON uii.ST_ITEM_ID= uigl.ST_ITEM_ID JOIN UAC_GROUP ug ON ug.ST_GROUP_ID= uigl.ST_GROUP_ID  WHERE ug.ST_GROUP_ID= '"+stGroupId+"' ) AND ST_ITEM_NAME like '%"+stItemName+"%'";
        }else {
            table = "UAC_ITEM_INFO where ST_ITEM_ID  NOT IN (SELECT uii.ST_ITEM_ID  FROM UAC_ITEM_GROUP_LINK uigl JOIN UAC_ITEM_INFO uii ON uii.ST_ITEM_ID= uigl.ST_ITEM_ID JOIN UAC_GROUP ug ON ug.ST_GROUP_ID= uigl.ST_GROUP_ID  WHERE ug.ST_GROUP_ID= '"+stGroupId+"' )";
        }
        String suffix = " ";
        if(con == null){
            rs = SQL.query(table,content,conds, suffix,pageSize,currentPage);
        }else{
            rs = SQL.query(con,table,content,conds, suffix,pageSize,currentPage);
        }

        PaginationArrayList<UacItemInfoTwo> pal = new PaginationArrayList<UacItemInfoTwo>(rs.TOTAL_RECORD_COUNT,rs.COMMON_PAGE_SIZE, rs.CURRENT_PAGE);
        while (rs.next()) {
            UacItemInfoTwo info = new UacItemInfoTwo();
            setProperties(info, rs);
            pal.add(info);
        }
        return pal;
    }


}
