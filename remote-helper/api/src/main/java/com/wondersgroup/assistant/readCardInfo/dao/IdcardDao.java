package com.wondersgroup.assistant.readCardInfo.dao;

import java.sql.*;
import java.util.*;
import wfc.facility.tool.autocode.*;
import wfc.service.database.*;
import org.springframework.stereotype.Repository;

/**
 * IDCard
 * @author generated by wfc.facility.tool.autocode.InternalDaoGenerator
 */
@Repository
public class IdcardDao {

    private Connection con = null;

    public IdcardDao() {
    }

    public IdcardDao(Connection con) {
        this.con = con;
    }

    public void add(Idcard info) {
        String sql = "insert into IDCard(Zzlx, Name, Sex, Nation, Birthday, IdCode, StartDate, EndDate, Address, ImgBase64, Department, SAMID, EName, BEIYONG1, BEIYONG2) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        Object[] obj = {
            info.getZzlx(),
            info.getName(),
            info.getSex(),
            info.getNation(),
            info.getBirthday(),
            info.getIdcode(),
            info.getStartdate(),
            info.getEnddate(),
            info.getAddress(),
            info.getImgbase64(),
            info.getDepartment(),
            info.getSamid(),
            info.getEname(),
            info.getBeiyong1(),
            info.getBeiyong2()        	
        };
        if (con == null) {
            SQL.execute(sql, obj);
        } else {
            SQL.execute(con, sql, obj);
        }
    }


    public int update(Map<String, Object> map, Conditions conds) {
        String sql = "update IDCard set ";
        List<Object> list = new ArrayList<Object>();
        int i = 0;
        for (String field : map.keySet()) {
            if (i++ > 0) {
                sql += ", ";
            }
            sql += field + " = ?";
            list.add(map.get(field));
        }
        String subsql = conds != null ? conds.toString() : "";
        if ("".equals(subsql)) {
            if (con == null) {
                return SQL.execute(sql).TOTAL_RECORD_COUNT;
            } else {
                return SQL.execute(con, sql).TOTAL_RECORD_COUNT;
            }
        } else {
            sql += " where " + subsql;
            list.addAll(conds.getObjectList());
            if (con == null) {
                return SQL.execute(sql, list.toArray()).TOTAL_RECORD_COUNT;
            } else {
                return SQL.execute(con, sql, list.toArray()).TOTAL_RECORD_COUNT;
            }
        }
    }
    
    public int delete(Conditions conds) {
        String sql = "delete from IDCard";
        String subsql = conds != null ? conds.toString() : "";
        if ("".equals(subsql)) {
            if (con == null) {
                return SQL.execute(sql).TOTAL_RECORD_COUNT;
            } else {
                return SQL.execute(con, sql).TOTAL_RECORD_COUNT;
            }
        } else {
            sql += " where " + subsql;
            if (con == null) {
                return SQL.execute(sql, conds.getObjectArray()).TOTAL_RECORD_COUNT;
            } else {
                return SQL.execute(con, sql, conds.getObjectArray()).TOTAL_RECORD_COUNT;
            }
        }
    }



    public PaginationArrayList<Idcard> query(Conditions conds, String suffix, int pageSize, int currentPage) {
        RecordSet rs;
        if (con == null) {
            rs = SQL.query("IDCard", "*", conds, suffix, pageSize, currentPage);
        } else {
            rs = SQL.query(con, "IDCard", "*", conds, suffix, pageSize, currentPage);
        }
        PaginationArrayList<Idcard> pal = new PaginationArrayList<Idcard>(rs.TOTAL_RECORD_COUNT, rs.COMMON_PAGE_SIZE, rs.CURRENT_PAGE);
        while (rs.next()) {
            Idcard info = new Idcard();
            setProperties(info, rs);
            pal.add(info);
        }
        return pal;
    }

    public List<Idcard> query(Conditions conds, String suffix) {
        RecordSet rs;
        if (con == null) {
            rs = SQL.query("IDCard", "*", conds, suffix);
        } else {
            rs = SQL.query(con, "IDCard", "*", conds, suffix);
        }
        ArrayList<Idcard> al = new ArrayList<Idcard>();
        while (rs.next()) {
            Idcard info = new Idcard();
            setProperties(info, rs);
            al.add(info);
        }
        return al;
    }
    
    public static void setProperties(Idcard info, RecordSet rs){
        info.setZzlx(rs.getOriginalString("Zzlx"));
        info.setName(rs.getOriginalString("Name"));
        info.setSex(rs.getOriginalString("Sex"));
        info.setNation(rs.getOriginalString("Nation"));
        info.setBirthday(rs.getOriginalString("Birthday"));
        info.setIdcode(rs.getOriginalString("IdCode"));
        info.setStartdate(rs.getOriginalString("StartDate"));
        info.setEnddate(rs.getOriginalString("EndDate"));
        info.setAddress(rs.getOriginalString("Address"));
        info.setImgbase64(rs.getOriginalString("ImgBase64"));
        info.setDepartment(rs.getOriginalString("Department"));
        info.setSamid(rs.getOriginalString("SAMID"));
        info.setEname(rs.getOriginalString("EName"));
        info.setBeiyong1(rs.getOriginalString("BEIYONG1"));
        info.setBeiyong2(rs.getOriginalString("BEIYONG2"));
    }


}
