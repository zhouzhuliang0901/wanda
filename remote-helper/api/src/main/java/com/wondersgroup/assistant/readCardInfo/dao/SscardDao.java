package com.wondersgroup.assistant.readCardInfo.dao;

import org.springframework.stereotype.Repository;
import wfc.facility.tool.autocode.PaginationArrayList;
import wfc.service.database.Conditions;
import wfc.service.database.RecordSet;
import wfc.service.database.SQL;

import java.sql.Connection;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

/**
 * SSCard
 * @author generated by wfc.facility.tool.autocode.InternalDaoGenerator
 */
@Repository
public class SscardDao {

    private Connection con = null;

    public SscardDao() {
    }

    public SscardDao(Connection con) {
        this.con = con;
    }

    public void add(Sscard info) {
        String sql = "insert into SSCard(Zzlx, Name, Sex, Nation, Birthday, IdCode, StartDate, EndDate, Address, CardNo, CardIDN, Phone, CardCity, BEIYONG1, BEIYONG2) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        Object[] obj = {
            info.getZzlx(),
            info.getName(),
            info.getSex(),
            info.getNation(),
            info.getBirthday(),
            info.getIdcode(),
            info.getStartdate(),
            info.getEnddate(),
            info.getAddress(),
            info.getCardno(),
            info.getCardidn(),
            info.getPhone(),
            info.getCardcity(),
            info.getCardcity(),
            info.getBeiyong2()        	
        };
        if (con == null) {
            SQL.execute(sql, obj);
        } else {
            SQL.execute(con, sql, obj);
        }
    }


    public int update(Map<String, Object> map, Conditions conds) {
        String sql = "update SSCard set ";
        List<Object> list = new ArrayList<Object>();
        int i = 0;
        for (String field : map.keySet()) {
            if (i++ > 0) {
                sql += ", ";
            }
            sql += field + " = ?";
            list.add(map.get(field));
        }
        String subsql = conds != null ? conds.toString() : "";
        if ("".equals(subsql)) {
            if (con == null) {
                return SQL.execute(sql).TOTAL_RECORD_COUNT;
            } else {
                return SQL.execute(con, sql).TOTAL_RECORD_COUNT;
            }
        } else {
            sql += " where " + subsql;
            list.addAll(conds.getObjectList());
            if (con == null) {
                return SQL.execute(sql, list.toArray()).TOTAL_RECORD_COUNT;
            } else {
                return SQL.execute(con, sql, list.toArray()).TOTAL_RECORD_COUNT;
            }
        }
    }
    
    public int delete(Conditions conds) {
        String sql = "delete from SSCard";
        String subsql = conds != null ? conds.toString() : "";
        if ("".equals(subsql)) {
            if (con == null) {
                return SQL.execute(sql).TOTAL_RECORD_COUNT;
            } else {
                return SQL.execute(con, sql).TOTAL_RECORD_COUNT;
            }
        } else {
            sql += " where " + subsql;
            if (con == null) {
                return SQL.execute(sql, conds.getObjectArray()).TOTAL_RECORD_COUNT;
            } else {
                return SQL.execute(con, sql, conds.getObjectArray()).TOTAL_RECORD_COUNT;
            }
        }
    }



    public PaginationArrayList<Sscard> query(Conditions conds, String suffix, int pageSize, int currentPage) {
        RecordSet rs;
        if (con == null) {
            rs = SQL.query("SSCard", "*", conds, suffix, pageSize, currentPage);
        } else {
            rs = SQL.query(con, "SSCard", "*", conds, suffix, pageSize, currentPage);
        }
        PaginationArrayList<Sscard> pal = new PaginationArrayList<Sscard>(rs.TOTAL_RECORD_COUNT, rs.COMMON_PAGE_SIZE, rs.CURRENT_PAGE);
        while (rs.next()) {
            Sscard info = new Sscard();
            setProperties(info, rs);
            pal.add(info);
        }
        return pal;
    }

    public List<Sscard> query(Conditions conds, String suffix) {
        RecordSet rs;
        if (con == null) {
            rs = SQL.query("SSCard", "*", conds, suffix);
        } else {
            rs = SQL.query(con, "SSCard", "*", conds, suffix);
        }
        ArrayList<Sscard> al = new ArrayList<Sscard>();
        while (rs.next()) {
            Sscard info = new Sscard();
            setProperties(info, rs);
            al.add(info);
        }
        return al;
    }
    
    public static void setProperties(Sscard info, RecordSet rs){
        info.setZzlx(rs.getOriginalString("Zzlx"));
        info.setName(rs.getOriginalString("Name"));
        info.setSex(rs.getOriginalString("Sex"));
        info.setNation(rs.getOriginalString("Nation"));
        info.setBirthday(rs.getOriginalString("Birthday"));
        info.setIdcode(rs.getOriginalString("IdCode"));
        info.setStartdate(rs.getOriginalString("StartDate"));
        info.setEnddate(rs.getOriginalString("EndDate"));
        info.setAddress(rs.getOriginalString("Address"));
        info.setCardno(rs.getOriginalString("CardNo"));
        info.setCardidn(rs.getOriginalString("CardIDN"));
        info.setPhone(rs.getOriginalString("Phone"));
        info.setCardcity(rs.getOriginalString("CardCity"));
        info.setCardVer(rs.getOriginalString("BEIYONG1"));
        info.setBeiyong2(rs.getOriginalString("BEIYONG2"));
    }


}
